
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.34 (git sha1 4a1b5599258, gcc 8.3.1 -fPIC -Os)

[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

1. Executing Verilog-2005 frontend: /openlane/designs/alphacore/src/alphacore.v
Parsing SystemVerilog input from `/openlane/designs/alphacore/src/alphacore.v' to AST representation.
Generating RTLIL representation for module `\alphacore'.
Successfully finished Verilog frontend.

2. Executing Verilog-2005 frontend: /openlane/designs/alphacore/src/alphasoc_regs.v
Parsing SystemVerilog input from `/openlane/designs/alphacore/src/alphasoc_regs.v' to AST representation.
Generating RTLIL representation for module `\alphasoc_regs'.
Successfully finished Verilog frontend.

3. Generating Graphviz representation of design.
Writing dot description to `/openlane/designs/alphacore/runs/RUN_2023.12.03_09.03.48/tmp/synthesis/hierarchy.dot'.
Dumping module alphacore to page 1.

4. Executing HIERARCHY pass (managing design hierarchy).

4.1. Analyzing design hierarchy..
Top module:  \alphacore
Used module:     \alphasoc_regs

4.2. Analyzing design hierarchy..
Top module:  \alphacore
Used module:     \alphasoc_regs
Removed 0 unused modules.
Renaming module alphacore to alphacore.

5. Executing TRIBUF pass.

6. Executing HIERARCHY pass (managing design hierarchy).

6.1. Analyzing design hierarchy..
Top module:  \alphacore
Used module:     \alphasoc_regs

6.2. Analyzing design hierarchy..
Top module:  \alphacore
Used module:     \alphasoc_regs
Removed 0 unused modules.

7. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 14 empty switches in `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:1137$467'.
Found and cleaned up 1 empty switch in `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:1123$453'.
Found and cleaned up 6 empty switches in `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:291$106'.
Removing empty process `alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:291$106'.
Cleaned up 21 empty switches.

8. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 36 switch rules as full_case in process $proc$/openlane/designs/alphacore/src/alphacore.v:1137$467 in module alphacore.
Marked 2 switch rules as full_case in process $proc$/openlane/designs/alphacore/src/alphacore.v:1078$439 in module alphacore.
Marked 2 switch rules as full_case in process $proc$/openlane/designs/alphacore/src/alphacore.v:1064$434 in module alphacore.
Marked 8 switch rules as full_case in process $proc$/openlane/designs/alphacore/src/alphacore.v:959$403 in module alphacore.
Marked 3 switch rules as full_case in process $proc$/openlane/designs/alphacore/src/alphacore.v:631$146 in module alphacore.
Marked 3 switch rules as full_case in process $proc$/openlane/designs/alphacore/src/alphacore.v:601$144 in module alphacore.
Marked 2 switch rules as full_case in process $proc$/openlane/designs/alphacore/src/alphacore.v:570$140 in module alphacore.
Marked 48 switch rules as full_case in process $proc$/openlane/designs/alphacore/src/alphacore.v:445$139 in module alphacore.
Marked 4 switch rules as full_case in process $proc$/openlane/designs/alphacore/src/alphacore.v:310$115 in module alphacore.
Marked 1 switch rules as full_case in process $proc$/openlane/designs/alphacore/src/alphacore.v:175$78 in module alphacore.
Removed 2 dead cases from process $proc$/openlane/designs/alphacore/src/alphacore.v:146$75 in module alphacore.
Marked 2 switch rules as full_case in process $proc$/openlane/designs/alphacore/src/alphacore.v:146$75 in module alphacore.
Marked 1 switch rules as full_case in process $proc$/openlane/designs/alphacore/src/alphacore.v:135$70 in module alphacore.
Marked 1 switch rules as full_case in process $proc$/openlane/designs/alphacore/src/alphasoc_regs.v:12$638 in module alphasoc_regs.
Removed a total of 2 dead cases.

9. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 3 redundant assignments.
Promoted 53 assignments to connections.

10. Executing PROC_INIT pass (extract init attributes).

11. Executing PROC_ARST pass (detect async resets in processes).

12. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~187 debug messages>

13. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:1137$467'.
     1/80: $18\next_irq_pending[2:2]
     2/80: $17\next_irq_pending[2:2]
     3/80: $16\next_irq_pending[2:2]
     4/80: $15\next_irq_pending[2:2]
     5/80: $14\next_irq_pending[2:2]
     6/80: $13\next_irq_pending[2:2]
     7/80: $12\next_irq_pending[2:2]
     8/80: $11\next_irq_pending[0:0]
     9/80: $10\next_irq_pending[0:0]
    10/80: $9\next_irq_pending[31:0] [0]
    11/80: $9\next_irq_pending[31:0] [31:1]
    12/80: $2\next_irq_pending[31:0] [31:2]
    13/80: $3\set_mem_do_rdata[0:0]
    14/80: $2\next_irq_pending[31:0] [1]
    15/80: $3\set_mem_do_wdata[0:0]
    16/80: $2\next_irq_pending[31:0] [0]
    17/80: $4\set_mem_do_rinst[0:0]
    18/80: $3\set_mem_do_rinst[0:0]
    19/80: $4\set_mem_do_wdata[0:0]
    20/80: $7\next_irq_pending[1:1]
    21/80: $6\next_irq_pending[1:1]
    22/80: $4\set_mem_do_rdata[0:0]
    23/80: $4\next_irq_pending[1:1]
    24/80: $8\next_irq_pending[1:1]
    25/80: $5\set_mem_do_rinst[0:0]
    26/80: $5\next_irq_pending[1:1]
    27/80: $3\next_irq_pending[31:0]
    28/80: $3\current_pc[31:0]
    29/80: $2\current_pc[31:0]
    30/80: $2\set_mem_do_wdata[0:0]
    31/80: $2\set_mem_do_rdata[0:0]
    32/80: $2\set_mem_do_rinst[0:0]
    33/80: $1\next_irq_pending[31:0]
    34/80: $1\current_pc[31:0]
    35/80: $1\set_mem_do_wdata[0:0]
    36/80: $1\set_mem_do_rdata[0:0]
    37/80: $1\set_mem_do_rinst[0:0]
    38/80: $0\trace_data[35:0]
    39/80: $0\count_cycle[63:0]
    40/80: $0\trace_valid[0:0]
    41/80: $0\do_waitirq[0:0]
    42/80: $0\decoder_pseudo_trigger[0:0]
    43/80: $0\decoder_trigger[0:0]
    44/80: $0\alu_wait_2[0:0]
    45/80: $0\alu_wait[0:0]
    46/80: $0\reg_out[31:0]
    47/80: $0\reg_sh[4:0]
    48/80: $0\trap[0:0]
    49/80: $0\cpi_timeout[0:0]
    50/80: $0\latched_rd[4:0]
    51/80: $0\latched_is_lb[0:0]
    52/80: $0\latched_is_lh[0:0]
    53/80: $0\latched_is_lu[0:0]
    54/80: $0\latched_trace[0:0]
    55/80: $0\latched_compr[0:0]
    56/80: $0\latched_branch[0:0]
    57/80: $0\latched_stalu[0:0]
    58/80: $0\latched_store[0:0]
    59/80: $0\irq_state[1:0]
    60/80: $0\cpu_state[7:0]
    61/80: $0\dbg_rs2val_valid[0:0]
    62/80: $0\dbg_rs1val_valid[0:0]
    63/80: $0\dbg_rs2val[31:0]
    64/80: $0\dbg_rs1val[31:0]
    65/80: $0\mem_do_wdata[0:0]
    66/80: $0\mem_do_rdata[0:0]
    67/80: $0\mem_do_rinst[0:0]
    68/80: $0\mem_do_prefetch[0:0]
    69/80: $0\mem_wordsize[1:0]
    70/80: $0\timer[31:0]
    71/80: $0\irq_mask[31:0]
    72/80: $0\irq_active[0:0]
    73/80: $0\irq_delay[0:0]
    74/80: $0\reg_op2[31:0]
    75/80: $0\reg_op1[31:0]
    76/80: $0\reg_next_pc[31:0]
    77/80: $0\reg_pc[31:0]
    78/80: $0\count_instr[63:0]
    79/80: $0\eoi[31:0]
    80/80: $0\cpi_valid[0:0]
Creating decoders for process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:1123$453'.
Creating decoders for process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:1078$439'.
     1/4: $2\cpuregs_write[0:0]
     2/4: $2\cpuregs_wrdata[31:0]
     3/4: $1\cpuregs_wrdata[31:0]
     4/4: $1\cpuregs_write[0:0]
Creating decoders for process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:1064$434'.
     1/2: $2\clear_prefetched_high_word[0:0]
     2/2: $1\clear_prefetched_high_word[0:0]
Creating decoders for process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:1062$433'.
Creating decoders for process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:1022$415'.
     1/2: $1\alu_out[31:0]
     2/2: $1\alu_out_0[0:0]
Creating decoders for process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:959$403'.
     1/8: $8\dbg_ascii_state[127:0]
     2/8: $7\dbg_ascii_state[127:0]
     3/8: $6\dbg_ascii_state[127:0]
     4/8: $5\dbg_ascii_state[127:0]
     5/8: $4\dbg_ascii_state[127:0]
     6/8: $3\dbg_ascii_state[127:0]
     7/8: $2\dbg_ascii_state[127:0]
     8/8: $1\dbg_ascii_state[127:0]
Creating decoders for process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:631$146'.
     1/77: $0\decoded_rs1[4:0] [4]
     2/77: $0\decoded_imm_j[31:0] [10]
     3/77: $0\decoded_imm_j[31:0] [7]
     4/77: $0\decoded_imm_j[31:0] [6]
     5/77: $0\decoded_imm_j[31:0] [3:1]
     6/77: $0\decoded_imm_j[31:0] [5]
     7/77: $0\decoded_imm_j[31:0] [9:8]
     8/77: $0\decoded_imm_j[31:0] [31:20]
     9/77: $0\decoded_imm_j[31:0] [4]
    10/77: $0\decoded_imm_j[31:0] [11]
    11/77: $0\decoded_imm_j[31:0] [0]
    12/77: $0\decoded_rs1[4:0] [3:0]
    13/77: $0\is_lui_auipc_jal_jalr_addi_add_sub[0:0]
    14/77: $0\is_alu_reg_reg[0:0]
    15/77: $0\is_alu_reg_imm[0:0]
    16/77: $0\is_beq_bne_blt_bge_bltu_bgeu[0:0]
    17/77: $0\is_sll_srl_sra[0:0]
    18/77: $0\is_sb_sh_sw[0:0]
    19/77: $0\is_jalr_addi_slti_sltiu_xori_ori_andi[0:0]
    20/77: $0\is_slli_srli_srai[0:0]
    21/77: $0\is_lb_lh_lw_lbu_lhu[0:0]
    22/77: $0\compressed_instr[0:0]
    23/77: $0\is_compare[0:0]
    24/77: $0\decoded_imm[31:0]
    25/77: $0\decoded_rs2[4:0]
    26/77: $0\decoded_imm_j[31:0] [19:12]
    27/77: $0\decoded_rd[4:0]
    28/77: $0\instr_timer[0:0]
    29/77: $0\instr_waitirq[0:0]
    30/77: $0\instr_maskirq[0:0]
    31/77: $0\instr_retirq[0:0]
    32/77: $0\instr_setq[0:0]
    33/77: $0\instr_getq[0:0]
    34/77: $0\instr_fence[0:0]
    35/77: $0\instr_ecall_ebreak[0:0]
    36/77: $0\instr_rdinstrh[0:0]
    37/77: $0\instr_rdinstr[0:0]
    38/77: $0\instr_rdcycleh[0:0]
    39/77: $0\instr_rdcycle[0:0]
    40/77: $0\instr_and[0:0]
    41/77: $0\instr_or[0:0]
    42/77: $0\instr_sra[0:0]
    43/77: $0\instr_srl[0:0]
    44/77: $0\instr_xor[0:0]
    45/77: $0\instr_sltu[0:0]
    46/77: $0\instr_slt[0:0]
    47/77: $0\instr_sll[0:0]
    48/77: $0\instr_sub[0:0]
    49/77: $0\instr_add[0:0]
    50/77: $0\instr_srai[0:0]
    51/77: $0\instr_srli[0:0]
    52/77: $0\instr_slli[0:0]
    53/77: $0\instr_andi[0:0]
    54/77: $0\instr_ori[0:0]
    55/77: $0\instr_xori[0:0]
    56/77: $0\instr_sltiu[0:0]
    57/77: $0\instr_slti[0:0]
    58/77: $0\instr_addi[0:0]
    59/77: $0\instr_sw[0:0]
    60/77: $0\instr_sh[0:0]
    61/77: $0\instr_sb[0:0]
    62/77: $0\instr_lhu[0:0]
    63/77: $0\instr_lbu[0:0]
    64/77: $0\instr_lw[0:0]
    65/77: $0\instr_lh[0:0]
    66/77: $0\instr_lb[0:0]
    67/77: $0\instr_bgeu[0:0]
    68/77: $0\instr_bltu[0:0]
    69/77: $0\instr_bge[0:0]
    70/77: $0\instr_blt[0:0]
    71/77: $0\instr_bne[0:0]
    72/77: $0\instr_beq[0:0]
    73/77: $0\instr_jalr[0:0]
    74/77: $0\instr_jal[0:0]
    75/77: $0\instr_auipc[0:0]
    76/77: $0\instr_lui[0:0]
    77/77: $0\cpi_insn[31:0]
Creating decoders for process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:601$144'.
     1/13: $3\dbg_insn_opcode[31:0]
     2/13: $2\dbg_insn_rd[4:0]
     3/13: $2\dbg_insn_rs2[4:0]
     4/13: $2\dbg_insn_rs1[4:0]
     5/13: $2\dbg_insn_opcode[31:0]
     6/13: $2\dbg_insn_imm[31:0]
     7/13: $2\dbg_ascii_instr[63:0]
     8/13: $1\dbg_insn_rd[4:0]
     9/13: $1\dbg_insn_rs2[4:0]
    10/13: $1\dbg_insn_rs1[4:0]
    11/13: $1\dbg_insn_imm[31:0]
    12/13: $1\dbg_ascii_instr[63:0]
    13/13: $1\dbg_insn_opcode[31:0]
Creating decoders for process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:570$140'.
     1/8: $0\cached_insn_rd[4:0]
     2/8: $0\cached_insn_rs2[4:0]
     3/8: $0\cached_insn_rs1[4:0]
     4/8: $0\cached_insn_opcode[31:0]
     5/8: $0\cached_insn_imm[31:0]
     6/8: $0\cached_ascii_instr[63:0]
     7/8: $0\dbg_valid_insn[0:0]
     8/8: $0\dbg_insn_addr[31:0]
Creating decoders for process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:445$139'.
     1/48: $48\new_ascii_instr[63:0]
     2/48: $47\new_ascii_instr[63:0]
     3/48: $46\new_ascii_instr[63:0]
     4/48: $45\new_ascii_instr[63:0]
     5/48: $44\new_ascii_instr[63:0]
     6/48: $43\new_ascii_instr[63:0]
     7/48: $42\new_ascii_instr[63:0]
     8/48: $41\new_ascii_instr[63:0]
     9/48: $40\new_ascii_instr[63:0]
    10/48: $39\new_ascii_instr[63:0]
    11/48: $38\new_ascii_instr[63:0]
    12/48: $37\new_ascii_instr[63:0]
    13/48: $36\new_ascii_instr[63:0]
    14/48: $35\new_ascii_instr[63:0]
    15/48: $34\new_ascii_instr[63:0]
    16/48: $33\new_ascii_instr[63:0]
    17/48: $32\new_ascii_instr[63:0]
    18/48: $31\new_ascii_instr[63:0]
    19/48: $30\new_ascii_instr[63:0]
    20/48: $29\new_ascii_instr[63:0]
    21/48: $28\new_ascii_instr[63:0]
    22/48: $27\new_ascii_instr[63:0]
    23/48: $26\new_ascii_instr[63:0]
    24/48: $25\new_ascii_instr[63:0]
    25/48: $24\new_ascii_instr[63:0]
    26/48: $23\new_ascii_instr[63:0]
    27/48: $22\new_ascii_instr[63:0]
    28/48: $21\new_ascii_instr[63:0]
    29/48: $20\new_ascii_instr[63:0]
    30/48: $19\new_ascii_instr[63:0]
    31/48: $18\new_ascii_instr[63:0]
    32/48: $17\new_ascii_instr[63:0]
    33/48: $16\new_ascii_instr[63:0]
    34/48: $15\new_ascii_instr[63:0]
    35/48: $14\new_ascii_instr[63:0]
    36/48: $13\new_ascii_instr[63:0]
    37/48: $12\new_ascii_instr[63:0]
    38/48: $11\new_ascii_instr[63:0]
    39/48: $10\new_ascii_instr[63:0]
    40/48: $9\new_ascii_instr[63:0]
    41/48: $8\new_ascii_instr[63:0]
    42/48: $7\new_ascii_instr[63:0]
    43/48: $6\new_ascii_instr[63:0]
    44/48: $5\new_ascii_instr[63:0]
    45/48: $4\new_ascii_instr[63:0]
    46/48: $3\new_ascii_instr[63:0]
    47/48: $2\new_ascii_instr[63:0]
    48/48: $1\new_ascii_instr[63:0]
Creating decoders for process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:310$115'.
     1/9: $0\mem_16bit_buffer[15:0]
     2/9: $0\prefetched_high_word[0:0]
     3/9: $0\mem_la_secondword[0:0]
     4/9: $0\mem_state[1:0]
     5/9: $0\mem_wstrb[3:0]
     6/9: $0\mem_wdata[31:0]
     7/9: $0\mem_addr[31:0]
     8/9: $0\mem_instr[0:0]
     9/9: $0\mem_valid[0:0]
Creating decoders for process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:1012$626'.
Creating decoders for process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:175$78'.
     1/9: $0\mem_rdata_q[31:0] [31]
     2/9: $0\mem_rdata_q[31:0] [7]
     3/9: $0\mem_rdata_q[31:0] [24:20]
     4/9: $0\mem_rdata_q[31:0] [19:15]
     5/9: $0\mem_rdata_q[31:0] [6:0]
     6/9: $0\mem_rdata_q[31:0] [14:12]
     7/9: $0\mem_rdata_q[31:0] [11:8]
     8/9: $0\mem_rdata_q[31:0] [30:25]
     9/9: $0\next_insn_opcode[31:0]
Creating decoders for process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:146$75'.
     1/5: $3\mem_rdata_word[31:0]
     2/5: $2\mem_rdata_word[31:0]
     3/5: $1\mem_rdata_word[31:0]
     4/5: $1\mem_la_wstrb[3:0]
     5/5: $1\mem_la_wdata[31:0]
Creating decoders for process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:135$70'.
     1/2: $0\last_mem_valid[0:0]
     2/2: $0\mem_la_firstword_reg[0:0]
Creating decoders for process `\alphasoc_regs.$proc$/openlane/designs/alphacore/src/alphasoc_regs.v:12$638'.
     1/3: $1$memwr$\regs$/openlane/designs/alphacore/src/alphasoc_regs.v:13$637_EN[31:0]$644
     2/3: $1$memwr$\regs$/openlane/designs/alphacore/src/alphasoc_regs.v:13$637_DATA[31:0]$643
     3/3: $1$memwr$\regs$/openlane/designs/alphacore/src/alphasoc_regs.v:13$637_ADDR[4:0]$642

14. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\alphacore.\cpuregs_rs1' from process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:1123$453'.
No latch inferred for signal `\alphacore.\cpuregs_rs2' from process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:1123$453'.
No latch inferred for signal `\alphacore.\decoded_rs' from process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:1123$453'.
No latch inferred for signal `\alphacore.\cpuregs_write' from process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:1078$439'.
No latch inferred for signal `\alphacore.\cpuregs_wrdata' from process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:1078$439'.
No latch inferred for signal `\alphacore.\clear_prefetched_high_word' from process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:1064$434'.
No latch inferred for signal `\alphacore.\alu_out' from process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:1022$415'.
No latch inferred for signal `\alphacore.\alu_out_0' from process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:1022$415'.
No latch inferred for signal `\alphacore.\dbg_ascii_state' from process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:959$403'.
No latch inferred for signal `\alphacore.\dbg_insn_opcode' from process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:601$144'.
No latch inferred for signal `\alphacore.\dbg_ascii_instr' from process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:601$144'.
No latch inferred for signal `\alphacore.\dbg_insn_imm' from process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:601$144'.
No latch inferred for signal `\alphacore.\dbg_insn_rs1' from process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:601$144'.
No latch inferred for signal `\alphacore.\dbg_insn_rs2' from process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:601$144'.
No latch inferred for signal `\alphacore.\dbg_insn_rd' from process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:601$144'.
No latch inferred for signal `\alphacore.\new_ascii_instr' from process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:445$139'.
No latch inferred for signal `\alphacore.\alu_add_sub' from process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:1012$626'.
No latch inferred for signal `\alphacore.\alu_shl' from process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:1012$626'.
No latch inferred for signal `\alphacore.\alu_shr' from process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:1012$626'.
No latch inferred for signal `\alphacore.\alu_eq' from process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:1012$626'.
No latch inferred for signal `\alphacore.\alu_ltu' from process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:1012$626'.
No latch inferred for signal `\alphacore.\alu_lts' from process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:1012$626'.
No latch inferred for signal `\alphacore.\mem_la_wdata' from process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:146$75'.
No latch inferred for signal `\alphacore.\mem_la_wstrb' from process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:146$75'.
No latch inferred for signal `\alphacore.\mem_rdata_word' from process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:146$75'.

15. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\alphacore.\trap' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:1137$467'.
  created $dff cell `$procdff$3262' with positive edge clock.
Creating register for signal `\alphacore.\cpi_valid' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:1137$467'.
  created $dff cell `$procdff$3263' with positive edge clock.
Creating register for signal `\alphacore.\eoi' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:1137$467'.
  created $dff cell `$procdff$3264' with positive edge clock.
Creating register for signal `\alphacore.\trace_valid' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:1137$467'.
  created $dff cell `$procdff$3265' with positive edge clock.
Creating register for signal `\alphacore.\trace_data' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:1137$467'.
  created $dff cell `$procdff$3266' with positive edge clock.
Creating register for signal `\alphacore.\count_cycle' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:1137$467'.
  created $dff cell `$procdff$3267' with positive edge clock.
Creating register for signal `\alphacore.\count_instr' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:1137$467'.
  created $dff cell `$procdff$3268' with positive edge clock.
Creating register for signal `\alphacore.\reg_pc' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:1137$467'.
  created $dff cell `$procdff$3269' with positive edge clock.
Creating register for signal `\alphacore.\reg_next_pc' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:1137$467'.
  created $dff cell `$procdff$3270' with positive edge clock.
Creating register for signal `\alphacore.\reg_op1' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:1137$467'.
  created $dff cell `$procdff$3271' with positive edge clock.
Creating register for signal `\alphacore.\reg_op2' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:1137$467'.
  created $dff cell `$procdff$3272' with positive edge clock.
Creating register for signal `\alphacore.\reg_out' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:1137$467'.
  created $dff cell `$procdff$3273' with positive edge clock.
Creating register for signal `\alphacore.\reg_sh' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:1137$467'.
  created $dff cell `$procdff$3274' with positive edge clock.
Creating register for signal `\alphacore.\irq_delay' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:1137$467'.
  created $dff cell `$procdff$3275' with positive edge clock.
Creating register for signal `\alphacore.\irq_active' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:1137$467'.
  created $dff cell `$procdff$3276' with positive edge clock.
Creating register for signal `\alphacore.\irq_mask' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:1137$467'.
  created $dff cell `$procdff$3277' with positive edge clock.
Creating register for signal `\alphacore.\irq_pending' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:1137$467'.
  created $dff cell `$procdff$3278' with positive edge clock.
Creating register for signal `\alphacore.\timer' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:1137$467'.
  created $dff cell `$procdff$3279' with positive edge clock.
Creating register for signal `\alphacore.\mem_wordsize' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:1137$467'.
  created $dff cell `$procdff$3280' with positive edge clock.
Creating register for signal `\alphacore.\mem_do_prefetch' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:1137$467'.
  created $dff cell `$procdff$3281' with positive edge clock.
Creating register for signal `\alphacore.\mem_do_rinst' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:1137$467'.
  created $dff cell `$procdff$3282' with positive edge clock.
Creating register for signal `\alphacore.\mem_do_rdata' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:1137$467'.
  created $dff cell `$procdff$3283' with positive edge clock.
Creating register for signal `\alphacore.\mem_do_wdata' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:1137$467'.
  created $dff cell `$procdff$3284' with positive edge clock.
Creating register for signal `\alphacore.\decoder_trigger' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:1137$467'.
  created $dff cell `$procdff$3285' with positive edge clock.
Creating register for signal `\alphacore.\decoder_trigger_q' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:1137$467'.
  created $dff cell `$procdff$3286' with positive edge clock.
Creating register for signal `\alphacore.\decoder_pseudo_trigger' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:1137$467'.
  created $dff cell `$procdff$3287' with positive edge clock.
Creating register for signal `\alphacore.\decoder_pseudo_trigger_q' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:1137$467'.
  created $dff cell `$procdff$3288' with positive edge clock.
Creating register for signal `\alphacore.\dbg_rs1val' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:1137$467'.
  created $dff cell `$procdff$3289' with positive edge clock.
Creating register for signal `\alphacore.\dbg_rs2val' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:1137$467'.
  created $dff cell `$procdff$3290' with positive edge clock.
Creating register for signal `\alphacore.\dbg_rs1val_valid' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:1137$467'.
  created $dff cell `$procdff$3291' with positive edge clock.
Creating register for signal `\alphacore.\dbg_rs2val_valid' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:1137$467'.
  created $dff cell `$procdff$3292' with positive edge clock.
Creating register for signal `\alphacore.\cpu_state' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:1137$467'.
  created $dff cell `$procdff$3293' with positive edge clock.
Creating register for signal `\alphacore.\irq_state' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:1137$467'.
  created $dff cell `$procdff$3294' with positive edge clock.
Creating register for signal `\alphacore.\set_mem_do_rinst' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:1137$467'.
  created $dff cell `$procdff$3295' with positive edge clock.
Creating register for signal `\alphacore.\set_mem_do_rdata' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:1137$467'.
  created $dff cell `$procdff$3296' with positive edge clock.
Creating register for signal `\alphacore.\set_mem_do_wdata' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:1137$467'.
  created $dff cell `$procdff$3297' with positive edge clock.
Creating register for signal `\alphacore.\latched_store' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:1137$467'.
  created $dff cell `$procdff$3298' with positive edge clock.
Creating register for signal `\alphacore.\latched_stalu' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:1137$467'.
  created $dff cell `$procdff$3299' with positive edge clock.
Creating register for signal `\alphacore.\latched_branch' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:1137$467'.
  created $dff cell `$procdff$3300' with positive edge clock.
Creating register for signal `\alphacore.\latched_compr' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:1137$467'.
  created $dff cell `$procdff$3301' with positive edge clock.
Creating register for signal `\alphacore.\latched_trace' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:1137$467'.
  created $dff cell `$procdff$3302' with positive edge clock.
Creating register for signal `\alphacore.\latched_is_lu' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:1137$467'.
  created $dff cell `$procdff$3303' with positive edge clock.
Creating register for signal `\alphacore.\latched_is_lh' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:1137$467'.
  created $dff cell `$procdff$3304' with positive edge clock.
Creating register for signal `\alphacore.\latched_is_lb' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:1137$467'.
  created $dff cell `$procdff$3305' with positive edge clock.
Creating register for signal `\alphacore.\latched_rd' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:1137$467'.
  created $dff cell `$procdff$3306' with positive edge clock.
Creating register for signal `\alphacore.\current_pc' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:1137$467'.
  created $dff cell `$procdff$3307' with positive edge clock.
Creating register for signal `\alphacore.\cpi_timeout' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:1137$467'.
  created $dff cell `$procdff$3308' with positive edge clock.
Creating register for signal `\alphacore.\next_irq_pending' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:1137$467'.
  created $dff cell `$procdff$3309' with positive edge clock.
Creating register for signal `\alphacore.\do_waitirq' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:1137$467'.
  created $dff cell `$procdff$3310' with positive edge clock.
Creating register for signal `\alphacore.\alu_out_q' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:1137$467'.
  created $dff cell `$procdff$3311' with positive edge clock.
Creating register for signal `\alphacore.\alu_out_0_q' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:1137$467'.
  created $dff cell `$procdff$3312' with positive edge clock.
Creating register for signal `\alphacore.\alu_wait' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:1137$467'.
  created $dff cell `$procdff$3313' with positive edge clock.
Creating register for signal `\alphacore.\alu_wait_2' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:1137$467'.
  created $dff cell `$procdff$3314' with positive edge clock.
Creating register for signal `\alphacore.\clear_prefetched_high_word_q' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:1062$433'.
  created $dff cell `$procdff$3315' with positive edge clock.
Creating register for signal `\alphacore.\cpi_insn' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:631$146'.
  created $dff cell `$procdff$3316' with positive edge clock.
Creating register for signal `\alphacore.\instr_lui' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:631$146'.
  created $dff cell `$procdff$3317' with positive edge clock.
Creating register for signal `\alphacore.\instr_auipc' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:631$146'.
  created $dff cell `$procdff$3318' with positive edge clock.
Creating register for signal `\alphacore.\instr_jal' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:631$146'.
  created $dff cell `$procdff$3319' with positive edge clock.
Creating register for signal `\alphacore.\instr_jalr' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:631$146'.
  created $dff cell `$procdff$3320' with positive edge clock.
Creating register for signal `\alphacore.\instr_beq' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:631$146'.
  created $dff cell `$procdff$3321' with positive edge clock.
Creating register for signal `\alphacore.\instr_bne' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:631$146'.
  created $dff cell `$procdff$3322' with positive edge clock.
Creating register for signal `\alphacore.\instr_blt' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:631$146'.
  created $dff cell `$procdff$3323' with positive edge clock.
Creating register for signal `\alphacore.\instr_bge' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:631$146'.
  created $dff cell `$procdff$3324' with positive edge clock.
Creating register for signal `\alphacore.\instr_bltu' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:631$146'.
  created $dff cell `$procdff$3325' with positive edge clock.
Creating register for signal `\alphacore.\instr_bgeu' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:631$146'.
  created $dff cell `$procdff$3326' with positive edge clock.
Creating register for signal `\alphacore.\instr_lb' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:631$146'.
  created $dff cell `$procdff$3327' with positive edge clock.
Creating register for signal `\alphacore.\instr_lh' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:631$146'.
  created $dff cell `$procdff$3328' with positive edge clock.
Creating register for signal `\alphacore.\instr_lw' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:631$146'.
  created $dff cell `$procdff$3329' with positive edge clock.
Creating register for signal `\alphacore.\instr_lbu' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:631$146'.
  created $dff cell `$procdff$3330' with positive edge clock.
Creating register for signal `\alphacore.\instr_lhu' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:631$146'.
  created $dff cell `$procdff$3331' with positive edge clock.
Creating register for signal `\alphacore.\instr_sb' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:631$146'.
  created $dff cell `$procdff$3332' with positive edge clock.
Creating register for signal `\alphacore.\instr_sh' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:631$146'.
  created $dff cell `$procdff$3333' with positive edge clock.
Creating register for signal `\alphacore.\instr_sw' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:631$146'.
  created $dff cell `$procdff$3334' with positive edge clock.
Creating register for signal `\alphacore.\instr_addi' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:631$146'.
  created $dff cell `$procdff$3335' with positive edge clock.
Creating register for signal `\alphacore.\instr_slti' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:631$146'.
  created $dff cell `$procdff$3336' with positive edge clock.
Creating register for signal `\alphacore.\instr_sltiu' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:631$146'.
  created $dff cell `$procdff$3337' with positive edge clock.
Creating register for signal `\alphacore.\instr_xori' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:631$146'.
  created $dff cell `$procdff$3338' with positive edge clock.
Creating register for signal `\alphacore.\instr_ori' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:631$146'.
  created $dff cell `$procdff$3339' with positive edge clock.
Creating register for signal `\alphacore.\instr_andi' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:631$146'.
  created $dff cell `$procdff$3340' with positive edge clock.
Creating register for signal `\alphacore.\instr_slli' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:631$146'.
  created $dff cell `$procdff$3341' with positive edge clock.
Creating register for signal `\alphacore.\instr_srli' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:631$146'.
  created $dff cell `$procdff$3342' with positive edge clock.
Creating register for signal `\alphacore.\instr_srai' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:631$146'.
  created $dff cell `$procdff$3343' with positive edge clock.
Creating register for signal `\alphacore.\instr_add' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:631$146'.
  created $dff cell `$procdff$3344' with positive edge clock.
Creating register for signal `\alphacore.\instr_sub' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:631$146'.
  created $dff cell `$procdff$3345' with positive edge clock.
Creating register for signal `\alphacore.\instr_sll' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:631$146'.
  created $dff cell `$procdff$3346' with positive edge clock.
Creating register for signal `\alphacore.\instr_slt' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:631$146'.
  created $dff cell `$procdff$3347' with positive edge clock.
Creating register for signal `\alphacore.\instr_sltu' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:631$146'.
  created $dff cell `$procdff$3348' with positive edge clock.
Creating register for signal `\alphacore.\instr_xor' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:631$146'.
  created $dff cell `$procdff$3349' with positive edge clock.
Creating register for signal `\alphacore.\instr_srl' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:631$146'.
  created $dff cell `$procdff$3350' with positive edge clock.
Creating register for signal `\alphacore.\instr_sra' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:631$146'.
  created $dff cell `$procdff$3351' with positive edge clock.
Creating register for signal `\alphacore.\instr_or' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:631$146'.
  created $dff cell `$procdff$3352' with positive edge clock.
Creating register for signal `\alphacore.\instr_and' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:631$146'.
  created $dff cell `$procdff$3353' with positive edge clock.
Creating register for signal `\alphacore.\instr_rdcycle' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:631$146'.
  created $dff cell `$procdff$3354' with positive edge clock.
Creating register for signal `\alphacore.\instr_rdcycleh' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:631$146'.
  created $dff cell `$procdff$3355' with positive edge clock.
Creating register for signal `\alphacore.\instr_rdinstr' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:631$146'.
  created $dff cell `$procdff$3356' with positive edge clock.
Creating register for signal `\alphacore.\instr_rdinstrh' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:631$146'.
  created $dff cell `$procdff$3357' with positive edge clock.
Creating register for signal `\alphacore.\instr_ecall_ebreak' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:631$146'.
  created $dff cell `$procdff$3358' with positive edge clock.
Creating register for signal `\alphacore.\instr_fence' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:631$146'.
  created $dff cell `$procdff$3359' with positive edge clock.
Creating register for signal `\alphacore.\instr_getq' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:631$146'.
  created $dff cell `$procdff$3360' with positive edge clock.
Creating register for signal `\alphacore.\instr_setq' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:631$146'.
  created $dff cell `$procdff$3361' with positive edge clock.
Creating register for signal `\alphacore.\instr_retirq' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:631$146'.
  created $dff cell `$procdff$3362' with positive edge clock.
Creating register for signal `\alphacore.\instr_maskirq' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:631$146'.
  created $dff cell `$procdff$3363' with positive edge clock.
Creating register for signal `\alphacore.\instr_waitirq' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:631$146'.
  created $dff cell `$procdff$3364' with positive edge clock.
Creating register for signal `\alphacore.\instr_timer' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:631$146'.
  created $dff cell `$procdff$3365' with positive edge clock.
Creating register for signal `\alphacore.\decoded_rd' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:631$146'.
  created $dff cell `$procdff$3366' with positive edge clock.
Creating register for signal `\alphacore.\decoded_rs1' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:631$146'.
  created $dff cell `$procdff$3367' with positive edge clock.
Creating register for signal `\alphacore.\decoded_rs2' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:631$146'.
  created $dff cell `$procdff$3368' with positive edge clock.
Creating register for signal `\alphacore.\decoded_imm' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:631$146'.
  created $dff cell `$procdff$3369' with positive edge clock.
Creating register for signal `\alphacore.\decoded_imm_j' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:631$146'.
  created $dff cell `$procdff$3370' with positive edge clock.
Creating register for signal `\alphacore.\compressed_instr' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:631$146'.
  created $dff cell `$procdff$3371' with positive edge clock.
Creating register for signal `\alphacore.\is_lui_auipc_jal' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:631$146'.
  created $dff cell `$procdff$3372' with positive edge clock.
Creating register for signal `\alphacore.\is_lb_lh_lw_lbu_lhu' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:631$146'.
  created $dff cell `$procdff$3373' with positive edge clock.
Creating register for signal `\alphacore.\is_slli_srli_srai' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:631$146'.
  created $dff cell `$procdff$3374' with positive edge clock.
Creating register for signal `\alphacore.\is_jalr_addi_slti_sltiu_xori_ori_andi' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:631$146'.
  created $dff cell `$procdff$3375' with positive edge clock.
Creating register for signal `\alphacore.\is_sb_sh_sw' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:631$146'.
  created $dff cell `$procdff$3376' with positive edge clock.
Creating register for signal `\alphacore.\is_sll_srl_sra' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:631$146'.
  created $dff cell `$procdff$3377' with positive edge clock.
Creating register for signal `\alphacore.\is_lui_auipc_jal_jalr_addi_add_sub' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:631$146'.
  created $dff cell `$procdff$3378' with positive edge clock.
Creating register for signal `\alphacore.\is_slti_blt_slt' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:631$146'.
  created $dff cell `$procdff$3379' with positive edge clock.
Creating register for signal `\alphacore.\is_sltiu_bltu_sltu' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:631$146'.
  created $dff cell `$procdff$3380' with positive edge clock.
Creating register for signal `\alphacore.\is_beq_bne_blt_bge_bltu_bgeu' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:631$146'.
  created $dff cell `$procdff$3381' with positive edge clock.
Creating register for signal `\alphacore.\is_lbu_lhu_lw' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:631$146'.
  created $dff cell `$procdff$3382' with positive edge clock.
Creating register for signal `\alphacore.\is_alu_reg_imm' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:631$146'.
  created $dff cell `$procdff$3383' with positive edge clock.
Creating register for signal `\alphacore.\is_alu_reg_reg' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:631$146'.
  created $dff cell `$procdff$3384' with positive edge clock.
Creating register for signal `\alphacore.\is_compare' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:631$146'.
  created $dff cell `$procdff$3385' with positive edge clock.
Creating register for signal `\alphacore.\dbg_insn_addr' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:570$140'.
  created $dff cell `$procdff$3386' with positive edge clock.
Creating register for signal `\alphacore.\q_ascii_instr' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:570$140'.
  created $dff cell `$procdff$3387' with positive edge clock.
Creating register for signal `\alphacore.\q_insn_imm' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:570$140'.
  created $dff cell `$procdff$3388' with positive edge clock.
Creating register for signal `\alphacore.\q_insn_opcode' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:570$140'.
  created $dff cell `$procdff$3389' with positive edge clock.
Creating register for signal `\alphacore.\q_insn_rs1' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:570$140'.
  created $dff cell `$procdff$3390' with positive edge clock.
Creating register for signal `\alphacore.\q_insn_rs2' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:570$140'.
  created $dff cell `$procdff$3391' with positive edge clock.
Creating register for signal `\alphacore.\q_insn_rd' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:570$140'.
  created $dff cell `$procdff$3392' with positive edge clock.
Creating register for signal `\alphacore.\dbg_next' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:570$140'.
  created $dff cell `$procdff$3393' with positive edge clock.
Creating register for signal `\alphacore.\dbg_valid_insn' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:570$140'.
  created $dff cell `$procdff$3394' with positive edge clock.
Creating register for signal `\alphacore.\cached_ascii_instr' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:570$140'.
  created $dff cell `$procdff$3395' with positive edge clock.
Creating register for signal `\alphacore.\cached_insn_imm' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:570$140'.
  created $dff cell `$procdff$3396' with positive edge clock.
Creating register for signal `\alphacore.\cached_insn_opcode' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:570$140'.
  created $dff cell `$procdff$3397' with positive edge clock.
Creating register for signal `\alphacore.\cached_insn_rs1' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:570$140'.
  created $dff cell `$procdff$3398' with positive edge clock.
Creating register for signal `\alphacore.\cached_insn_rs2' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:570$140'.
  created $dff cell `$procdff$3399' with positive edge clock.
Creating register for signal `\alphacore.\cached_insn_rd' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:570$140'.
  created $dff cell `$procdff$3400' with positive edge clock.
Creating register for signal `\alphacore.\mem_valid' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:310$115'.
  created $dff cell `$procdff$3401' with positive edge clock.
Creating register for signal `\alphacore.\mem_instr' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:310$115'.
  created $dff cell `$procdff$3402' with positive edge clock.
Creating register for signal `\alphacore.\mem_addr' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:310$115'.
  created $dff cell `$procdff$3403' with positive edge clock.
Creating register for signal `\alphacore.\mem_wdata' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:310$115'.
  created $dff cell `$procdff$3404' with positive edge clock.
Creating register for signal `\alphacore.\mem_wstrb' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:310$115'.
  created $dff cell `$procdff$3405' with positive edge clock.
Creating register for signal `\alphacore.\mem_state' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:310$115'.
  created $dff cell `$procdff$3406' with positive edge clock.
Creating register for signal `\alphacore.\mem_la_secondword' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:310$115'.
  created $dff cell `$procdff$3407' with positive edge clock.
Creating register for signal `\alphacore.\prefetched_high_word' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:310$115'.
  created $dff cell `$procdff$3408' with positive edge clock.
Creating register for signal `\alphacore.\mem_16bit_buffer' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:310$115'.
  created $dff cell `$procdff$3409' with positive edge clock.
Creating register for signal `\alphacore.\next_insn_opcode' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:175$78'.
  created $dff cell `$procdff$3410' with positive edge clock.
Creating register for signal `\alphacore.\mem_rdata_q' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:175$78'.
  created $dff cell `$procdff$3411' with positive edge clock.
Creating register for signal `\alphacore.\mem_la_firstword_reg' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:135$70'.
  created $dff cell `$procdff$3412' with positive edge clock.
Creating register for signal `\alphacore.\last_mem_valid' using process `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:135$70'.
  created $dff cell `$procdff$3413' with positive edge clock.
Creating register for signal `\alphasoc_regs.$memwr$\regs$/openlane/designs/alphacore/src/alphasoc_regs.v:13$637_ADDR' using process `\alphasoc_regs.$proc$/openlane/designs/alphacore/src/alphasoc_regs.v:12$638'.
  created $dff cell `$procdff$3414' with positive edge clock.
Creating register for signal `\alphasoc_regs.$memwr$\regs$/openlane/designs/alphacore/src/alphasoc_regs.v:13$637_DATA' using process `\alphasoc_regs.$proc$/openlane/designs/alphacore/src/alphasoc_regs.v:12$638'.
  created $dff cell `$procdff$3415' with positive edge clock.
Creating register for signal `\alphasoc_regs.$memwr$\regs$/openlane/designs/alphacore/src/alphasoc_regs.v:13$637_EN' using process `\alphasoc_regs.$proc$/openlane/designs/alphacore/src/alphasoc_regs.v:12$638'.
  created $dff cell `$procdff$3416' with positive edge clock.

16. Executing PROC_MEMWR pass (convert process memory writes to cells).

17. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 54 empty switches in `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:1137$467'.
Removing empty process `alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:1137$467'.
Removing empty process `alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:1123$453'.
Found and cleaned up 2 empty switches in `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:1078$439'.
Removing empty process `alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:1078$439'.
Found and cleaned up 2 empty switches in `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:1064$434'.
Removing empty process `alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:1064$434'.
Removing empty process `alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:1062$433'.
Found and cleaned up 2 empty switches in `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:1022$415'.
Removing empty process `alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:1022$415'.
Found and cleaned up 8 empty switches in `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:959$403'.
Removing empty process `alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:959$403'.
Found and cleaned up 22 empty switches in `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:631$146'.
Removing empty process `alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:631$146'.
Found and cleaned up 3 empty switches in `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:601$144'.
Removing empty process `alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:601$144'.
Found and cleaned up 5 empty switches in `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:570$140'.
Removing empty process `alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:570$140'.
Found and cleaned up 48 empty switches in `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:445$139'.
Removing empty process `alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:445$139'.
Found and cleaned up 16 empty switches in `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:310$115'.
Removing empty process `alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:310$115'.
Removing empty process `alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:1012$626'.
Found and cleaned up 19 empty switches in `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:175$78'.
Removing empty process `alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:175$78'.
Found and cleaned up 3 empty switches in `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:146$75'.
Removing empty process `alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:146$75'.
Found and cleaned up 2 empty switches in `\alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:135$70'.
Removing empty process `alphacore.$proc$/openlane/designs/alphacore/src/alphacore.v:135$70'.
Found and cleaned up 1 empty switch in `\alphasoc_regs.$proc$/openlane/designs/alphacore/src/alphasoc_regs.v:12$638'.
Removing empty process `alphasoc_regs.$proc$/openlane/designs/alphacore/src/alphasoc_regs.v:12$638'.
Cleaned up 187 empty switches.

18. Executing CHECK pass (checking for obvious problems).
Checking module alphacore...
Checking module alphasoc_regs...
Found and reported 0 problems.

19. Executing OPT_EXPR pass (perform const folding).
Optimizing module alphacore.
<suppressed ~424 debug messages>
Optimizing module alphasoc_regs.

20. Executing FLATTEN pass (flatten design).
Deleting now unused module alphasoc_regs.
<suppressed ~1 debug messages>

21. Executing OPT_EXPR pass (perform const folding).
Optimizing module alphacore.

22. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alphacore..
Removed 228 unused cells and 1392 unused wires.
<suppressed ~272 debug messages>

23. Executing OPT pass (performing simple optimizations).

23.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alphacore.

23.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alphacore'.
<suppressed ~1365 debug messages>
Removed a total of 455 cells.

23.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alphacore..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$1000.
    dead port 2/2 on $mux $procmux$1013.
    dead port 2/2 on $mux $procmux$2059.
    dead port 2/2 on $mux $procmux$2068.
    dead port 2/2 on $mux $procmux$3221.
    dead port 2/2 on $mux $procmux$3228.
    dead port 2/2 on $mux $procmux$651.
    dead port 2/2 on $mux $procmux$661.
    dead port 2/2 on $mux $procmux$663.
    dead port 2/2 on $mux $procmux$669.
    dead port 2/2 on $mux $procmux$676.
    dead port 2/2 on $mux $procmux$678.
    dead port 2/2 on $mux $procmux$684.
    dead port 2/2 on $mux $procmux$693.
    dead port 2/2 on $mux $procmux$713.
    dead port 2/2 on $mux $procmux$719.
    dead port 2/2 on $mux $procmux$722.
    dead port 2/2 on $mux $procmux$735.
    dead port 2/2 on $mux $procmux$742.
    dead port 2/2 on $mux $procmux$745.
    dead port 2/2 on $mux $procmux$758.
    dead port 2/2 on $mux $procmux$770.
    dead port 2/2 on $mux $procmux$773.
    dead port 2/2 on $mux $procmux$782.
    dead port 2/2 on $mux $procmux$785.
    dead port 2/2 on $mux $procmux$793.
    dead port 2/2 on $mux $procmux$795.
    dead port 2/2 on $mux $procmux$798.
    dead port 2/2 on $mux $procmux$811.
    dead port 2/2 on $mux $procmux$813.
    dead port 2/2 on $mux $procmux$816.
    dead port 2/2 on $mux $procmux$828.
    dead port 2/2 on $mux $procmux$831.
    dead port 2/2 on $mux $procmux$838.
    dead port 2/2 on $mux $procmux$840.
    dead port 2/2 on $mux $procmux$843.
    dead port 2/2 on $mux $procmux$862.
    dead port 2/2 on $mux $procmux$865.
    dead port 2/2 on $mux $procmux$879.
    dead port 2/2 on $mux $procmux$881.
    dead port 2/2 on $mux $procmux$883.
    dead port 2/2 on $mux $procmux$886.
    dead port 2/2 on $mux $procmux$896.
    dead port 2/2 on $mux $procmux$901.
    dead port 2/2 on $mux $procmux$904.
    dead port 2/2 on $mux $procmux$924.
    dead port 2/2 on $mux $procmux$926.
    dead port 2/2 on $mux $procmux$929.
    dead port 2/2 on $mux $procmux$941.
    dead port 2/2 on $mux $procmux$944.
    dead port 2/2 on $mux $procmux$987.
Removed 51 multiplexer ports.
<suppressed ~182 debug messages>

23.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alphacore.
    New ctrl vector for $pmux cell $procmux$1003: { $procmux$1007_CMP $auto$opt_reduce.cc:134:opt_pmux$3419 }
    New ctrl vector for $pmux cell $procmux$1265: { $logic_and$/openlane/designs/alphacore/src/alphacore.v:1390$539_Y $auto$opt_reduce.cc:134:opt_pmux$3421 }
    Consolidated identical input bits for $mux cell $flatten\cpuregs.$procmux$3254:
      Old ports: A=0, B=32'11111111111111111111111111111111, Y=$flatten\cpuregs.$0$memwr$\regs$/openlane/designs/alphacore/src/alphasoc_regs.v:13$637_EN[31:0]$641
      New ports: A=1'0, B=1'1, Y=$flatten\cpuregs.$0$memwr$\regs$/openlane/designs/alphacore/src/alphasoc_regs.v:13$637_EN[31:0]$641 [0]
      New connections: $flatten\cpuregs.$0$memwr$\regs$/openlane/designs/alphacore/src/alphasoc_regs.v:13$637_EN[31:0]$641 [31:1] = { $flatten\cpuregs.$0$memwr$\regs$/openlane/designs/alphacore/src/alphasoc_regs.v:13$637_EN[31:0]$641 [0] $flatten\cpuregs.$0$memwr$\regs$/openlane/designs/alphacore/src/alphasoc_regs.v:13$637_EN[31:0]$641 [0] $flatten\cpuregs.$0$memwr$\regs$/openlane/designs/alphacore/src/alphasoc_regs.v:13$637_EN[31:0]$641 [0] $flatten\cpuregs.$0$memwr$\regs$/openlane/designs/alphacore/src/alphasoc_regs.v:13$637_EN[31:0]$641 [0] $flatten\cpuregs.$0$memwr$\regs$/openlane/designs/alphacore/src/alphasoc_regs.v:13$637_EN[31:0]$641 [0] $flatten\cpuregs.$0$memwr$\regs$/openlane/designs/alphacore/src/alphasoc_regs.v:13$637_EN[31:0]$641 [0] $flatten\cpuregs.$0$memwr$\regs$/openlane/designs/alphacore/src/alphasoc_regs.v:13$637_EN[31:0]$641 [0] $flatten\cpuregs.$0$memwr$\regs$/openlane/designs/alphacore/src/alphasoc_regs.v:13$637_EN[31:0]$641 [0] $flatten\cpuregs.$0$memwr$\regs$/openlane/designs/alphacore/src/alphasoc_regs.v:13$637_EN[31:0]$641 [0] $flatten\cpuregs.$0$memwr$\regs$/openlane/designs/alphacore/src/alphasoc_regs.v:13$637_EN[31:0]$641 [0] $flatten\cpuregs.$0$memwr$\regs$/openlane/designs/alphacore/src/alphasoc_regs.v:13$637_EN[31:0]$641 [0] $flatten\cpuregs.$0$memwr$\regs$/openlane/designs/alphacore/src/alphasoc_regs.v:13$637_EN[31:0]$641 [0] $flatten\cpuregs.$0$memwr$\regs$/openlane/designs/alphacore/src/alphasoc_regs.v:13$637_EN[31:0]$641 [0] $flatten\cpuregs.$0$memwr$\regs$/openlane/designs/alphacore/src/alphasoc_regs.v:13$637_EN[31:0]$641 [0] $flatten\cpuregs.$0$memwr$\regs$/openlane/designs/alphacore/src/alphasoc_regs.v:13$637_EN[31:0]$641 [0] $flatten\cpuregs.$0$memwr$\regs$/openlane/designs/alphacore/src/alphasoc_regs.v:13$637_EN[31:0]$641 [0] $flatten\cpuregs.$0$memwr$\regs$/openlane/designs/alphacore/src/alphasoc_regs.v:13$637_EN[31:0]$641 [0] $flatten\cpuregs.$0$memwr$\regs$/openlane/designs/alphacore/src/alphasoc_regs.v:13$637_EN[31:0]$641 [0] $flatten\cpuregs.$0$memwr$\regs$/openlane/designs/alphacore/src/alphasoc_regs.v:13$637_EN[31:0]$641 [0] $flatten\cpuregs.$0$memwr$\regs$/openlane/designs/alphacore/src/alphasoc_regs.v:13$637_EN[31:0]$641 [0] $flatten\cpuregs.$0$memwr$\regs$/openlane/designs/alphacore/src/alphasoc_regs.v:13$637_EN[31:0]$641 [0] $flatten\cpuregs.$0$memwr$\regs$/openlane/designs/alphacore/src/alphasoc_regs.v:13$637_EN[31:0]$641 [0] $flatten\cpuregs.$0$memwr$\regs$/openlane/designs/alphacore/src/alphasoc_regs.v:13$637_EN[31:0]$641 [0] $flatten\cpuregs.$0$memwr$\regs$/openlane/designs/alphacore/src/alphasoc_regs.v:13$637_EN[31:0]$641 [0] $flatten\cpuregs.$0$memwr$\regs$/openlane/designs/alphacore/src/alphasoc_regs.v:13$637_EN[31:0]$641 [0] $flatten\cpuregs.$0$memwr$\regs$/openlane/designs/alphacore/src/alphasoc_regs.v:13$637_EN[31:0]$641 [0] $flatten\cpuregs.$0$memwr$\regs$/openlane/designs/alphacore/src/alphasoc_regs.v:13$637_EN[31:0]$641 [0] $flatten\cpuregs.$0$memwr$\regs$/openlane/designs/alphacore/src/alphasoc_regs.v:13$637_EN[31:0]$641 [0] $flatten\cpuregs.$0$memwr$\regs$/openlane/designs/alphacore/src/alphasoc_regs.v:13$637_EN[31:0]$641 [0] $flatten\cpuregs.$0$memwr$\regs$/openlane/designs/alphacore/src/alphasoc_regs.v:13$637_EN[31:0]$641 [0] $flatten\cpuregs.$0$memwr$\regs$/openlane/designs/alphacore/src/alphasoc_regs.v:13$637_EN[31:0]$641 [0] }
    New ctrl vector for $pmux cell $procmux$1435: { $eq$/openlane/designs/alphacore/src/alphacore.v:1082$440_Y $procmux$1009_CMP $procmux$1007_CMP $auto$opt_reduce.cc:134:opt_pmux$3423 }
    New ctrl vector for $pmux cell $procmux$1449: $auto$opt_reduce.cc:134:opt_pmux$3425
    New ctrl vector for $pmux cell $procmux$1527: { \instr_trap $auto$opt_reduce.cc:134:opt_pmux$3429 $logic_and$/openlane/designs/alphacore/src/alphacore.v:1382$538_Y $logic_and$/openlane/designs/alphacore/src/alphacore.v:1390$539_Y $auto$opt_reduce.cc:134:opt_pmux$3427 }
    New ctrl vector for $pmux cell $procmux$1687: { $eq$/openlane/designs/alphacore/src/alphacore.v:1082$440_Y $procmux$1009_CMP $procmux$1008_CMP $procmux$1006_CMP }
    New ctrl vector for $pmux cell $procmux$1697: { \is_sb_sh_sw $auto$opt_reduce.cc:134:opt_pmux$3431 }
    New ctrl vector for $pmux cell $procmux$1710: { $logic_and$/openlane/designs/alphacore/src/alphacore.v:1382$538_Y $auto$opt_reduce.cc:134:opt_pmux$3435 $auto$opt_reduce.cc:134:opt_pmux$3433 }
    New ctrl vector for $pmux cell $procmux$1891: { \is_lui_auipc_jal $auto$opt_reduce.cc:134:opt_pmux$3437 $procmux$1266_CTRL }
    New ctrl vector for $pmux cell $procmux$1942: { \is_lui_auipc_jal $auto$opt_reduce.cc:134:opt_pmux$3439 }
    New ctrl vector for $pmux cell $procmux$2054: $auto$opt_reduce.cc:134:opt_pmux$3441
    New ctrl vector for $pmux cell $procmux$2144: { $procmux$2141_CMP $procmux$2159_CMP $procmux$2137_CMP $auto$opt_reduce.cc:134:opt_pmux$3443 }
    New ctrl vector for $pmux cell $procmux$2162: $auto$opt_reduce.cc:134:opt_pmux$3445
    New ctrl vector for $pmux cell $procmux$2230: { $procmux$2141_CMP $procmux$2159_CMP $procmux$2137_CMP $auto$opt_reduce.cc:134:opt_pmux$3447 }
    New ctrl vector for $pmux cell $procmux$2248: { $procmux$2141_CMP $auto$opt_reduce.cc:134:opt_pmux$3449 }
    New ctrl vector for $pmux cell $procmux$2296: { $auto$opt_reduce.cc:134:opt_pmux$3451 $procmux$2159_CMP $procmux$2137_CMP }
    New ctrl vector for $pmux cell $procmux$2317: $auto$opt_reduce.cc:134:opt_pmux$3453
    New ctrl vector for $pmux cell $procmux$2438: { $procmux$2446_CMP $auto$opt_reduce.cc:134:opt_pmux$3455 $procmux$2159_CMP $procmux$2137_CMP }
    New ctrl vector for $pmux cell $procmux$2450: $auto$opt_reduce.cc:134:opt_pmux$3457
    New ctrl vector for $pmux cell $procmux$2610: $auto$opt_reduce.cc:134:opt_pmux$3459
    New ctrl vector for $pmux cell $procmux$3000: { $procmux$2137_CMP $auto$opt_reduce.cc:134:opt_pmux$3461 }
    New ctrl vector for $pmux cell $procmux$3015: { $procmux$2137_CMP $auto$opt_reduce.cc:134:opt_pmux$3463 }
    New ctrl vector for $pmux cell $procmux$3033: $auto$opt_reduce.cc:134:opt_pmux$3465
    New ctrl vector for $pmux cell $procmux$3046: $auto$opt_reduce.cc:134:opt_pmux$3467
    New ctrl vector for $pmux cell $procmux$3071: { $auto$opt_reduce.cc:134:opt_pmux$3469 $procmux$2159_CMP $procmux$2137_CMP }
    New ctrl vector for $pmux cell $procmux$3106: { $procmux$2141_CMP $procmux$2137_CMP $auto$opt_reduce.cc:134:opt_pmux$3471 }
    New ctrl vector for $pmux cell $procmux$3121: { $procmux$2159_CMP $procmux$2137_CMP $auto$opt_reduce.cc:134:opt_pmux$3473 $procmux$2145_CMP }
    New ctrl vector for $pmux cell $procmux$3148: { $procmux$2141_CMP $auto$opt_reduce.cc:134:opt_pmux$3475 }
    New ctrl vector for $pmux cell $procmux$3161: $auto$opt_reduce.cc:134:opt_pmux$3477
    New ctrl vector for $pmux cell $procmux$3187: { $auto$opt_reduce.cc:134:opt_pmux$3481 $procmux$2159_CMP $procmux$2137_CMP $auto$opt_reduce.cc:134:opt_pmux$3479 }
    New ctrl vector for $pmux cell $procmux$3206: { $procmux$2141_CMP $auto$opt_reduce.cc:134:opt_pmux$3483 }
    New ctrl vector for $pmux cell $procmux$703: { $eq$/openlane/designs/alphacore/src/alphacore.v:1082$440_Y $auto$opt_reduce.cc:134:opt_pmux$3485 }
    New ctrl vector for $pmux cell $procmux$725: { $eq$/openlane/designs/alphacore/src/alphacore.v:1082$440_Y $procmux$1009_CMP $procmux$1008_CMP $auto$opt_reduce.cc:134:opt_pmux$3487 }
    New ctrl vector for $pmux cell $procmux$748: { $eq$/openlane/designs/alphacore/src/alphacore.v:1082$440_Y $auto$opt_reduce.cc:134:opt_pmux$3489 }
    New ctrl vector for $pmux cell $procmux$977: { $procmux$1005_CMP $auto$opt_reduce.cc:134:opt_pmux$3491 }
    New ctrl vector for $pmux cell $procmux$990: { $auto$opt_reduce.cc:134:opt_pmux$3493 $procmux$1004_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$3420: { $logic_and$/openlane/designs/alphacore/src/alphacore.v:1398$540_Y $logic_and$/openlane/designs/alphacore/src/alphacore.v:1382$538_Y \is_jalr_addi_slti_sltiu_xori_ori_andi \is_lui_auipc_jal \instr_trap \instr_timer \instr_maskirq \instr_retirq \instr_rdinstrh \instr_rdinstr \instr_rdcycleh \instr_rdcycle }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$3424: { \instr_timer \instr_maskirq \instr_retirq \instr_rdinstrh \instr_rdinstr \instr_rdcycleh \instr_rdcycle }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$3426: { $logic_and$/openlane/designs/alphacore/src/alphacore.v:1398$540_Y \is_jalr_addi_slti_sltiu_xori_ori_andi \is_lui_auipc_jal }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$3428: { \instr_timer \instr_maskirq \instr_retirq \instr_rdinstrh \instr_rdinstr \instr_rdcycleh \instr_rdcycle }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$3432: { $logic_and$/openlane/designs/alphacore/src/alphacore.v:1398$540_Y \is_jalr_addi_slti_sltiu_xori_ori_andi \is_lui_auipc_jal }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$3434: { $logic_and$/openlane/designs/alphacore/src/alphacore.v:1390$539_Y \instr_trap \instr_timer \instr_maskirq \instr_retirq \instr_rdinstrh \instr_rdinstr \instr_rdcycleh \instr_rdcycle }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$3436: { $logic_and$/openlane/designs/alphacore/src/alphacore.v:1390$539_Y $logic_and$/openlane/designs/alphacore/src/alphacore.v:1382$538_Y \instr_trap \instr_timer \instr_maskirq \instr_retirq \instr_rdinstrh \instr_rdinstr \instr_rdcycleh \instr_rdcycle }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$3438: { \instr_trap \instr_timer \instr_maskirq \instr_retirq \instr_rdinstrh \instr_rdinstr \instr_rdcycleh \instr_rdcycle }
  Optimizing cells in module \alphacore.
Performed a total of 45 changes.

23.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alphacore'.
<suppressed ~114 debug messages>
Removed a total of 38 cells.

23.6. Executing OPT_DFF pass (perform DFF optimizations).

23.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alphacore..
Removed 0 unused cells and 544 unused wires.
<suppressed ~1 debug messages>

23.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module alphacore.

23.9. Rerunning OPT passes. (Maybe there is more to do..)

23.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alphacore..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~186 debug messages>

23.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alphacore.
    New ctrl vector for $pmux cell $procmux$1090: $auto$opt_reduce.cc:134:opt_pmux$3495
    New ctrl vector for $pmux cell $procmux$1107: { $procmux$1007_CMP $auto$opt_reduce.cc:134:opt_pmux$3497 }
    New ctrl vector for $pmux cell $procmux$1489: { $eq$/openlane/designs/alphacore/src/alphacore.v:1082$440_Y $procmux$1009_CMP $procmux$1008_CMP $procmux$1007_CMP $procmux$1006_CMP $auto$opt_reduce.cc:134:opt_pmux$3499 }
    New ctrl vector for $pmux cell $procmux$2332: $auto$opt_reduce.cc:134:opt_pmux$3501
    New ctrl vector for $pmux cell $procmux$3044: { $procmux$2161_CMP $auto$opt_reduce.cc:134:opt_pmux$3503 }
  Optimizing cells in module \alphacore.
Performed a total of 5 changes.

23.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alphacore'.
<suppressed ~9 debug messages>
Removed a total of 3 cells.

23.13. Executing OPT_DFF pass (perform DFF optimizations).

23.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alphacore..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

23.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module alphacore.

23.16. Rerunning OPT passes. (Maybe there is more to do..)

23.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alphacore..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~186 debug messages>

23.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alphacore.
Performed a total of 0 changes.

23.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alphacore'.
Removed a total of 0 cells.

23.20. Executing OPT_DFF pass (perform DFF optimizations).

23.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alphacore..

23.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module alphacore.

23.23. Finished OPT passes. (There is nothing left to do.)

24. Executing FSM pass (extract and optimize FSM).

24.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking alphacore.cpi_insn as FSM state register:
    Register is connected to module port.
    Users of register don't seem to benefit from recoding.
Found FSM state register alphacore.cpu_state.
Not marking alphacore.irq_state as FSM state register:
    Users of register don't seem to benefit from recoding.
Not marking alphacore.mem_state as FSM state register:
    Users of register don't seem to benefit from recoding.
Found FSM state register alphacore.mem_wordsize.

24.2. Executing FSM_EXTRACT pass (extracting FSM from design).
Extracting FSM `\cpu_state' from module `\alphacore'.
  found $dff cell for state register: $procdff$3293
  root of input selection tree: $0\cpu_state[7:0]
  found ctrl input: $logic_and$/openlane/designs/alphacore/src/alphacore.v:1615$618_Y
  found ctrl input: $logic_and$/openlane/designs/alphacore/src/alphacore.v:1599$602_Y
  found ctrl input: \resetn
  found state code: 8'01000000
  found ctrl input: $auto$opt_reduce.cc:134:opt_pmux$3495
  found ctrl input: $procmux$1006_CMP
  found ctrl input: $procmux$1007_CMP
  found ctrl input: $procmux$1008_CMP
  found ctrl input: $procmux$1009_CMP
  found ctrl input: $eq$/openlane/designs/alphacore/src/alphacore.v:1082$440_Y
  found ctrl input: $logic_or$/openlane/designs/alphacore/src/alphacore.v:1534$584_Y
  found ctrl input: $logic_and$/openlane/designs/alphacore/src/alphacore.v:1549$588_Y
  found ctrl input: $eq$/openlane/designs/alphacore/src/alphacore.v:1508$566_Y
  found ctrl input: \is_beq_bne_blt_bge_bltu_bgeu
  found ctrl input: \mem_done
  found ctrl input: $logic_and$/openlane/designs/alphacore/src/alphacore.v:1426$544_Y
  found ctrl input: \is_sb_sh_sw
  found ctrl input: $logic_and$/openlane/designs/alphacore/src/alphacore.v:1451$549_Y
  found state code: 8'00001000
  found state code: 8'00000100
  found state code: 8'00000010
  found ctrl input: $logic_and$/openlane/designs/alphacore/src/alphacore.v:1454$551_Y
  found ctrl input: $logic_and$/openlane/designs/alphacore/src/alphacore.v:1323$531_Y
  found state code: 8'10000000
  found ctrl input: $auto$opt_reduce.cc:134:opt_pmux$3427
  found ctrl input: $logic_and$/openlane/designs/alphacore/src/alphacore.v:1390$539_Y
  found ctrl input: $logic_and$/openlane/designs/alphacore/src/alphacore.v:1382$538_Y
  found ctrl input: $auto$opt_reduce.cc:134:opt_pmux$3425
  found ctrl input: \instr_trap
  found state code: 8'00000001
  found ctrl input: $logic_and$/openlane/designs/alphacore/src/alphacore.v:1273$508_Y
  found ctrl input: $logic_and$/openlane/designs/alphacore/src/alphacore.v:1283$516_Y
  found ctrl input: \decoder_trigger
  found ctrl input: \instr_jal
  found state code: 8'00100000
  found ctrl input: $logic_and$/openlane/designs/alphacore/src/alphacore.v:1607$612_Y
  found ctrl input: $logic_and$/openlane/designs/alphacore/src/alphacore.v:1600$605_Y
  found ctrl input: $logic_and$/openlane/designs/alphacore/src/alphacore.v:1602$609_Y
  found ctrl output: $eq$/openlane/designs/alphacore/src/alphacore.v:1082$440_Y
  found ctrl output: $procmux$1004_CMP
  found ctrl output: $procmux$1005_CMP
  found ctrl output: $procmux$1006_CMP
  found ctrl output: $procmux$1007_CMP
  found ctrl output: $procmux$1008_CMP
  found ctrl output: $procmux$1009_CMP
  found ctrl output: $procmux$1011_CMP
  ctrl inputs: { $auto$opt_reduce.cc:134:opt_pmux$3425 $auto$opt_reduce.cc:134:opt_pmux$3427 $logic_and$/openlane/designs/alphacore/src/alphacore.v:1615$618_Y $logic_and$/openlane/designs/alphacore/src/alphacore.v:1607$612_Y $logic_and$/openlane/designs/alphacore/src/alphacore.v:1602$609_Y $logic_and$/openlane/designs/alphacore/src/alphacore.v:1600$605_Y $logic_and$/openlane/designs/alphacore/src/alphacore.v:1599$602_Y $logic_and$/openlane/designs/alphacore/src/alphacore.v:1549$588_Y $logic_or$/openlane/designs/alphacore/src/alphacore.v:1534$584_Y $eq$/openlane/designs/alphacore/src/alphacore.v:1508$566_Y $logic_and$/openlane/designs/alphacore/src/alphacore.v:1454$551_Y $logic_and$/openlane/designs/alphacore/src/alphacore.v:1451$549_Y $logic_and$/openlane/designs/alphacore/src/alphacore.v:1426$544_Y $logic_and$/openlane/designs/alphacore/src/alphacore.v:1390$539_Y $logic_and$/openlane/designs/alphacore/src/alphacore.v:1382$538_Y $logic_and$/openlane/designs/alphacore/src/alphacore.v:1323$531_Y $logic_and$/openlane/designs/alphacore/src/alphacore.v:1283$516_Y $logic_and$/openlane/designs/alphacore/src/alphacore.v:1273$508_Y $auto$opt_reduce.cc:134:opt_pmux$3495 \is_beq_bne_blt_bge_bltu_bgeu \is_sb_sh_sw \decoder_trigger \instr_trap \instr_jal \mem_done \resetn }
  ctrl outputs: { $procmux$1011_CMP $procmux$1009_CMP $procmux$1008_CMP $procmux$1007_CMP $procmux$1006_CMP $procmux$1005_CMP $procmux$1004_CMP $0\cpu_state[7:0] $eq$/openlane/designs/alphacore/src/alphacore.v:1082$440_Y }
  transition: 8'10000000 26'--0---0------------------0 -> 8'01000000 16'1000000010000000
  transition: 8'10000000 26'--0---0------------------1 -> 8'10000000 16'1000000100000000
  transition: 8'10000000 26'--00-01------------------0 -> 8'01000000 16'1000000010000000
  transition: 8'10000000 26'--00-01------------------1 -> 8'10000000 16'1000000100000000
  transition: 8'10000000 26'--00011------------------- -> 8'10000000 16'1000000100000000
  transition: 8'10000000 26'--00111------------------0 -> 8'01000000 16'1000000010000000
  transition: 8'10000000 26'--00111------------------1 -> 8'10000000 16'1000000100000000
  transition: 8'10000000 26'--010-1------------------- -> 8'10000000 16'1000000100000000
  transition: 8'10000000 26'--01101------------------0 -> 8'01000000 16'1000000010000000
  transition: 8'10000000 26'--01101------------------1 -> 8'10000000 16'1000000100000000
  transition: 8'10000000 26'--01111------------------0 -> 8'01000000 16'1000000010000000
  transition: 8'10000000 26'--01111------------------1 -> 8'10000000 16'1000000100000000
  transition: 8'10000000 26'--1-0--------------------- -> 8'10000000 16'1000000100000000
  transition: 8'10000000 26'--1-1-0------------------0 -> 8'01000000 16'1000000010000000
  transition: 8'10000000 26'--1-1-0------------------1 -> 8'10000000 16'1000000100000000
  transition: 8'10000000 26'--10101------------------0 -> 8'01000000 16'1000000010000000
  transition: 8'10000000 26'--10101------------------1 -> 8'10000000 16'1000000100000000
  transition: 8'10000000 26'--10111------------------0 -> 8'01000000 16'1000000010000000
  transition: 8'10000000 26'--10111------------------1 -> 8'10000000 16'1000000100000000
  transition: 8'10000000 26'--11101------------------0 -> 8'01000000 16'1000000010000000
  transition: 8'10000000 26'--11101------------------1 -> 8'10000000 16'1000000100000000
  transition: 8'10000000 26'--11111------------------0 -> 8'01000000 16'1000000010000000
  transition: 8'10000000 26'--11111------------------1 -> 8'10000000 16'1000000100000000
  transition: 8'01000000 26'--0---0------------------0 -> 8'01000000 16'0000000010000001
  transition: 8'01000000 26'--0---0---------00---0---1 -> 8'01000000 16'0000000010000001
  transition: 8'01000000 26'--0---0---------00---1-0-1 -> 8'00100000 16'0000000001000001
  transition: 8'01000000 26'--0---0---------00---1-1-1 -> 8'01000000 16'0000000010000001
  transition: 8'01000000 26'--0---0---------10-------1 -> 8'01000000 16'0000000010000001
  transition: 8'01000000 26'--0---0----------1-------1 -> 8'01000000 16'0000000010000001
  transition: 8'01000000 26'--00-01------------------0 -> 8'01000000 16'0000000010000001
  transition: 8'01000000 26'--00-01---------00---0---1 -> 8'01000000 16'0000000010000001
  transition: 8'01000000 26'--00-01---------00---1-0-1 -> 8'00100000 16'0000000001000001
  transition: 8'01000000 26'--00-01---------00---1-1-1 -> 8'01000000 16'0000000010000001
  transition: 8'01000000 26'--00-01---------10-------1 -> 8'01000000 16'0000000010000001
  transition: 8'01000000 26'--00-01----------1-------1 -> 8'01000000 16'0000000010000001
  transition: 8'01000000 26'--00011------------------- -> 8'10000000 16'0000000100000001
  transition: 8'01000000 26'--00111------------------0 -> 8'01000000 16'0000000010000001
  transition: 8'01000000 26'--00111---------00---0---1 -> 8'01000000 16'0000000010000001
  transition: 8'01000000 26'--00111---------00---1-0-1 -> 8'00100000 16'0000000001000001
  transition: 8'01000000 26'--00111---------00---1-1-1 -> 8'01000000 16'0000000010000001
  transition: 8'01000000 26'--00111---------10-------1 -> 8'01000000 16'0000000010000001
  transition: 8'01000000 26'--00111----------1-------1 -> 8'01000000 16'0000000010000001
  transition: 8'01000000 26'--010-1------------------- -> 8'10000000 16'0000000100000001
  transition: 8'01000000 26'--01101------------------0 -> 8'01000000 16'0000000010000001
  transition: 8'01000000 26'--01101---------00---0---1 -> 8'01000000 16'0000000010000001
  transition: 8'01000000 26'--01101---------00---1-0-1 -> 8'00100000 16'0000000001000001
  transition: 8'01000000 26'--01101---------00---1-1-1 -> 8'01000000 16'0000000010000001
  transition: 8'01000000 26'--01101---------10-------1 -> 8'01000000 16'0000000010000001
  transition: 8'01000000 26'--01101----------1-------1 -> 8'01000000 16'0000000010000001
  transition: 8'01000000 26'--01111------------------0 -> 8'01000000 16'0000000010000001
  transition: 8'01000000 26'--01111---------00---0---1 -> 8'01000000 16'0000000010000001
  transition: 8'01000000 26'--01111---------00---1-0-1 -> 8'00100000 16'0000000001000001
  transition: 8'01000000 26'--01111---------00---1-1-1 -> 8'01000000 16'0000000010000001
  transition: 8'01000000 26'--01111---------10-------1 -> 8'01000000 16'0000000010000001
  transition: 8'01000000 26'--01111----------1-------1 -> 8'01000000 16'0000000010000001
  transition: 8'01000000 26'--1-0--------------------- -> 8'10000000 16'0000000100000001
  transition: 8'01000000 26'--1-1-0------------------0 -> 8'01000000 16'0000000010000001
  transition: 8'01000000 26'--1-1-0---------00---0---1 -> 8'01000000 16'0000000010000001
  transition: 8'01000000 26'--1-1-0---------00---1-0-1 -> 8'00100000 16'0000000001000001
  transition: 8'01000000 26'--1-1-0---------00---1-1-1 -> 8'01000000 16'0000000010000001
  transition: 8'01000000 26'--1-1-0---------10-------1 -> 8'01000000 16'0000000010000001
  transition: 8'01000000 26'--1-1-0----------1-------1 -> 8'01000000 16'0000000010000001
  transition: 8'01000000 26'--10101------------------0 -> 8'01000000 16'0000000010000001
  transition: 8'01000000 26'--10101---------00---0---1 -> 8'01000000 16'0000000010000001
  transition: 8'01000000 26'--10101---------00---1-0-1 -> 8'00100000 16'0000000001000001
  transition: 8'01000000 26'--10101---------00---1-1-1 -> 8'01000000 16'0000000010000001
  transition: 8'01000000 26'--10101---------10-------1 -> 8'01000000 16'0000000010000001
  transition: 8'01000000 26'--10101----------1-------1 -> 8'01000000 16'0000000010000001
  transition: 8'01000000 26'--10111------------------0 -> 8'01000000 16'0000000010000001
  transition: 8'01000000 26'--10111---------00---0---1 -> 8'01000000 16'0000000010000001
  transition: 8'01000000 26'--10111---------00---1-0-1 -> 8'00100000 16'0000000001000001
  transition: 8'01000000 26'--10111---------00---1-1-1 -> 8'01000000 16'0000000010000001
  transition: 8'01000000 26'--10111---------10-------1 -> 8'01000000 16'0000000010000001
  transition: 8'01000000 26'--10111----------1-------1 -> 8'01000000 16'0000000010000001
  transition: 8'01000000 26'--11101------------------0 -> 8'01000000 16'0000000010000001
  transition: 8'01000000 26'--11101---------00---0---1 -> 8'01000000 16'0000000010000001
  transition: 8'01000000 26'--11101---------00---1-0-1 -> 8'00100000 16'0000000001000001
  transition: 8'01000000 26'--11101---------00---1-1-1 -> 8'01000000 16'0000000010000001
  transition: 8'01000000 26'--11101---------10-------1 -> 8'01000000 16'0000000010000001
  transition: 8'01000000 26'--11101----------1-------1 -> 8'01000000 16'0000000010000001
  transition: 8'01000000 26'--11111------------------0 -> 8'01000000 16'0000000010000001
  transition: 8'01000000 26'--11111---------00---0---1 -> 8'01000000 16'0000000010000001
  transition: 8'01000000 26'--11111---------00---1-0-1 -> 8'00100000 16'0000000001000001
  transition: 8'01000000 26'--11111---------00---1-1-1 -> 8'01000000 16'0000000010000001
  transition: 8'01000000 26'--11111---------10-------1 -> 8'01000000 16'0000000010000001
  transition: 8'01000000 26'--11111----------1-------1 -> 8'01000000 16'0000000010000001
  transition: 8'00100000 26'--0---0------------------0 -> 8'01000000 16'0100000010000000
  transition: 8'00100000 26'000---0-----000-----0-0--1 -> 8'00001000 16'0100000000010000
  transition: 8'00100000 26'000---0------00-----1-0--1 -> 8'00000010 16'0100000000000100
  transition: 8'00100000 26'000---0-----100-------0--1 -> 8'00000100 16'0100000000001000
  transition: 8'00100000 26'--0---0--------0------1--1 -> 8'10000000 16'0100000100000000
  transition: 8'00100000 26'--0---0--------1------1--1 -> 8'01000000 16'0100000010000000
  transition: 8'00100000 26'1-0---0------------------1 -> 8'01000000 16'0100000010000000
  transition: 8'00100000 26'--0---0-------1----------1 -> 8'00000001 16'0100000000000010
  transition: 8'00100000 26'--0---0------1-----------1 -> 8'00000100 16'0100000000001000
  transition: 8'00100000 26'-10---0------------------1 -> 8'00001000 16'0100000000010000
  transition: 8'00100000 26'--00-01------------------0 -> 8'01000000 16'0100000010000000
  transition: 8'00100000 26'0000-01-----000-----0-0--1 -> 8'00001000 16'0100000000010000
  transition: 8'00100000 26'0000-01------00-----1-0--1 -> 8'00000010 16'0100000000000100
  transition: 8'00100000 26'0000-01-----100-------0--1 -> 8'00000100 16'0100000000001000
  transition: 8'00100000 26'--00-01--------0------1--1 -> 8'10000000 16'0100000100000000
  transition: 8'00100000 26'--00-01--------1------1--1 -> 8'01000000 16'0100000010000000
  transition: 8'00100000 26'1-00-01------------------1 -> 8'01000000 16'0100000010000000
  transition: 8'00100000 26'--00-01-------1----------1 -> 8'00000001 16'0100000000000010
  transition: 8'00100000 26'--00-01------1-----------1 -> 8'00000100 16'0100000000001000
  transition: 8'00100000 26'-100-01------------------1 -> 8'00001000 16'0100000000010000
  transition: 8'00100000 26'--00011------------------- -> 8'10000000 16'0100000100000000
  transition: 8'00100000 26'--00111------------------0 -> 8'01000000 16'0100000010000000
  transition: 8'00100000 26'0000111-----000-----0-0--1 -> 8'00001000 16'0100000000010000
  transition: 8'00100000 26'0000111------00-----1-0--1 -> 8'00000010 16'0100000000000100
  transition: 8'00100000 26'0000111-----100-------0--1 -> 8'00000100 16'0100000000001000
  transition: 8'00100000 26'--00111--------0------1--1 -> 8'10000000 16'0100000100000000
  transition: 8'00100000 26'--00111--------1------1--1 -> 8'01000000 16'0100000010000000
  transition: 8'00100000 26'1-00111------------------1 -> 8'01000000 16'0100000010000000
  transition: 8'00100000 26'--00111-------1----------1 -> 8'00000001 16'0100000000000010
  transition: 8'00100000 26'--00111------1-----------1 -> 8'00000100 16'0100000000001000
  transition: 8'00100000 26'-100111------------------1 -> 8'00001000 16'0100000000010000
  transition: 8'00100000 26'--010-1------------------- -> 8'10000000 16'0100000100000000
  transition: 8'00100000 26'--01101------------------0 -> 8'01000000 16'0100000010000000
  transition: 8'00100000 26'0001101-----000-----0-0--1 -> 8'00001000 16'0100000000010000
  transition: 8'00100000 26'0001101------00-----1-0--1 -> 8'00000010 16'0100000000000100
  transition: 8'00100000 26'0001101-----100-------0--1 -> 8'00000100 16'0100000000001000
  transition: 8'00100000 26'--01101--------0------1--1 -> 8'10000000 16'0100000100000000
  transition: 8'00100000 26'--01101--------1------1--1 -> 8'01000000 16'0100000010000000
  transition: 8'00100000 26'1-01101------------------1 -> 8'01000000 16'0100000010000000
  transition: 8'00100000 26'--01101-------1----------1 -> 8'00000001 16'0100000000000010
  transition: 8'00100000 26'--01101------1-----------1 -> 8'00000100 16'0100000000001000
  transition: 8'00100000 26'-101101------------------1 -> 8'00001000 16'0100000000010000
  transition: 8'00100000 26'--01111------------------0 -> 8'01000000 16'0100000010000000
  transition: 8'00100000 26'0001111-----000-----0-0--1 -> 8'00001000 16'0100000000010000
  transition: 8'00100000 26'0001111------00-----1-0--1 -> 8'00000010 16'0100000000000100
  transition: 8'00100000 26'0001111-----100-------0--1 -> 8'00000100 16'0100000000001000
  transition: 8'00100000 26'--01111--------0------1--1 -> 8'10000000 16'0100000100000000
  transition: 8'00100000 26'--01111--------1------1--1 -> 8'01000000 16'0100000010000000
  transition: 8'00100000 26'1-01111------------------1 -> 8'01000000 16'0100000010000000
  transition: 8'00100000 26'--01111-------1----------1 -> 8'00000001 16'0100000000000010
  transition: 8'00100000 26'--01111------1-----------1 -> 8'00000100 16'0100000000001000
  transition: 8'00100000 26'-101111------------------1 -> 8'00001000 16'0100000000010000
  transition: 8'00100000 26'--1-0--------------------- -> 8'10000000 16'0100000100000000
  transition: 8'00100000 26'--1-1-0------------------0 -> 8'01000000 16'0100000010000000
  transition: 8'00100000 26'001-1-0-----000-----0-0--1 -> 8'00001000 16'0100000000010000
  transition: 8'00100000 26'001-1-0------00-----1-0--1 -> 8'00000010 16'0100000000000100
  transition: 8'00100000 26'001-1-0-----100-------0--1 -> 8'00000100 16'0100000000001000
  transition: 8'00100000 26'--1-1-0--------0------1--1 -> 8'10000000 16'0100000100000000
  transition: 8'00100000 26'--1-1-0--------1------1--1 -> 8'01000000 16'0100000010000000
  transition: 8'00100000 26'1-1-1-0------------------1 -> 8'01000000 16'0100000010000000
  transition: 8'00100000 26'--1-1-0-------1----------1 -> 8'00000001 16'0100000000000010
  transition: 8'00100000 26'--1-1-0------1-----------1 -> 8'00000100 16'0100000000001000
  transition: 8'00100000 26'-11-1-0------------------1 -> 8'00001000 16'0100000000010000
  transition: 8'00100000 26'--10101------------------0 -> 8'01000000 16'0100000010000000
  transition: 8'00100000 26'0010101-----000-----0-0--1 -> 8'00001000 16'0100000000010000
  transition: 8'00100000 26'0010101------00-----1-0--1 -> 8'00000010 16'0100000000000100
  transition: 8'00100000 26'0010101-----100-------0--1 -> 8'00000100 16'0100000000001000
  transition: 8'00100000 26'--10101--------0------1--1 -> 8'10000000 16'0100000100000000
  transition: 8'00100000 26'--10101--------1------1--1 -> 8'01000000 16'0100000010000000
  transition: 8'00100000 26'1-10101------------------1 -> 8'01000000 16'0100000010000000
  transition: 8'00100000 26'--10101-------1----------1 -> 8'00000001 16'0100000000000010
  transition: 8'00100000 26'--10101------1-----------1 -> 8'00000100 16'0100000000001000
  transition: 8'00100000 26'-110101------------------1 -> 8'00001000 16'0100000000010000
  transition: 8'00100000 26'--10111------------------0 -> 8'01000000 16'0100000010000000
  transition: 8'00100000 26'0010111-----000-----0-0--1 -> 8'00001000 16'0100000000010000
  transition: 8'00100000 26'0010111------00-----1-0--1 -> 8'00000010 16'0100000000000100
  transition: 8'00100000 26'0010111-----100-------0--1 -> 8'00000100 16'0100000000001000
  transition: 8'00100000 26'--10111--------0------1--1 -> 8'10000000 16'0100000100000000
  transition: 8'00100000 26'--10111--------1------1--1 -> 8'01000000 16'0100000010000000
  transition: 8'00100000 26'1-10111------------------1 -> 8'01000000 16'0100000010000000
  transition: 8'00100000 26'--10111-------1----------1 -> 8'00000001 16'0100000000000010
  transition: 8'00100000 26'--10111------1-----------1 -> 8'00000100 16'0100000000001000
  transition: 8'00100000 26'-110111------------------1 -> 8'00001000 16'0100000000010000
  transition: 8'00100000 26'--11101------------------0 -> 8'01000000 16'0100000010000000
  transition: 8'00100000 26'0011101-----000-----0-0--1 -> 8'00001000 16'0100000000010000
  transition: 8'00100000 26'0011101------00-----1-0--1 -> 8'00000010 16'0100000000000100
  transition: 8'00100000 26'0011101-----100-------0--1 -> 8'00000100 16'0100000000001000
  transition: 8'00100000 26'--11101--------0------1--1 -> 8'10000000 16'0100000100000000
  transition: 8'00100000 26'--11101--------1------1--1 -> 8'01000000 16'0100000010000000
  transition: 8'00100000 26'1-11101------------------1 -> 8'01000000 16'0100000010000000
  transition: 8'00100000 26'--11101-------1----------1 -> 8'00000001 16'0100000000000010
  transition: 8'00100000 26'--11101------1-----------1 -> 8'00000100 16'0100000000001000
  transition: 8'00100000 26'-111101------------------1 -> 8'00001000 16'0100000000010000
  transition: 8'00100000 26'--11111------------------0 -> 8'01000000 16'0100000010000000
  transition: 8'00100000 26'0011111-----000-----0-0--1 -> 8'00001000 16'0100000000010000
  transition: 8'00100000 26'0011111------00-----1-0--1 -> 8'00000010 16'0100000000000100
  transition: 8'00100000 26'0011111-----100-------0--1 -> 8'00000100 16'0100000000001000
  transition: 8'00100000 26'--11111--------0------1--1 -> 8'10000000 16'0100000100000000
  transition: 8'00100000 26'--11111--------1------1--1 -> 8'01000000 16'0100000010000000
  transition: 8'00100000 26'1-11111------------------1 -> 8'01000000 16'0100000010000000
  transition: 8'00100000 26'--11111-------1----------1 -> 8'00000001 16'0100000000000010
  transition: 8'00100000 26'--11111------1-----------1 -> 8'00000100 16'0100000000001000
  transition: 8'00100000 26'-111111------------------1 -> 8'00001000 16'0100000000010000
  transition: 8'00001000 26'--0---0------------------0 -> 8'01000000 16'0001000010000000
  transition: 8'00001000 26'--0---0------------0-----1 -> 8'01000000 16'0001000010000000
  transition: 8'00001000 26'--0---0------------1----01 -> 8'00001000 16'0001000000010000
  transition: 8'00001000 26'--0---0------------1----11 -> 8'01000000 16'0001000010000000
  transition: 8'00001000 26'--00-01------------------0 -> 8'01000000 16'0001000010000000
  transition: 8'00001000 26'--00-01------------0-----1 -> 8'01000000 16'0001000010000000
  transition: 8'00001000 26'--00-01------------1----01 -> 8'00001000 16'0001000000010000
  transition: 8'00001000 26'--00-01------------1----11 -> 8'01000000 16'0001000010000000
  transition: 8'00001000 26'--00011------------------- -> 8'10000000 16'0001000100000000
  transition: 8'00001000 26'--00111------------------0 -> 8'01000000 16'0001000010000000
  transition: 8'00001000 26'--00111------------0-----1 -> 8'01000000 16'0001000010000000
  transition: 8'00001000 26'--00111------------1----01 -> 8'00001000 16'0001000000010000
  transition: 8'00001000 26'--00111------------1----11 -> 8'01000000 16'0001000010000000
  transition: 8'00001000 26'--010-1------------------- -> 8'10000000 16'0001000100000000
  transition: 8'00001000 26'--01101------------------0 -> 8'01000000 16'0001000010000000
  transition: 8'00001000 26'--01101------------0-----1 -> 8'01000000 16'0001000010000000
  transition: 8'00001000 26'--01101------------1----01 -> 8'00001000 16'0001000000010000
  transition: 8'00001000 26'--01101------------1----11 -> 8'01000000 16'0001000010000000
  transition: 8'00001000 26'--01111------------------0 -> 8'01000000 16'0001000010000000
  transition: 8'00001000 26'--01111------------0-----1 -> 8'01000000 16'0001000010000000
  transition: 8'00001000 26'--01111------------1----01 -> 8'00001000 16'0001000000010000
  transition: 8'00001000 26'--01111------------1----11 -> 8'01000000 16'0001000010000000
  transition: 8'00001000 26'--1-0--------------------- -> 8'10000000 16'0001000100000000
  transition: 8'00001000 26'--1-1-0------------------0 -> 8'01000000 16'0001000010000000
  transition: 8'00001000 26'--1-1-0------------0-----1 -> 8'01000000 16'0001000010000000
  transition: 8'00001000 26'--1-1-0------------1----01 -> 8'00001000 16'0001000000010000
  transition: 8'00001000 26'--1-1-0------------1----11 -> 8'01000000 16'0001000010000000
  transition: 8'00001000 26'--10101------------------0 -> 8'01000000 16'0001000010000000
  transition: 8'00001000 26'--10101------------0-----1 -> 8'01000000 16'0001000010000000
  transition: 8'00001000 26'--10101------------1----01 -> 8'00001000 16'0001000000010000
  transition: 8'00001000 26'--10101------------1----11 -> 8'01000000 16'0001000010000000
  transition: 8'00001000 26'--10111------------------0 -> 8'01000000 16'0001000010000000
  transition: 8'00001000 26'--10111------------0-----1 -> 8'01000000 16'0001000010000000
  transition: 8'00001000 26'--10111------------1----01 -> 8'00001000 16'0001000000010000
  transition: 8'00001000 26'--10111------------1----11 -> 8'01000000 16'0001000010000000
  transition: 8'00001000 26'--11101------------------0 -> 8'01000000 16'0001000010000000
  transition: 8'00001000 26'--11101------------0-----1 -> 8'01000000 16'0001000010000000
  transition: 8'00001000 26'--11101------------1----01 -> 8'00001000 16'0001000000010000
  transition: 8'00001000 26'--11101------------1----11 -> 8'01000000 16'0001000010000000
  transition: 8'00001000 26'--11111------------------0 -> 8'01000000 16'0001000010000000
  transition: 8'00001000 26'--11111------------0-----1 -> 8'01000000 16'0001000010000000
  transition: 8'00001000 26'--11111------------1----01 -> 8'00001000 16'0001000000010000
  transition: 8'00001000 26'--11111------------1----11 -> 8'01000000 16'0001000010000000
  transition: 8'00000100 26'--0---0------------------0 -> 8'01000000 16'0000100010000000
  transition: 8'00000100 26'--0---0--0---------------1 -> 8'00000100 16'0000100000001000
  transition: 8'00000100 26'--0---0--1---------------1 -> 8'01000000 16'0000100010000000
  transition: 8'00000100 26'--00-01------------------0 -> 8'01000000 16'0000100010000000
  transition: 8'00000100 26'--00-01--0---------------1 -> 8'00000100 16'0000100000001000
  transition: 8'00000100 26'--00-01--1---------------1 -> 8'01000000 16'0000100010000000
  transition: 8'00000100 26'--00011------------------- -> 8'10000000 16'0000100100000000
  transition: 8'00000100 26'--00111------------------0 -> 8'01000000 16'0000100010000000
  transition: 8'00000100 26'--00111--0---------------1 -> 8'00000100 16'0000100000001000
  transition: 8'00000100 26'--00111--1---------------1 -> 8'01000000 16'0000100010000000
  transition: 8'00000100 26'--010-1------------------- -> 8'10000000 16'0000100100000000
  transition: 8'00000100 26'--01101------------------0 -> 8'01000000 16'0000100010000000
  transition: 8'00000100 26'--01101--0---------------1 -> 8'00000100 16'0000100000001000
  transition: 8'00000100 26'--01101--1---------------1 -> 8'01000000 16'0000100010000000
  transition: 8'00000100 26'--01111------------------0 -> 8'01000000 16'0000100010000000
  transition: 8'00000100 26'--01111--0---------------1 -> 8'00000100 16'0000100000001000
  transition: 8'00000100 26'--01111--1---------------1 -> 8'01000000 16'0000100010000000
  transition: 8'00000100 26'--1-0--------------------- -> 8'10000000 16'0000100100000000
  transition: 8'00000100 26'--1-1-0------------------0 -> 8'01000000 16'0000100010000000
  transition: 8'00000100 26'--1-1-0--0---------------1 -> 8'00000100 16'0000100000001000
  transition: 8'00000100 26'--1-1-0--1---------------1 -> 8'01000000 16'0000100010000000
  transition: 8'00000100 26'--10101------------------0 -> 8'01000000 16'0000100010000000
  transition: 8'00000100 26'--10101--0---------------1 -> 8'00000100 16'0000100000001000
  transition: 8'00000100 26'--10101--1---------------1 -> 8'01000000 16'0000100010000000
  transition: 8'00000100 26'--10111------------------0 -> 8'01000000 16'0000100010000000
  transition: 8'00000100 26'--10111--0---------------1 -> 8'00000100 16'0000100000001000
  transition: 8'00000100 26'--10111--1---------------1 -> 8'01000000 16'0000100010000000
  transition: 8'00000100 26'--11101------------------0 -> 8'01000000 16'0000100010000000
  transition: 8'00000100 26'--11101--0---------------1 -> 8'00000100 16'0000100000001000
  transition: 8'00000100 26'--11101--1---------------1 -> 8'01000000 16'0000100010000000
  transition: 8'00000100 26'--11111------------------0 -> 8'01000000 16'0000100010000000
  transition: 8'00000100 26'--11111--0---------------1 -> 8'00000100 16'0000100000001000
  transition: 8'00000100 26'--11111--1---------------1 -> 8'01000000 16'0000100010000000
  transition: 8'00000010 26'--0---0------------------0 -> 8'01000000 16'0000010010000000
  transition: 8'00000010 26'--0---0-0----------------1 -> 8'00000010 16'0000010000000100
  transition: 8'00000010 26'--0---001----------------1 -> 8'00000010 16'0000010000000100
  transition: 8'00000010 26'--0---011----------------1 -> 8'01000000 16'0000010010000000
  transition: 8'00000010 26'--00-01------------------0 -> 8'01000000 16'0000010010000000
  transition: 8'00000010 26'--00-01-0----------------1 -> 8'00000010 16'0000010000000100
  transition: 8'00000010 26'--00-0101----------------1 -> 8'00000010 16'0000010000000100
  transition: 8'00000010 26'--00-0111----------------1 -> 8'01000000 16'0000010010000000
  transition: 8'00000010 26'--00011------------------- -> 8'10000000 16'0000010100000000
  transition: 8'00000010 26'--00111------------------0 -> 8'01000000 16'0000010010000000
  transition: 8'00000010 26'--00111-0----------------1 -> 8'00000010 16'0000010000000100
  transition: 8'00000010 26'--0011101----------------1 -> 8'00000010 16'0000010000000100
  transition: 8'00000010 26'--0011111----------------1 -> 8'01000000 16'0000010010000000
  transition: 8'00000010 26'--010-1------------------- -> 8'10000000 16'0000010100000000
  transition: 8'00000010 26'--01101------------------0 -> 8'01000000 16'0000010010000000
  transition: 8'00000010 26'--01101-0----------------1 -> 8'00000010 16'0000010000000100
  transition: 8'00000010 26'--0110101----------------1 -> 8'00000010 16'0000010000000100
  transition: 8'00000010 26'--0110111----------------1 -> 8'01000000 16'0000010010000000
  transition: 8'00000010 26'--01111------------------0 -> 8'01000000 16'0000010010000000
  transition: 8'00000010 26'--01111-0----------------1 -> 8'00000010 16'0000010000000100
  transition: 8'00000010 26'--0111101----------------1 -> 8'00000010 16'0000010000000100
  transition: 8'00000010 26'--0111111----------------1 -> 8'01000000 16'0000010010000000
  transition: 8'00000010 26'--1-0--------------------- -> 8'10000000 16'0000010100000000
  transition: 8'00000010 26'--1-1-0------------------0 -> 8'01000000 16'0000010010000000
  transition: 8'00000010 26'--1-1-0-0----------------1 -> 8'00000010 16'0000010000000100
  transition: 8'00000010 26'--1-1-001----------------1 -> 8'00000010 16'0000010000000100
  transition: 8'00000010 26'--1-1-011----------------1 -> 8'01000000 16'0000010010000000
  transition: 8'00000010 26'--10101------------------0 -> 8'01000000 16'0000010010000000
  transition: 8'00000010 26'--10101-0----------------1 -> 8'00000010 16'0000010000000100
  transition: 8'00000010 26'--1010101----------------1 -> 8'00000010 16'0000010000000100
  transition: 8'00000010 26'--1010111----------------1 -> 8'01000000 16'0000010010000000
  transition: 8'00000010 26'--10111------------------0 -> 8'01000000 16'0000010010000000
  transition: 8'00000010 26'--10111-0----------------1 -> 8'00000010 16'0000010000000100
  transition: 8'00000010 26'--1011101----------------1 -> 8'00000010 16'0000010000000100
  transition: 8'00000010 26'--1011111----------------1 -> 8'01000000 16'0000010010000000
  transition: 8'00000010 26'--11101------------------0 -> 8'01000000 16'0000010010000000
  transition: 8'00000010 26'--11101-0----------------1 -> 8'00000010 16'0000010000000100
  transition: 8'00000010 26'--1110101----------------1 -> 8'00000010 16'0000010000000100
  transition: 8'00000010 26'--1110111----------------1 -> 8'01000000 16'0000010010000000
  transition: 8'00000010 26'--11111------------------0 -> 8'01000000 16'0000010010000000
  transition: 8'00000010 26'--11111-0----------------1 -> 8'00000010 16'0000010000000100
  transition: 8'00000010 26'--1111101----------------1 -> 8'00000010 16'0000010000000100
  transition: 8'00000010 26'--1111111----------------1 -> 8'01000000 16'0000010010000000
  transition: 8'00000001 26'--0---0------------------0 -> 8'01000000 16'0000001010000000
  transition: 8'00000001 26'--0---0-0----------------1 -> 8'00000001 16'0000001000000010
  transition: 8'00000001 26'--0---001----------------1 -> 8'00000001 16'0000001000000010
  transition: 8'00000001 26'--0---011----------------1 -> 8'01000000 16'0000001010000000
  transition: 8'00000001 26'--00-01------------------0 -> 8'01000000 16'0000001010000000
  transition: 8'00000001 26'--00-01-0----------------1 -> 8'00000001 16'0000001000000010
  transition: 8'00000001 26'--00-0101----------------1 -> 8'00000001 16'0000001000000010
  transition: 8'00000001 26'--00-0111----------------1 -> 8'01000000 16'0000001010000000
  transition: 8'00000001 26'--00011------------------- -> 8'10000000 16'0000001100000000
  transition: 8'00000001 26'--00111------------------0 -> 8'01000000 16'0000001010000000
  transition: 8'00000001 26'--00111-0----------------1 -> 8'00000001 16'0000001000000010
  transition: 8'00000001 26'--0011101----------------1 -> 8'00000001 16'0000001000000010
  transition: 8'00000001 26'--0011111----------------1 -> 8'01000000 16'0000001010000000
  transition: 8'00000001 26'--010-1------------------- -> 8'10000000 16'0000001100000000
  transition: 8'00000001 26'--01101------------------0 -> 8'01000000 16'0000001010000000
  transition: 8'00000001 26'--01101-0----------------1 -> 8'00000001 16'0000001000000010
  transition: 8'00000001 26'--0110101----------------1 -> 8'00000001 16'0000001000000010
  transition: 8'00000001 26'--0110111----------------1 -> 8'01000000 16'0000001010000000
  transition: 8'00000001 26'--01111------------------0 -> 8'01000000 16'0000001010000000
  transition: 8'00000001 26'--01111-0----------------1 -> 8'00000001 16'0000001000000010
  transition: 8'00000001 26'--0111101----------------1 -> 8'00000001 16'0000001000000010
  transition: 8'00000001 26'--0111111----------------1 -> 8'01000000 16'0000001010000000
  transition: 8'00000001 26'--1-0--------------------- -> 8'10000000 16'0000001100000000
  transition: 8'00000001 26'--1-1-0------------------0 -> 8'01000000 16'0000001010000000
  transition: 8'00000001 26'--1-1-0-0----------------1 -> 8'00000001 16'0000001000000010
  transition: 8'00000001 26'--1-1-001----------------1 -> 8'00000001 16'0000001000000010
  transition: 8'00000001 26'--1-1-011----------------1 -> 8'01000000 16'0000001010000000
  transition: 8'00000001 26'--10101------------------0 -> 8'01000000 16'0000001010000000
  transition: 8'00000001 26'--10101-0----------------1 -> 8'00000001 16'0000001000000010
  transition: 8'00000001 26'--1010101----------------1 -> 8'00000001 16'0000001000000010
  transition: 8'00000001 26'--1010111----------------1 -> 8'01000000 16'0000001010000000
  transition: 8'00000001 26'--10111------------------0 -> 8'01000000 16'0000001010000000
  transition: 8'00000001 26'--10111-0----------------1 -> 8'00000001 16'0000001000000010
  transition: 8'00000001 26'--1011101----------------1 -> 8'00000001 16'0000001000000010
  transition: 8'00000001 26'--1011111----------------1 -> 8'01000000 16'0000001010000000
  transition: 8'00000001 26'--11101------------------0 -> 8'01000000 16'0000001010000000
  transition: 8'00000001 26'--11101-0----------------1 -> 8'00000001 16'0000001000000010
  transition: 8'00000001 26'--1110101----------------1 -> 8'00000001 16'0000001000000010
  transition: 8'00000001 26'--1110111----------------1 -> 8'01000000 16'0000001010000000
  transition: 8'00000001 26'--11111------------------0 -> 8'01000000 16'0000001010000000
  transition: 8'00000001 26'--11111-0----------------1 -> 8'00000001 16'0000001000000010
  transition: 8'00000001 26'--1111101----------------1 -> 8'00000001 16'0000001000000010
  transition: 8'00000001 26'--1111111----------------1 -> 8'01000000 16'0000001010000000
Extracting FSM `\mem_wordsize' from module `\alphacore'.
  found $dff cell for state register: $procdff$3280
  root of input selection tree: $0\mem_wordsize[1:0]
  found ctrl input: \resetn
  found ctrl input: $procmux$1004_CMP
  found ctrl input: $procmux$1005_CMP
  found ctrl input: $eq$/openlane/designs/alphacore/src/alphacore.v:1082$440_Y
  found ctrl input: $logic_or$/openlane/designs/alphacore/src/alphacore.v:1534$584_Y
  found ctrl input: \mem_do_rdata
  found ctrl input: \instr_lw
  found ctrl input: $logic_or$/openlane/designs/alphacore/src/alphacore.v:1564$593_Y
  found ctrl input: $logic_or$/openlane/designs/alphacore/src/alphacore.v:1563$592_Y
  found state code: 2'00
  found state code: 2'01
  found state code: 2'10
  found ctrl input: \mem_do_wdata
  found ctrl input: \instr_sw
  found ctrl input: \instr_sh
  found ctrl input: \instr_sb
  found ctrl output: $eq$/openlane/designs/alphacore/src/alphacore.v:1600$603_Y
  found ctrl output: $eq$/openlane/designs/alphacore/src/alphacore.v:1607$610_Y
  found ctrl output: $procmux$3222_CMP
  ctrl inputs: { $procmux$1005_CMP $procmux$1004_CMP $logic_or$/openlane/designs/alphacore/src/alphacore.v:1564$593_Y $logic_or$/openlane/designs/alphacore/src/alphacore.v:1563$592_Y $logic_or$/openlane/designs/alphacore/src/alphacore.v:1534$584_Y $eq$/openlane/designs/alphacore/src/alphacore.v:1082$440_Y \instr_sw \instr_sh \instr_sb \instr_lw \mem_do_wdata \mem_do_rdata \resetn }
  ctrl outputs: { $procmux$3222_CMP $eq$/openlane/designs/alphacore/src/alphacore.v:1607$610_Y $eq$/openlane/designs/alphacore/src/alphacore.v:1600$603_Y $0\mem_wordsize[1:0] }
  transition:       2'00 13'------------0 ->       2'00 5'00100
  transition:       2'00 13'00---0------1 ->       2'00 5'00100
  transition:       2'00 13'-----1------1 ->       2'00 5'00100
  transition:       2'00 13'1---0-------1 ->       2'00 5'00100
  transition:       2'00 13'1---1-000-0-1 ->       2'00 5'00100
  transition:       2'00 13'1---1---1-0-1 ->       2'10 5'00110
  transition:       2'00 13'1---1--1--0-1 ->       2'01 5'00101
  transition:       2'00 13'1---1-1---0-1 ->       2'00 5'00100
  transition:       2'00 13'1---1-----1-1 ->       2'00 5'00100
  transition:       2'00 13'-1--0-------1 ->       2'00 5'00100
  transition:       2'00 13'-1001----0-01 ->       2'00 5'00100
  transition:       2'00 13'-1-11------01 ->       2'10 5'00110
  transition:       2'00 13'-11-1------01 ->       2'01 5'00101
  transition:       2'00 13'-1--1----1-01 ->       2'00 5'00100
  transition:       2'00 13'-1--1------11 ->       2'00 5'00100
  transition:       2'10 13'------------0 ->       2'10 5'10010
  transition:       2'10 13'00---0------1 ->       2'10 5'10010
  transition:       2'10 13'-----1------1 ->       2'00 5'10000
  transition:       2'10 13'1---0-------1 ->       2'10 5'10010
  transition:       2'10 13'1---1-000-0-1 ->       2'10 5'10010
  transition:       2'10 13'1---1---1-0-1 ->       2'10 5'10010
  transition:       2'10 13'1---1--1--0-1 ->       2'01 5'10001
  transition:       2'10 13'1---1-1---0-1 ->       2'00 5'10000
  transition:       2'10 13'1---1-----1-1 ->       2'10 5'10010
  transition:       2'10 13'-1--0-------1 ->       2'10 5'10010
  transition:       2'10 13'-1001----0-01 ->       2'10 5'10010
  transition:       2'10 13'-1-11------01 ->       2'10 5'10010
  transition:       2'10 13'-11-1------01 ->       2'01 5'10001
  transition:       2'10 13'-1--1----1-01 ->       2'00 5'10000
  transition:       2'10 13'-1--1------11 ->       2'10 5'10010
  transition:       2'01 13'------------0 ->       2'01 5'01001
  transition:       2'01 13'00---0------1 ->       2'01 5'01001
  transition:       2'01 13'-----1------1 ->       2'00 5'01000
  transition:       2'01 13'1---0-------1 ->       2'01 5'01001
  transition:       2'01 13'1---1-000-0-1 ->       2'01 5'01001
  transition:       2'01 13'1---1---1-0-1 ->       2'10 5'01010
  transition:       2'01 13'1---1--1--0-1 ->       2'01 5'01001
  transition:       2'01 13'1---1-1---0-1 ->       2'00 5'01000
  transition:       2'01 13'1---1-----1-1 ->       2'01 5'01001
  transition:       2'01 13'-1--0-------1 ->       2'01 5'01001
  transition:       2'01 13'-1001----0-01 ->       2'01 5'01001
  transition:       2'01 13'-1-11------01 ->       2'10 5'01010
  transition:       2'01 13'-11-1------01 ->       2'01 5'01001
  transition:       2'01 13'-1--1----1-01 ->       2'00 5'01000
  transition:       2'01 13'-1--1------11 ->       2'01 5'01001

24.3. Executing FSM_OPT pass (simple optimizations of FSMs).
Optimizing FSM `$fsm$\mem_wordsize$3514' from module `\alphacore'.
Optimizing FSM `$fsm$\cpu_state$3504' from module `\alphacore'.
  Merging pattern 26'--10101------------------1 and 26'--10111------------------1 from group (0 0 16'1000000100000000).
  Merging pattern 26'--01101------------------1 and 26'--01111------------------1 from group (0 0 16'1000000100000000).
  Merging pattern 26'--11101------------------1 and 26'--11111------------------1 from group (0 0 16'1000000100000000).
  Merging pattern 26'--10111------------------1 and 26'--10101------------------1 from group (0 0 16'1000000100000000).
  Merging pattern 26'--01111------------------1 and 26'--01101------------------1 from group (0 0 16'1000000100000000).
  Merging pattern 26'--11111------------------1 and 26'--11101------------------1 from group (0 0 16'1000000100000000).
  Merging pattern 26'--101-1------------------1 and 26'--111-1------------------1 from group (0 0 16'1000000100000000).
  Merging pattern 26'--111-1------------------1 and 26'--101-1------------------1 from group (0 0 16'1000000100000000).
  Merging pattern 26'--1-1-0------------------1 and 26'--1-1-1------------------1 from group (0 0 16'1000000100000000).
  Merging pattern 26'--1-1-1------------------1 and 26'--1-1-0------------------1 from group (0 0 16'1000000100000000).
  Merging pattern 26'--10101------------------0 and 26'--10111------------------0 from group (0 1 16'1000000010000000).
  Merging pattern 26'--01101------------------0 and 26'--01111------------------0 from group (0 1 16'1000000010000000).
  Merging pattern 26'--11101------------------0 and 26'--11111------------------0 from group (0 1 16'1000000010000000).
  Merging pattern 26'--10111------------------0 and 26'--10101------------------0 from group (0 1 16'1000000010000000).
  Merging pattern 26'--01111------------------0 and 26'--01101------------------0 from group (0 1 16'1000000010000000).
  Merging pattern 26'--11111------------------0 and 26'--11101------------------0 from group (0 1 16'1000000010000000).
  Merging pattern 26'--101-1------------------0 and 26'--111-1------------------0 from group (0 1 16'1000000010000000).
  Merging pattern 26'--111-1------------------0 and 26'--101-1------------------0 from group (0 1 16'1000000010000000).
  Merging pattern 26'--1-1-0------------------0 and 26'--1-1-1------------------0 from group (0 1 16'1000000010000000).
  Merging pattern 26'--1-1-1------------------0 and 26'--1-1-0------------------0 from group (0 1 16'1000000010000000).
  Merging pattern 26'--10101------------------0 and 26'--10111------------------0 from group (1 1 16'0000000010000001).
  Merging pattern 26'--01101------------------0 and 26'--01111------------------0 from group (1 1 16'0000000010000001).
  Merging pattern 26'--11101------------------0 and 26'--11111------------------0 from group (1 1 16'0000000010000001).
  Merging pattern 26'--10111------------------0 and 26'--10101------------------0 from group (1 1 16'0000000010000001).
  Merging pattern 26'--01111------------------0 and 26'--01101------------------0 from group (1 1 16'0000000010000001).
  Merging pattern 26'--11111------------------0 and 26'--11101------------------0 from group (1 1 16'0000000010000001).
  Merging pattern 26'--10101---------00---1-1-1 and 26'--10111---------00---1-1-1 from group (1 1 16'0000000010000001).
  Merging pattern 26'--01101---------00---1-1-1 and 26'--01111---------00---1-1-1 from group (1 1 16'0000000010000001).
  Merging pattern 26'--11101---------00---1-1-1 and 26'--11111---------00---1-1-1 from group (1 1 16'0000000010000001).
  Merging pattern 26'--10111---------00---1-1-1 and 26'--10101---------00---1-1-1 from group (1 1 16'0000000010000001).
  Merging pattern 26'--01111---------00---1-1-1 and 26'--01101---------00---1-1-1 from group (1 1 16'0000000010000001).
  Merging pattern 26'--11111---------00---1-1-1 and 26'--11101---------00---1-1-1 from group (1 1 16'0000000010000001).
  Merging pattern 26'--10101---------00---0---1 and 26'--10111---------00---0---1 from group (1 1 16'0000000010000001).
  Merging pattern 26'--01101---------00---0---1 and 26'--01111---------00---0---1 from group (1 1 16'0000000010000001).
  Merging pattern 26'--11101---------00---0---1 and 26'--11111---------00---0---1 from group (1 1 16'0000000010000001).
  Merging pattern 26'--10111---------00---0---1 and 26'--10101---------00---0---1 from group (1 1 16'0000000010000001).
  Merging pattern 26'--01111---------00---0---1 and 26'--01101---------00---0---1 from group (1 1 16'0000000010000001).
  Merging pattern 26'--11111---------00---0---1 and 26'--11101---------00---0---1 from group (1 1 16'0000000010000001).
  Merging pattern 26'--10101---------10-------1 and 26'--10111---------10-------1 from group (1 1 16'0000000010000001).
  Merging pattern 26'--01101---------10-------1 and 26'--01111---------10-------1 from group (1 1 16'0000000010000001).
  Merging pattern 26'--11101---------10-------1 and 26'--11111---------10-------1 from group (1 1 16'0000000010000001).
  Merging pattern 26'--10111---------10-------1 and 26'--10101---------10-------1 from group (1 1 16'0000000010000001).
  Merging pattern 26'--01111---------10-------1 and 26'--01101---------10-------1 from group (1 1 16'0000000010000001).
  Merging pattern 26'--11111---------10-------1 and 26'--11101---------10-------1 from group (1 1 16'0000000010000001).
  Merging pattern 26'--10101----------1-------1 and 26'--10111----------1-------1 from group (1 1 16'0000000010000001).
  Merging pattern 26'--01101----------1-------1 and 26'--01111----------1-------1 from group (1 1 16'0000000010000001).
  Merging pattern 26'--11101----------1-------1 and 26'--11111----------1-------1 from group (1 1 16'0000000010000001).
  Merging pattern 26'--10111----------1-------1 and 26'--10101----------1-------1 from group (1 1 16'0000000010000001).
  Merging pattern 26'--01111----------1-------1 and 26'--01101----------1-------1 from group (1 1 16'0000000010000001).
  Merging pattern 26'--11111----------1-------1 and 26'--11101----------1-------1 from group (1 1 16'0000000010000001).
  Merging pattern 26'--101-1------------------0 and 26'--111-1------------------0 from group (1 1 16'0000000010000001).
  Merging pattern 26'--111-1------------------0 and 26'--101-1------------------0 from group (1 1 16'0000000010000001).
  Merging pattern 26'--101-1---------00---1-1-1 and 26'--111-1---------00---1-1-1 from group (1 1 16'0000000010000001).
  Merging pattern 26'--111-1---------00---1-1-1 and 26'--101-1---------00---1-1-1 from group (1 1 16'0000000010000001).
  Merging pattern 26'--101-1---------00---0---1 and 26'--111-1---------00---0---1 from group (1 1 16'0000000010000001).
  Merging pattern 26'--111-1---------00---0---1 and 26'--101-1---------00---0---1 from group (1 1 16'0000000010000001).
  Merging pattern 26'--101-1---------10-------1 and 26'--111-1---------10-------1 from group (1 1 16'0000000010000001).
  Merging pattern 26'--111-1---------10-------1 and 26'--101-1---------10-------1 from group (1 1 16'0000000010000001).
  Merging pattern 26'--101-1----------1-------1 and 26'--111-1----------1-------1 from group (1 1 16'0000000010000001).
  Merging pattern 26'--111-1----------1-------1 and 26'--101-1----------1-------1 from group (1 1 16'0000000010000001).
  Merging pattern 26'--1-1-0------------------0 and 26'--1-1-1------------------0 from group (1 1 16'0000000010000001).
  Merging pattern 26'--1-1-1------------------0 and 26'--1-1-0------------------0 from group (1 1 16'0000000010000001).
  Merging pattern 26'--1-1-0---------00---1-1-1 and 26'--1-1-1---------00---1-1-1 from group (1 1 16'0000000010000001).
  Merging pattern 26'--1-1-1---------00---1-1-1 and 26'--1-1-0---------00---1-1-1 from group (1 1 16'0000000010000001).
  Merging pattern 26'--1-1-0---------00---0---1 and 26'--1-1-1---------00---0---1 from group (1 1 16'0000000010000001).
  Merging pattern 26'--1-1-1---------00---0---1 and 26'--1-1-0---------00---0---1 from group (1 1 16'0000000010000001).
  Merging pattern 26'--1-1-0---------10-------1 and 26'--1-1-1---------10-------1 from group (1 1 16'0000000010000001).
  Merging pattern 26'--1-1-1---------10-------1 and 26'--1-1-0---------10-------1 from group (1 1 16'0000000010000001).
  Merging pattern 26'--1-1-0----------1-------1 and 26'--1-1-1----------1-------1 from group (1 1 16'0000000010000001).
  Merging pattern 26'--1-1-1----------1-------1 and 26'--1-1-0----------1-------1 from group (1 1 16'0000000010000001).
  Merging pattern 26'--10101---------00---1-0-1 and 26'--10111---------00---1-0-1 from group (1 2 16'0000000001000001).
  Merging pattern 26'--01101---------00---1-0-1 and 26'--01111---------00---1-0-1 from group (1 2 16'0000000001000001).
  Merging pattern 26'--11101---------00---1-0-1 and 26'--11111---------00---1-0-1 from group (1 2 16'0000000001000001).
  Merging pattern 26'--10111---------00---1-0-1 and 26'--10101---------00---1-0-1 from group (1 2 16'0000000001000001).
  Merging pattern 26'--01111---------00---1-0-1 and 26'--01101---------00---1-0-1 from group (1 2 16'0000000001000001).
  Merging pattern 26'--11111---------00---1-0-1 and 26'--11101---------00---1-0-1 from group (1 2 16'0000000001000001).
  Merging pattern 26'--101-1---------00---1-0-1 and 26'--111-1---------00---1-0-1 from group (1 2 16'0000000001000001).
  Merging pattern 26'--111-1---------00---1-0-1 and 26'--101-1---------00---1-0-1 from group (1 2 16'0000000001000001).
  Merging pattern 26'--1-1-0---------00---1-0-1 and 26'--1-1-1---------00---1-0-1 from group (1 2 16'0000000001000001).
  Merging pattern 26'--1-1-1---------00---1-0-1 and 26'--1-1-0---------00---1-0-1 from group (1 2 16'0000000001000001).
  Merging pattern 26'--10101--------0------1--1 and 26'--10111--------0------1--1 from group (2 0 16'0100000100000000).
  Merging pattern 26'--01101--------0------1--1 and 26'--01111--------0------1--1 from group (2 0 16'0100000100000000).
  Merging pattern 26'--11101--------0------1--1 and 26'--11111--------0------1--1 from group (2 0 16'0100000100000000).
  Merging pattern 26'--10111--------0------1--1 and 26'--10101--------0------1--1 from group (2 0 16'0100000100000000).
  Merging pattern 26'--01111--------0------1--1 and 26'--01101--------0------1--1 from group (2 0 16'0100000100000000).
  Merging pattern 26'--11111--------0------1--1 and 26'--11101--------0------1--1 from group (2 0 16'0100000100000000).
  Merging pattern 26'--101-1--------0------1--1 and 26'--111-1--------0------1--1 from group (2 0 16'0100000100000000).
  Merging pattern 26'--111-1--------0------1--1 and 26'--101-1--------0------1--1 from group (2 0 16'0100000100000000).
  Merging pattern 26'--1-1-0--------0------1--1 and 26'--1-1-1--------0------1--1 from group (2 0 16'0100000100000000).
  Merging pattern 26'--1-1-1--------0------1--1 and 26'--1-1-0--------0------1--1 from group (2 0 16'0100000100000000).
  Merging pattern 26'--10101------------------0 and 26'--10111------------------0 from group (2 1 16'0100000010000000).
  Merging pattern 26'--01101------------------0 and 26'--01111------------------0 from group (2 1 16'0100000010000000).
  Merging pattern 26'--11101------------------0 and 26'--11111------------------0 from group (2 1 16'0100000010000000).
  Merging pattern 26'--10111------------------0 and 26'--10101------------------0 from group (2 1 16'0100000010000000).
  Merging pattern 26'--01111------------------0 and 26'--01101------------------0 from group (2 1 16'0100000010000000).
  Merging pattern 26'--11111------------------0 and 26'--11101------------------0 from group (2 1 16'0100000010000000).
  Merging pattern 26'--10101--------1------1--1 and 26'--10111--------1------1--1 from group (2 1 16'0100000010000000).
  Merging pattern 26'--01101--------1------1--1 and 26'--01111--------1------1--1 from group (2 1 16'0100000010000000).
  Merging pattern 26'--11101--------1------1--1 and 26'--11111--------1------1--1 from group (2 1 16'0100000010000000).
  Merging pattern 26'--10111--------1------1--1 and 26'--10101--------1------1--1 from group (2 1 16'0100000010000000).
  Merging pattern 26'--01111--------1------1--1 and 26'--01101--------1------1--1 from group (2 1 16'0100000010000000).
  Merging pattern 26'--11111--------1------1--1 and 26'--11101--------1------1--1 from group (2 1 16'0100000010000000).
  Merging pattern 26'1-10101------------------1 and 26'1-10111------------------1 from group (2 1 16'0100000010000000).
  Merging pattern 26'1-01101------------------1 and 26'1-01111------------------1 from group (2 1 16'0100000010000000).
  Merging pattern 26'1-11101------------------1 and 26'1-11111------------------1 from group (2 1 16'0100000010000000).
  Merging pattern 26'1-10111------------------1 and 26'1-10101------------------1 from group (2 1 16'0100000010000000).
  Merging pattern 26'1-01111------------------1 and 26'1-01101------------------1 from group (2 1 16'0100000010000000).
  Merging pattern 26'1-11111------------------1 and 26'1-11101------------------1 from group (2 1 16'0100000010000000).
  Merging pattern 26'--101-1------------------0 and 26'--111-1------------------0 from group (2 1 16'0100000010000000).
  Merging pattern 26'--111-1------------------0 and 26'--101-1------------------0 from group (2 1 16'0100000010000000).
  Merging pattern 26'--101-1--------1------1--1 and 26'--111-1--------1------1--1 from group (2 1 16'0100000010000000).
  Merging pattern 26'--111-1--------1------1--1 and 26'--101-1--------1------1--1 from group (2 1 16'0100000010000000).
  Merging pattern 26'1-101-1------------------1 and 26'1-111-1------------------1 from group (2 1 16'0100000010000000).
  Merging pattern 26'1-111-1------------------1 and 26'1-101-1------------------1 from group (2 1 16'0100000010000000).
  Merging pattern 26'--1-1-0------------------0 and 26'--1-1-1------------------0 from group (2 1 16'0100000010000000).
  Merging pattern 26'--1-1-1------------------0 and 26'--1-1-0------------------0 from group (2 1 16'0100000010000000).
  Merging pattern 26'--1-1-0--------1------1--1 and 26'--1-1-1--------1------1--1 from group (2 1 16'0100000010000000).
  Merging pattern 26'--1-1-1--------1------1--1 and 26'--1-1-0--------1------1--1 from group (2 1 16'0100000010000000).
  Merging pattern 26'1-1-1-0------------------1 and 26'1-1-1-1------------------1 from group (2 1 16'0100000010000000).
  Merging pattern 26'1-1-1-1------------------1 and 26'1-1-1-0------------------1 from group (2 1 16'0100000010000000).
  Merging pattern 26'0010101-----000-----0-0--1 and 26'0010111-----000-----0-0--1 from group (2 3 16'0100000000010000).
  Merging pattern 26'0001101-----000-----0-0--1 and 26'0001111-----000-----0-0--1 from group (2 3 16'0100000000010000).
  Merging pattern 26'0011101-----000-----0-0--1 and 26'0011111-----000-----0-0--1 from group (2 3 16'0100000000010000).
  Merging pattern 26'0010111-----000-----0-0--1 and 26'0010101-----000-----0-0--1 from group (2 3 16'0100000000010000).
  Merging pattern 26'0001111-----000-----0-0--1 and 26'0001101-----000-----0-0--1 from group (2 3 16'0100000000010000).
  Merging pattern 26'0011111-----000-----0-0--1 and 26'0011101-----000-----0-0--1 from group (2 3 16'0100000000010000).
  Merging pattern 26'-110101------------------1 and 26'-110111------------------1 from group (2 3 16'0100000000010000).
  Merging pattern 26'-101101------------------1 and 26'-101111------------------1 from group (2 3 16'0100000000010000).
  Merging pattern 26'-111101------------------1 and 26'-111111------------------1 from group (2 3 16'0100000000010000).
  Merging pattern 26'-110111------------------1 and 26'-110101------------------1 from group (2 3 16'0100000000010000).
  Merging pattern 26'-101111------------------1 and 26'-101101------------------1 from group (2 3 16'0100000000010000).
  Merging pattern 26'-111111------------------1 and 26'-111101------------------1 from group (2 3 16'0100000000010000).
  Merging pattern 26'00101-1-----000-----0-0--1 and 26'00111-1-----000-----0-0--1 from group (2 3 16'0100000000010000).
  Merging pattern 26'00111-1-----000-----0-0--1 and 26'00101-1-----000-----0-0--1 from group (2 3 16'0100000000010000).
  Merging pattern 26'-1101-1------------------1 and 26'-1111-1------------------1 from group (2 3 16'0100000000010000).
  Merging pattern 26'-1111-1------------------1 and 26'-1101-1------------------1 from group (2 3 16'0100000000010000).
  Merging pattern 26'001-1-0-----000-----0-0--1 and 26'001-1-1-----000-----0-0--1 from group (2 3 16'0100000000010000).
  Merging pattern 26'001-1-1-----000-----0-0--1 and 26'001-1-0-----000-----0-0--1 from group (2 3 16'0100000000010000).
  Merging pattern 26'-11-1-0------------------1 and 26'-11-1-1------------------1 from group (2 3 16'0100000000010000).
  Merging pattern 26'-11-1-1------------------1 and 26'-11-1-0------------------1 from group (2 3 16'0100000000010000).
  Merging pattern 26'0010101-----100-------0--1 and 26'0010111-----100-------0--1 from group (2 4 16'0100000000001000).
  Merging pattern 26'0001101-----100-------0--1 and 26'0001111-----100-------0--1 from group (2 4 16'0100000000001000).
  Merging pattern 26'0011101-----100-------0--1 and 26'0011111-----100-------0--1 from group (2 4 16'0100000000001000).
  Merging pattern 26'0010111-----100-------0--1 and 26'0010101-----100-------0--1 from group (2 4 16'0100000000001000).
  Merging pattern 26'0001111-----100-------0--1 and 26'0001101-----100-------0--1 from group (2 4 16'0100000000001000).
  Merging pattern 26'0011111-----100-------0--1 and 26'0011101-----100-------0--1 from group (2 4 16'0100000000001000).
  Merging pattern 26'--10101------1-----------1 and 26'--10111------1-----------1 from group (2 4 16'0100000000001000).
  Merging pattern 26'--01101------1-----------1 and 26'--01111------1-----------1 from group (2 4 16'0100000000001000).
  Merging pattern 26'--11101------1-----------1 and 26'--11111------1-----------1 from group (2 4 16'0100000000001000).
  Merging pattern 26'--10111------1-----------1 and 26'--10101------1-----------1 from group (2 4 16'0100000000001000).
  Merging pattern 26'--01111------1-----------1 and 26'--01101------1-----------1 from group (2 4 16'0100000000001000).
  Merging pattern 26'--11111------1-----------1 and 26'--11101------1-----------1 from group (2 4 16'0100000000001000).
  Merging pattern 26'00101-1-----100-------0--1 and 26'00111-1-----100-------0--1 from group (2 4 16'0100000000001000).
  Merging pattern 26'00111-1-----100-------0--1 and 26'00101-1-----100-------0--1 from group (2 4 16'0100000000001000).
  Merging pattern 26'--101-1------1-----------1 and 26'--111-1------1-----------1 from group (2 4 16'0100000000001000).
  Merging pattern 26'--111-1------1-----------1 and 26'--101-1------1-----------1 from group (2 4 16'0100000000001000).
  Merging pattern 26'001-1-0-----100-------0--1 and 26'001-1-1-----100-------0--1 from group (2 4 16'0100000000001000).
  Merging pattern 26'001-1-1-----100-------0--1 and 26'001-1-0-----100-------0--1 from group (2 4 16'0100000000001000).
  Merging pattern 26'--1-1-0------1-----------1 and 26'--1-1-1------1-----------1 from group (2 4 16'0100000000001000).
  Merging pattern 26'--1-1-1------1-----------1 and 26'--1-1-0------1-----------1 from group (2 4 16'0100000000001000).
  Merging pattern 26'0010101------00-----1-0--1 and 26'0010111------00-----1-0--1 from group (2 5 16'0100000000000100).
  Merging pattern 26'0001101------00-----1-0--1 and 26'0001111------00-----1-0--1 from group (2 5 16'0100000000000100).
  Merging pattern 26'0011101------00-----1-0--1 and 26'0011111------00-----1-0--1 from group (2 5 16'0100000000000100).
  Merging pattern 26'0010111------00-----1-0--1 and 26'0010101------00-----1-0--1 from group (2 5 16'0100000000000100).
  Merging pattern 26'0001111------00-----1-0--1 and 26'0001101------00-----1-0--1 from group (2 5 16'0100000000000100).
  Merging pattern 26'0011111------00-----1-0--1 and 26'0011101------00-----1-0--1 from group (2 5 16'0100000000000100).
  Merging pattern 26'00101-1------00-----1-0--1 and 26'00111-1------00-----1-0--1 from group (2 5 16'0100000000000100).
  Merging pattern 26'00111-1------00-----1-0--1 and 26'00101-1------00-----1-0--1 from group (2 5 16'0100000000000100).
  Merging pattern 26'001-1-0------00-----1-0--1 and 26'001-1-1------00-----1-0--1 from group (2 5 16'0100000000000100).
  Merging pattern 26'001-1-1------00-----1-0--1 and 26'001-1-0------00-----1-0--1 from group (2 5 16'0100000000000100).
  Merging pattern 26'--10101-------1----------1 and 26'--10111-------1----------1 from group (2 6 16'0100000000000010).
  Merging pattern 26'--01101-------1----------1 and 26'--01111-------1----------1 from group (2 6 16'0100000000000010).
  Merging pattern 26'--11101-------1----------1 and 26'--11111-------1----------1 from group (2 6 16'0100000000000010).
  Merging pattern 26'--10111-------1----------1 and 26'--10101-------1----------1 from group (2 6 16'0100000000000010).
  Merging pattern 26'--01111-------1----------1 and 26'--01101-------1----------1 from group (2 6 16'0100000000000010).
  Merging pattern 26'--11111-------1----------1 and 26'--11101-------1----------1 from group (2 6 16'0100000000000010).
  Merging pattern 26'--101-1-------1----------1 and 26'--111-1-------1----------1 from group (2 6 16'0100000000000010).
  Merging pattern 26'--111-1-------1----------1 and 26'--101-1-------1----------1 from group (2 6 16'0100000000000010).
  Merging pattern 26'--1-1-0-------1----------1 and 26'--1-1-1-------1----------1 from group (2 6 16'0100000000000010).
  Merging pattern 26'--1-1-1-------1----------1 and 26'--1-1-0-------1----------1 from group (2 6 16'0100000000000010).
  Merging pattern 26'--10101------------------0 and 26'--10111------------------0 from group (3 1 16'0001000010000000).
  Merging pattern 26'--01101------------------0 and 26'--01111------------------0 from group (3 1 16'0001000010000000).
  Merging pattern 26'--11101------------------0 and 26'--11111------------------0 from group (3 1 16'0001000010000000).
  Merging pattern 26'--10111------------------0 and 26'--10101------------------0 from group (3 1 16'0001000010000000).
  Merging pattern 26'--01111------------------0 and 26'--01101------------------0 from group (3 1 16'0001000010000000).
  Merging pattern 26'--11111------------------0 and 26'--11101------------------0 from group (3 1 16'0001000010000000).
  Merging pattern 26'--10101------------1----11 and 26'--10111------------1----11 from group (3 1 16'0001000010000000).
  Merging pattern 26'--01101------------1----11 and 26'--01111------------1----11 from group (3 1 16'0001000010000000).
  Merging pattern 26'--11101------------1----11 and 26'--11111------------1----11 from group (3 1 16'0001000010000000).
  Merging pattern 26'--10111------------1----11 and 26'--10101------------1----11 from group (3 1 16'0001000010000000).
  Merging pattern 26'--01111------------1----11 and 26'--01101------------1----11 from group (3 1 16'0001000010000000).
  Merging pattern 26'--11111------------1----11 and 26'--11101------------1----11 from group (3 1 16'0001000010000000).
  Merging pattern 26'--10101------------0-----1 and 26'--10111------------0-----1 from group (3 1 16'0001000010000000).
  Merging pattern 26'--01101------------0-----1 and 26'--01111------------0-----1 from group (3 1 16'0001000010000000).
  Merging pattern 26'--11101------------0-----1 and 26'--11111------------0-----1 from group (3 1 16'0001000010000000).
  Merging pattern 26'--10111------------0-----1 and 26'--10101------------0-----1 from group (3 1 16'0001000010000000).
  Merging pattern 26'--01111------------0-----1 and 26'--01101------------0-----1 from group (3 1 16'0001000010000000).
  Merging pattern 26'--11111------------0-----1 and 26'--11101------------0-----1 from group (3 1 16'0001000010000000).
  Merging pattern 26'--101-1------------------0 and 26'--111-1------------------0 from group (3 1 16'0001000010000000).
  Merging pattern 26'--111-1------------------0 and 26'--101-1------------------0 from group (3 1 16'0001000010000000).
  Merging pattern 26'--101-1------------1----11 and 26'--111-1------------1----11 from group (3 1 16'0001000010000000).
  Merging pattern 26'--111-1------------1----11 and 26'--101-1------------1----11 from group (3 1 16'0001000010000000).
  Merging pattern 26'--101-1------------0-----1 and 26'--111-1------------0-----1 from group (3 1 16'0001000010000000).
  Merging pattern 26'--111-1------------0-----1 and 26'--101-1------------0-----1 from group (3 1 16'0001000010000000).
  Merging pattern 26'--1-1-0------------------0 and 26'--1-1-1------------------0 from group (3 1 16'0001000010000000).
  Merging pattern 26'--1-1-1------------------0 and 26'--1-1-0------------------0 from group (3 1 16'0001000010000000).
  Merging pattern 26'--1-1-0------------1----11 and 26'--1-1-1------------1----11 from group (3 1 16'0001000010000000).
  Merging pattern 26'--1-1-1------------1----11 and 26'--1-1-0------------1----11 from group (3 1 16'0001000010000000).
  Merging pattern 26'--1-1-0------------0-----1 and 26'--1-1-1------------0-----1 from group (3 1 16'0001000010000000).
  Merging pattern 26'--1-1-1------------0-----1 and 26'--1-1-0------------0-----1 from group (3 1 16'0001000010000000).
  Merging pattern 26'--10101------------1----01 and 26'--10111------------1----01 from group (3 3 16'0001000000010000).
  Merging pattern 26'--01101------------1----01 and 26'--01111------------1----01 from group (3 3 16'0001000000010000).
  Merging pattern 26'--11101------------1----01 and 26'--11111------------1----01 from group (3 3 16'0001000000010000).
  Merging pattern 26'--10111------------1----01 and 26'--10101------------1----01 from group (3 3 16'0001000000010000).
  Merging pattern 26'--01111------------1----01 and 26'--01101------------1----01 from group (3 3 16'0001000000010000).
  Merging pattern 26'--11111------------1----01 and 26'--11101------------1----01 from group (3 3 16'0001000000010000).
  Merging pattern 26'--101-1------------1----01 and 26'--111-1------------1----01 from group (3 3 16'0001000000010000).
  Merging pattern 26'--111-1------------1----01 and 26'--101-1------------1----01 from group (3 3 16'0001000000010000).
  Merging pattern 26'--1-1-0------------1----01 and 26'--1-1-1------------1----01 from group (3 3 16'0001000000010000).
  Merging pattern 26'--1-1-1------------1----01 and 26'--1-1-0------------1----01 from group (3 3 16'0001000000010000).
  Merging pattern 26'--10101------------------0 and 26'--10111------------------0 from group (4 1 16'0000100010000000).
  Merging pattern 26'--01101------------------0 and 26'--01111------------------0 from group (4 1 16'0000100010000000).
  Merging pattern 26'--11101------------------0 and 26'--11111------------------0 from group (4 1 16'0000100010000000).
  Merging pattern 26'--10111------------------0 and 26'--10101------------------0 from group (4 1 16'0000100010000000).
  Merging pattern 26'--01111------------------0 and 26'--01101------------------0 from group (4 1 16'0000100010000000).
  Merging pattern 26'--11111------------------0 and 26'--11101------------------0 from group (4 1 16'0000100010000000).
  Merging pattern 26'--10101--1---------------1 and 26'--10111--1---------------1 from group (4 1 16'0000100010000000).
  Merging pattern 26'--01101--1---------------1 and 26'--01111--1---------------1 from group (4 1 16'0000100010000000).
  Merging pattern 26'--11101--1---------------1 and 26'--11111--1---------------1 from group (4 1 16'0000100010000000).
  Merging pattern 26'--10111--1---------------1 and 26'--10101--1---------------1 from group (4 1 16'0000100010000000).
  Merging pattern 26'--01111--1---------------1 and 26'--01101--1---------------1 from group (4 1 16'0000100010000000).
  Merging pattern 26'--11111--1---------------1 and 26'--11101--1---------------1 from group (4 1 16'0000100010000000).
  Merging pattern 26'--101-1------------------0 and 26'--111-1------------------0 from group (4 1 16'0000100010000000).
  Merging pattern 26'--111-1------------------0 and 26'--101-1------------------0 from group (4 1 16'0000100010000000).
  Merging pattern 26'--101-1--1---------------1 and 26'--111-1--1---------------1 from group (4 1 16'0000100010000000).
  Merging pattern 26'--111-1--1---------------1 and 26'--101-1--1---------------1 from group (4 1 16'0000100010000000).
  Merging pattern 26'--1-1-0------------------0 and 26'--1-1-1------------------0 from group (4 1 16'0000100010000000).
  Merging pattern 26'--1-1-1------------------0 and 26'--1-1-0------------------0 from group (4 1 16'0000100010000000).
  Merging pattern 26'--1-1-0--1---------------1 and 26'--1-1-1--1---------------1 from group (4 1 16'0000100010000000).
  Merging pattern 26'--1-1-1--1---------------1 and 26'--1-1-0--1---------------1 from group (4 1 16'0000100010000000).
  Merging pattern 26'--10101--0---------------1 and 26'--10111--0---------------1 from group (4 4 16'0000100000001000).
  Merging pattern 26'--01101--0---------------1 and 26'--01111--0---------------1 from group (4 4 16'0000100000001000).
  Merging pattern 26'--11101--0---------------1 and 26'--11111--0---------------1 from group (4 4 16'0000100000001000).
  Merging pattern 26'--10111--0---------------1 and 26'--10101--0---------------1 from group (4 4 16'0000100000001000).
  Merging pattern 26'--01111--0---------------1 and 26'--01101--0---------------1 from group (4 4 16'0000100000001000).
  Merging pattern 26'--11111--0---------------1 and 26'--11101--0---------------1 from group (4 4 16'0000100000001000).
  Merging pattern 26'--101-1--0---------------1 and 26'--111-1--0---------------1 from group (4 4 16'0000100000001000).
  Merging pattern 26'--111-1--0---------------1 and 26'--101-1--0---------------1 from group (4 4 16'0000100000001000).
  Merging pattern 26'--1-1-0--0---------------1 and 26'--1-1-1--0---------------1 from group (4 4 16'0000100000001000).
  Merging pattern 26'--1-1-1--0---------------1 and 26'--1-1-0--0---------------1 from group (4 4 16'0000100000001000).
  Merging pattern 26'--10101------------------0 and 26'--10111------------------0 from group (5 1 16'0000010010000000).
  Merging pattern 26'--01101------------------0 and 26'--01111------------------0 from group (5 1 16'0000010010000000).
  Merging pattern 26'--11101------------------0 and 26'--11111------------------0 from group (5 1 16'0000010010000000).
  Merging pattern 26'--10111------------------0 and 26'--10101------------------0 from group (5 1 16'0000010010000000).
  Merging pattern 26'--01111------------------0 and 26'--01101------------------0 from group (5 1 16'0000010010000000).
  Merging pattern 26'--11111------------------0 and 26'--11101------------------0 from group (5 1 16'0000010010000000).
  Merging pattern 26'--1010111----------------1 and 26'--1011111----------------1 from group (5 1 16'0000010010000000).
  Merging pattern 26'--0110111----------------1 and 26'--0111111----------------1 from group (5 1 16'0000010010000000).
  Merging pattern 26'--1110111----------------1 and 26'--1111111----------------1 from group (5 1 16'0000010010000000).
  Merging pattern 26'--1011111----------------1 and 26'--1010111----------------1 from group (5 1 16'0000010010000000).
  Merging pattern 26'--0111111----------------1 and 26'--0110111----------------1 from group (5 1 16'0000010010000000).
  Merging pattern 26'--1111111----------------1 and 26'--1110111----------------1 from group (5 1 16'0000010010000000).
  Merging pattern 26'--101-1------------------0 and 26'--111-1------------------0 from group (5 1 16'0000010010000000).
  Merging pattern 26'--111-1------------------0 and 26'--101-1------------------0 from group (5 1 16'0000010010000000).
  Merging pattern 26'--101-111----------------1 and 26'--111-111----------------1 from group (5 1 16'0000010010000000).
  Merging pattern 26'--111-111----------------1 and 26'--101-111----------------1 from group (5 1 16'0000010010000000).
  Merging pattern 26'--1-1-0------------------0 and 26'--1-1-1------------------0 from group (5 1 16'0000010010000000).
  Merging pattern 26'--1-1-1------------------0 and 26'--1-1-0------------------0 from group (5 1 16'0000010010000000).
  Merging pattern 26'--1-1-011----------------1 and 26'--1-1-111----------------1 from group (5 1 16'0000010010000000).
  Merging pattern 26'--1-1-111----------------1 and 26'--1-1-011----------------1 from group (5 1 16'0000010010000000).
  Merging pattern 26'--10101-0----------------1 and 26'--10111-0----------------1 from group (5 5 16'0000010000000100).
  Merging pattern 26'--01101-0----------------1 and 26'--01111-0----------------1 from group (5 5 16'0000010000000100).
  Merging pattern 26'--11101-0----------------1 and 26'--11111-0----------------1 from group (5 5 16'0000010000000100).
  Merging pattern 26'--10111-0----------------1 and 26'--10101-0----------------1 from group (5 5 16'0000010000000100).
  Merging pattern 26'--01111-0----------------1 and 26'--01101-0----------------1 from group (5 5 16'0000010000000100).
  Merging pattern 26'--11111-0----------------1 and 26'--11101-0----------------1 from group (5 5 16'0000010000000100).
  Merging pattern 26'--1010101----------------1 and 26'--1011101----------------1 from group (5 5 16'0000010000000100).
  Merging pattern 26'--0110101----------------1 and 26'--0111101----------------1 from group (5 5 16'0000010000000100).
  Merging pattern 26'--1110101----------------1 and 26'--1111101----------------1 from group (5 5 16'0000010000000100).
  Merging pattern 26'--1011101----------------1 and 26'--1010101----------------1 from group (5 5 16'0000010000000100).
  Merging pattern 26'--0111101----------------1 and 26'--0110101----------------1 from group (5 5 16'0000010000000100).
  Merging pattern 26'--1111101----------------1 and 26'--1110101----------------1 from group (5 5 16'0000010000000100).
  Merging pattern 26'--101-1-0----------------1 and 26'--111-1-0----------------1 from group (5 5 16'0000010000000100).
  Merging pattern 26'--111-1-0----------------1 and 26'--101-1-0----------------1 from group (5 5 16'0000010000000100).
  Merging pattern 26'--101-101----------------1 and 26'--111-101----------------1 from group (5 5 16'0000010000000100).
  Merging pattern 26'--111-101----------------1 and 26'--101-101----------------1 from group (5 5 16'0000010000000100).
  Merging pattern 26'--1-1-0-0----------------1 and 26'--1-1-1-0----------------1 from group (5 5 16'0000010000000100).
  Merging pattern 26'--1-1-1-0----------------1 and 26'--1-1-0-0----------------1 from group (5 5 16'0000010000000100).
  Merging pattern 26'--1-1-001----------------1 and 26'--1-1-101----------------1 from group (5 5 16'0000010000000100).
  Merging pattern 26'--1-1-101----------------1 and 26'--1-1-001----------------1 from group (5 5 16'0000010000000100).
  Merging pattern 26'--10101------------------0 and 26'--10111------------------0 from group (6 1 16'0000001010000000).
  Merging pattern 26'--01101------------------0 and 26'--01111------------------0 from group (6 1 16'0000001010000000).
  Merging pattern 26'--11101------------------0 and 26'--11111------------------0 from group (6 1 16'0000001010000000).
  Merging pattern 26'--10111------------------0 and 26'--10101------------------0 from group (6 1 16'0000001010000000).
  Merging pattern 26'--01111------------------0 and 26'--01101------------------0 from group (6 1 16'0000001010000000).
  Merging pattern 26'--11111------------------0 and 26'--11101------------------0 from group (6 1 16'0000001010000000).
  Merging pattern 26'--1010111----------------1 and 26'--1011111----------------1 from group (6 1 16'0000001010000000).
  Merging pattern 26'--0110111----------------1 and 26'--0111111----------------1 from group (6 1 16'0000001010000000).
  Merging pattern 26'--1110111----------------1 and 26'--1111111----------------1 from group (6 1 16'0000001010000000).
  Merging pattern 26'--1011111----------------1 and 26'--1010111----------------1 from group (6 1 16'0000001010000000).
  Merging pattern 26'--0111111----------------1 and 26'--0110111----------------1 from group (6 1 16'0000001010000000).
  Merging pattern 26'--1111111----------------1 and 26'--1110111----------------1 from group (6 1 16'0000001010000000).
  Merging pattern 26'--101-1------------------0 and 26'--111-1------------------0 from group (6 1 16'0000001010000000).
  Merging pattern 26'--111-1------------------0 and 26'--101-1------------------0 from group (6 1 16'0000001010000000).
  Merging pattern 26'--101-111----------------1 and 26'--111-111----------------1 from group (6 1 16'0000001010000000).
  Merging pattern 26'--111-111----------------1 and 26'--101-111----------------1 from group (6 1 16'0000001010000000).
  Merging pattern 26'--1-1-0------------------0 and 26'--1-1-1------------------0 from group (6 1 16'0000001010000000).
  Merging pattern 26'--1-1-1------------------0 and 26'--1-1-0------------------0 from group (6 1 16'0000001010000000).
  Merging pattern 26'--1-1-011----------------1 and 26'--1-1-111----------------1 from group (6 1 16'0000001010000000).
  Merging pattern 26'--1-1-111----------------1 and 26'--1-1-011----------------1 from group (6 1 16'0000001010000000).
  Merging pattern 26'--10101-0----------------1 and 26'--10111-0----------------1 from group (6 6 16'0000001000000010).
  Merging pattern 26'--01101-0----------------1 and 26'--01111-0----------------1 from group (6 6 16'0000001000000010).
  Merging pattern 26'--11101-0----------------1 and 26'--11111-0----------------1 from group (6 6 16'0000001000000010).
  Merging pattern 26'--10111-0----------------1 and 26'--10101-0----------------1 from group (6 6 16'0000001000000010).
  Merging pattern 26'--01111-0----------------1 and 26'--01101-0----------------1 from group (6 6 16'0000001000000010).
  Merging pattern 26'--11111-0----------------1 and 26'--11101-0----------------1 from group (6 6 16'0000001000000010).
  Merging pattern 26'--1010101----------------1 and 26'--1011101----------------1 from group (6 6 16'0000001000000010).
  Merging pattern 26'--0110101----------------1 and 26'--0111101----------------1 from group (6 6 16'0000001000000010).
  Merging pattern 26'--1110101----------------1 and 26'--1111101----------------1 from group (6 6 16'0000001000000010).
  Merging pattern 26'--1011101----------------1 and 26'--1010101----------------1 from group (6 6 16'0000001000000010).
  Merging pattern 26'--0111101----------------1 and 26'--0110101----------------1 from group (6 6 16'0000001000000010).
  Merging pattern 26'--1111101----------------1 and 26'--1110101----------------1 from group (6 6 16'0000001000000010).
  Merging pattern 26'--101-1-0----------------1 and 26'--111-1-0----------------1 from group (6 6 16'0000001000000010).
  Merging pattern 26'--111-1-0----------------1 and 26'--101-1-0----------------1 from group (6 6 16'0000001000000010).
  Merging pattern 26'--101-101----------------1 and 26'--111-101----------------1 from group (6 6 16'0000001000000010).
  Merging pattern 26'--111-101----------------1 and 26'--101-101----------------1 from group (6 6 16'0000001000000010).
  Merging pattern 26'--1-1-0-0----------------1 and 26'--1-1-1-0----------------1 from group (6 6 16'0000001000000010).
  Merging pattern 26'--1-1-1-0----------------1 and 26'--1-1-0-0----------------1 from group (6 6 16'0000001000000010).
  Merging pattern 26'--1-1-001----------------1 and 26'--1-1-101----------------1 from group (6 6 16'0000001000000010).
  Merging pattern 26'--1-1-101----------------1 and 26'--1-1-001----------------1 from group (6 6 16'0000001000000010).
  Removing unused input signal $logic_and$/openlane/designs/alphacore/src/alphacore.v:1454$551_Y.
  Removing unused input signal $logic_and$/openlane/designs/alphacore/src/alphacore.v:1451$549_Y.
  Removing unused input signal $auto$opt_reduce.cc:134:opt_pmux$3495.

24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alphacore..
Removed 44 unused cells and 44 unused wires.
<suppressed ~45 debug messages>

24.5. Executing FSM_OPT pass (simple optimizations of FSMs).
Optimizing FSM `$fsm$\cpu_state$3504' from module `\alphacore'.
  Removing unused output signal $0\cpu_state[7:0] [0].
  Removing unused output signal $0\cpu_state[7:0] [1].
  Removing unused output signal $0\cpu_state[7:0] [2].
  Removing unused output signal $0\cpu_state[7:0] [3].
  Removing unused output signal $0\cpu_state[7:0] [4].
  Removing unused output signal $0\cpu_state[7:0] [5].
  Removing unused output signal $0\cpu_state[7:0] [6].
  Removing unused output signal $0\cpu_state[7:0] [7].
Optimizing FSM `$fsm$\mem_wordsize$3514' from module `\alphacore'.
  Removing unused output signal $0\mem_wordsize[1:0] [0].
  Removing unused output signal $0\mem_wordsize[1:0] [1].

24.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).
Recoding FSM `$fsm$\cpu_state$3504' from module `\alphacore' using `auto' encoding:
  mapping auto encoding to `one-hot` for this FSM.
  10000000 -> ------1
  01000000 -> -----1-
  00100000 -> ----1--
  00001000 -> ---1---
  00000100 -> --1----
  00000010 -> -1-----
  00000001 -> 1------
Recoding FSM `$fsm$\mem_wordsize$3514' from module `\alphacore' using `auto' encoding:
  mapping auto encoding to `one-hot` for this FSM.
  00 -> --1
  10 -> -1-
  01 -> 1--

24.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

FSM `$fsm$\cpu_state$3504' from module `alphacore':
-------------------------------------

  Information on FSM $fsm$\cpu_state$3504 (\cpu_state):

  Number of input signals:   23
  Number of output signals:   8
  Number of state bits:       7

  Input signals:
    0: \resetn
    1: \mem_done
    2: \instr_jal
    3: \instr_trap
    4: \decoder_trigger
    5: \is_sb_sh_sw
    6: \is_beq_bne_blt_bge_bltu_bgeu
    7: $logic_and$/openlane/designs/alphacore/src/alphacore.v:1273$508_Y
    8: $logic_and$/openlane/designs/alphacore/src/alphacore.v:1283$516_Y
    9: $logic_and$/openlane/designs/alphacore/src/alphacore.v:1323$531_Y
   10: $logic_and$/openlane/designs/alphacore/src/alphacore.v:1382$538_Y
   11: $logic_and$/openlane/designs/alphacore/src/alphacore.v:1390$539_Y
   12: $logic_and$/openlane/designs/alphacore/src/alphacore.v:1426$544_Y
   13: $eq$/openlane/designs/alphacore/src/alphacore.v:1508$566_Y
   14: $logic_or$/openlane/designs/alphacore/src/alphacore.v:1534$584_Y
   15: $logic_and$/openlane/designs/alphacore/src/alphacore.v:1549$588_Y
   16: $logic_and$/openlane/designs/alphacore/src/alphacore.v:1599$602_Y
   17: $logic_and$/openlane/designs/alphacore/src/alphacore.v:1600$605_Y
   18: $logic_and$/openlane/designs/alphacore/src/alphacore.v:1602$609_Y
   19: $logic_and$/openlane/designs/alphacore/src/alphacore.v:1607$612_Y
   20: $logic_and$/openlane/designs/alphacore/src/alphacore.v:1615$618_Y
   21: $auto$opt_reduce.cc:134:opt_pmux$3427
   22: $auto$opt_reduce.cc:134:opt_pmux$3425

  Output signals:
    0: $eq$/openlane/designs/alphacore/src/alphacore.v:1082$440_Y
    1: $procmux$1004_CMP
    2: $procmux$1005_CMP
    3: $procmux$1006_CMP
    4: $procmux$1007_CMP
    5: $procmux$1008_CMP
    6: $procmux$1009_CMP
    7: $procmux$1011_CMP

  State encoding:
    0:  7'------1
    1:  7'-----1-
    2:  7'----1--
    3:  7'---1---
    4:  7'--1----
    5:  7'-1-----
    6:  7'1------

  Transition Table (state_in, ctrl_in, state_out, ctrl_out):
      0:     0 23'--0---0---------------1   ->     0 8'10000000
      1:     0 23'--00-01---------------1   ->     0 8'10000000
      2:     0 23'--00111---------------1   ->     0 8'10000000
      3:     0 23'--011-1---------------1   ->     0 8'10000000
      4:     0 23'--1-1-----------------1   ->     0 8'10000000
      5:     0 23'--00011----------------   ->     0 8'10000000
      6:     0 23'--010-1----------------   ->     0 8'10000000
      7:     0 23'--1-0------------------   ->     0 8'10000000
      8:     0 23'--0---0---------------0   ->     1 8'10000000
      9:     0 23'--00-01---------------0   ->     1 8'10000000
     10:     0 23'--00111---------------0   ->     1 8'10000000
     11:     0 23'--011-1---------------0   ->     1 8'10000000
     12:     0 23'--1-1-----------------0   ->     1 8'10000000
     13:     1 23'--00011----------------   ->     0 8'00000001
     14:     1 23'--010-1----------------   ->     0 8'00000001
     15:     1 23'--1-0------------------   ->     0 8'00000001
     16:     1 23'--0---0---------------0   ->     1 8'00000001
     17:     1 23'--00-01---------------0   ->     1 8'00000001
     18:     1 23'--00111---------------0   ->     1 8'00000001
     19:     1 23'--011-1---------------0   ->     1 8'00000001
     20:     1 23'--1-1-----------------0   ->     1 8'00000001
     21:     1 23'--0---0-------00--1-1-1   ->     1 8'00000001
     22:     1 23'--00-01-------00--1-1-1   ->     1 8'00000001
     23:     1 23'--00111-------00--1-1-1   ->     1 8'00000001
     24:     1 23'--011-1-------00--1-1-1   ->     1 8'00000001
     25:     1 23'--1-1---------00--1-1-1   ->     1 8'00000001
     26:     1 23'--0---0-------00--0---1   ->     1 8'00000001
     27:     1 23'--00-01-------00--0---1   ->     1 8'00000001
     28:     1 23'--00111-------00--0---1   ->     1 8'00000001
     29:     1 23'--011-1-------00--0---1   ->     1 8'00000001
     30:     1 23'--1-1---------00--0---1   ->     1 8'00000001
     31:     1 23'--0---0-------10------1   ->     1 8'00000001
     32:     1 23'--00-01-------10------1   ->     1 8'00000001
     33:     1 23'--00111-------10------1   ->     1 8'00000001
     34:     1 23'--011-1-------10------1   ->     1 8'00000001
     35:     1 23'--1-1---------10------1   ->     1 8'00000001
     36:     1 23'--0---0--------1------1   ->     1 8'00000001
     37:     1 23'--00-01--------1------1   ->     1 8'00000001
     38:     1 23'--00111--------1------1   ->     1 8'00000001
     39:     1 23'--011-1--------1------1   ->     1 8'00000001
     40:     1 23'--1-1----------1------1   ->     1 8'00000001
     41:     1 23'--0---0-------00--1-0-1   ->     2 8'00000001
     42:     1 23'--00-01-------00--1-0-1   ->     2 8'00000001
     43:     1 23'--00111-------00--1-0-1   ->     2 8'00000001
     44:     1 23'--011-1-------00--1-0-1   ->     2 8'00000001
     45:     1 23'--1-1---------00--1-0-1   ->     2 8'00000001
     46:     2 23'--0---0------0-----1--1   ->     0 8'01000000
     47:     2 23'--00-01------0-----1--1   ->     0 8'01000000
     48:     2 23'--00111------0-----1--1   ->     0 8'01000000
     49:     2 23'--011-1------0-----1--1   ->     0 8'01000000
     50:     2 23'--1-1--------0-----1--1   ->     0 8'01000000
     51:     2 23'--00011----------------   ->     0 8'01000000
     52:     2 23'--010-1----------------   ->     0 8'01000000
     53:     2 23'--1-0------------------   ->     0 8'01000000
     54:     2 23'--0---0---------------0   ->     1 8'01000000
     55:     2 23'--00-01---------------0   ->     1 8'01000000
     56:     2 23'--00111---------------0   ->     1 8'01000000
     57:     2 23'--011-1---------------0   ->     1 8'01000000
     58:     2 23'--1-1-----------------0   ->     1 8'01000000
     59:     2 23'--0---0------1-----1--1   ->     1 8'01000000
     60:     2 23'--00-01------1-----1--1   ->     1 8'01000000
     61:     2 23'--00111------1-----1--1   ->     1 8'01000000
     62:     2 23'--011-1------1-----1--1   ->     1 8'01000000
     63:     2 23'--1-1--------1-----1--1   ->     1 8'01000000
     64:     2 23'1-0---0---------------1   ->     1 8'01000000
     65:     2 23'1-00-01---------------1   ->     1 8'01000000
     66:     2 23'1-00111---------------1   ->     1 8'01000000
     67:     2 23'1-011-1---------------1   ->     1 8'01000000
     68:     2 23'1-1-1-----------------1   ->     1 8'01000000
     69:     2 23'000---0---000----0-0--1   ->     3 8'01000000
     70:     2 23'0000-01---000----0-0--1   ->     3 8'01000000
     71:     2 23'0000111---000----0-0--1   ->     3 8'01000000
     72:     2 23'00011-1---000----0-0--1   ->     3 8'01000000
     73:     2 23'001-1-----000----0-0--1   ->     3 8'01000000
     74:     2 23'-10---0---------------1   ->     3 8'01000000
     75:     2 23'-100-01---------------1   ->     3 8'01000000
     76:     2 23'-100111---------------1   ->     3 8'01000000
     77:     2 23'-1011-1---------------1   ->     3 8'01000000
     78:     2 23'-11-1-----------------1   ->     3 8'01000000
     79:     2 23'000---0---100------0--1   ->     4 8'01000000
     80:     2 23'0000-01---100------0--1   ->     4 8'01000000
     81:     2 23'0000111---100------0--1   ->     4 8'01000000
     82:     2 23'00011-1---100------0--1   ->     4 8'01000000
     83:     2 23'001-1-----100------0--1   ->     4 8'01000000
     84:     2 23'--0---0----1----------1   ->     4 8'01000000
     85:     2 23'--00-01----1----------1   ->     4 8'01000000
     86:     2 23'--00111----1----------1   ->     4 8'01000000
     87:     2 23'--011-1----1----------1   ->     4 8'01000000
     88:     2 23'--1-1------1----------1   ->     4 8'01000000
     89:     2 23'000---0----00----1-0--1   ->     5 8'01000000
     90:     2 23'0000-01----00----1-0--1   ->     5 8'01000000
     91:     2 23'0000111----00----1-0--1   ->     5 8'01000000
     92:     2 23'00011-1----00----1-0--1   ->     5 8'01000000
     93:     2 23'001-1------00----1-0--1   ->     5 8'01000000
     94:     2 23'--0---0-----1---------1   ->     6 8'01000000
     95:     2 23'--00-01-----1---------1   ->     6 8'01000000
     96:     2 23'--00111-----1---------1   ->     6 8'01000000
     97:     2 23'--011-1-----1---------1   ->     6 8'01000000
     98:     2 23'--1-1-------1---------1   ->     6 8'01000000
     99:     3 23'--00011----------------   ->     0 8'00010000
    100:     3 23'--010-1----------------   ->     0 8'00010000
    101:     3 23'--1-0------------------   ->     0 8'00010000
    102:     3 23'--0---0---------------0   ->     1 8'00010000
    103:     3 23'--00-01---------------0   ->     1 8'00010000
    104:     3 23'--00111---------------0   ->     1 8'00010000
    105:     3 23'--011-1---------------0   ->     1 8'00010000
    106:     3 23'--1-1-----------------0   ->     1 8'00010000
    107:     3 23'--0---0---------1----11   ->     1 8'00010000
    108:     3 23'--00-01---------1----11   ->     1 8'00010000
    109:     3 23'--00111---------1----11   ->     1 8'00010000
    110:     3 23'--011-1---------1----11   ->     1 8'00010000
    111:     3 23'--1-1-----------1----11   ->     1 8'00010000
    112:     3 23'--0---0---------0-----1   ->     1 8'00010000
    113:     3 23'--00-01---------0-----1   ->     1 8'00010000
    114:     3 23'--00111---------0-----1   ->     1 8'00010000
    115:     3 23'--011-1---------0-----1   ->     1 8'00010000
    116:     3 23'--1-1-----------0-----1   ->     1 8'00010000
    117:     3 23'--0---0---------1----01   ->     3 8'00010000
    118:     3 23'--00-01---------1----01   ->     3 8'00010000
    119:     3 23'--00111---------1----01   ->     3 8'00010000
    120:     3 23'--011-1---------1----01   ->     3 8'00010000
    121:     3 23'--1-1-----------1----01   ->     3 8'00010000
    122:     4 23'--00011----------------   ->     0 8'00001000
    123:     4 23'--010-1----------------   ->     0 8'00001000
    124:     4 23'--1-0------------------   ->     0 8'00001000
    125:     4 23'--0---0---------------0   ->     1 8'00001000
    126:     4 23'--00-01---------------0   ->     1 8'00001000
    127:     4 23'--00111---------------0   ->     1 8'00001000
    128:     4 23'--011-1---------------0   ->     1 8'00001000
    129:     4 23'--1-1-----------------0   ->     1 8'00001000
    130:     4 23'--0---0--1------------1   ->     1 8'00001000
    131:     4 23'--00-01--1------------1   ->     1 8'00001000
    132:     4 23'--00111--1------------1   ->     1 8'00001000
    133:     4 23'--011-1--1------------1   ->     1 8'00001000
    134:     4 23'--1-1----1------------1   ->     1 8'00001000
    135:     4 23'--0---0--0------------1   ->     4 8'00001000
    136:     4 23'--00-01--0------------1   ->     4 8'00001000
    137:     4 23'--00111--0------------1   ->     4 8'00001000
    138:     4 23'--011-1--0------------1   ->     4 8'00001000
    139:     4 23'--1-1----0------------1   ->     4 8'00001000
    140:     5 23'--00011----------------   ->     0 8'00000100
    141:     5 23'--010-1----------------   ->     0 8'00000100
    142:     5 23'--1-0------------------   ->     0 8'00000100
    143:     5 23'--0---0---------------0   ->     1 8'00000100
    144:     5 23'--00-01---------------0   ->     1 8'00000100
    145:     5 23'--00111---------------0   ->     1 8'00000100
    146:     5 23'--011-1---------------0   ->     1 8'00000100
    147:     5 23'--1-1-----------------0   ->     1 8'00000100
    148:     5 23'--0---011-------------1   ->     1 8'00000100
    149:     5 23'--00-0111-------------1   ->     1 8'00000100
    150:     5 23'--0011111-------------1   ->     1 8'00000100
    151:     5 23'--011-111-------------1   ->     1 8'00000100
    152:     5 23'--1-1--11-------------1   ->     1 8'00000100
    153:     5 23'--0---0-0-------------1   ->     5 8'00000100
    154:     5 23'--00-01-0-------------1   ->     5 8'00000100
    155:     5 23'--00111-0-------------1   ->     5 8'00000100
    156:     5 23'--011-1-0-------------1   ->     5 8'00000100
    157:     5 23'--1-1---0-------------1   ->     5 8'00000100
    158:     5 23'--0---001-------------1   ->     5 8'00000100
    159:     5 23'--00-0101-------------1   ->     5 8'00000100
    160:     5 23'--0011101-------------1   ->     5 8'00000100
    161:     5 23'--011-101-------------1   ->     5 8'00000100
    162:     5 23'--1-1--01-------------1   ->     5 8'00000100
    163:     6 23'--00011----------------   ->     0 8'00000010
    164:     6 23'--010-1----------------   ->     0 8'00000010
    165:     6 23'--1-0------------------   ->     0 8'00000010
    166:     6 23'--0---0---------------0   ->     1 8'00000010
    167:     6 23'--00-01---------------0   ->     1 8'00000010
    168:     6 23'--00111---------------0   ->     1 8'00000010
    169:     6 23'--011-1---------------0   ->     1 8'00000010
    170:     6 23'--1-1-----------------0   ->     1 8'00000010
    171:     6 23'--0---011-------------1   ->     1 8'00000010
    172:     6 23'--00-0111-------------1   ->     1 8'00000010
    173:     6 23'--0011111-------------1   ->     1 8'00000010
    174:     6 23'--011-111-------------1   ->     1 8'00000010
    175:     6 23'--1-1--11-------------1   ->     1 8'00000010
    176:     6 23'--0---0-0-------------1   ->     6 8'00000010
    177:     6 23'--00-01-0-------------1   ->     6 8'00000010
    178:     6 23'--00111-0-------------1   ->     6 8'00000010
    179:     6 23'--011-1-0-------------1   ->     6 8'00000010
    180:     6 23'--1-1---0-------------1   ->     6 8'00000010
    181:     6 23'--0---001-------------1   ->     6 8'00000010
    182:     6 23'--00-0101-------------1   ->     6 8'00000010
    183:     6 23'--0011101-------------1   ->     6 8'00000010
    184:     6 23'--011-101-------------1   ->     6 8'00000010
    185:     6 23'--1-1--01-------------1   ->     6 8'00000010

-------------------------------------

FSM `$fsm$\mem_wordsize$3514' from module `alphacore':
-------------------------------------

  Information on FSM $fsm$\mem_wordsize$3514 (\mem_wordsize):

  Number of input signals:   13
  Number of output signals:   3
  Number of state bits:       3

  Input signals:
    0: \resetn
    1: \mem_do_rdata
    2: \mem_do_wdata
    3: \instr_lw
    4: \instr_sb
    5: \instr_sh
    6: \instr_sw
    7: $eq$/openlane/designs/alphacore/src/alphacore.v:1082$440_Y
    8: $logic_or$/openlane/designs/alphacore/src/alphacore.v:1534$584_Y
    9: $logic_or$/openlane/designs/alphacore/src/alphacore.v:1563$592_Y
   10: $logic_or$/openlane/designs/alphacore/src/alphacore.v:1564$593_Y
   11: $procmux$1004_CMP
   12: $procmux$1005_CMP

  Output signals:
    0: $eq$/openlane/designs/alphacore/src/alphacore.v:1600$603_Y
    1: $eq$/openlane/designs/alphacore/src/alphacore.v:1607$610_Y
    2: $procmux$3222_CMP

  State encoding:
    0:      3'--1
    1:      3'-1-
    2:      3'1--

  Transition Table (state_in, ctrl_in, state_out, ctrl_out):
      0:     0 13'------------0   ->     0 3'001
      1:     0 13'-1001----0-01   ->     0 3'001
      2:     0 13'-1--1----1-01   ->     0 3'001
      3:     0 13'-1--1------11   ->     0 3'001
      4:     0 13'1---1-000-0-1   ->     0 3'001
      5:     0 13'1---1-1---0-1   ->     0 3'001
      6:     0 13'1---1-----1-1   ->     0 3'001
      7:     0 13'00---0------1   ->     0 3'001
      8:     0 13'-----1------1   ->     0 3'001
      9:     0 13'-1--0-------1   ->     0 3'001
     10:     0 13'1---0-------1   ->     0 3'001
     11:     0 13'-1-11------01   ->     1 3'001
     12:     0 13'1---1---1-0-1   ->     1 3'001
     13:     0 13'-11-1------01   ->     2 3'001
     14:     0 13'1---1--1--0-1   ->     2 3'001
     15:     1 13'-1--1----1-01   ->     0 3'100
     16:     1 13'1---1-1---0-1   ->     0 3'100
     17:     1 13'-----1------1   ->     0 3'100
     18:     1 13'------------0   ->     1 3'100
     19:     1 13'-1001----0-01   ->     1 3'100
     20:     1 13'-1-11------01   ->     1 3'100
     21:     1 13'-1--1------11   ->     1 3'100
     22:     1 13'1---1-000-0-1   ->     1 3'100
     23:     1 13'1---1---1-0-1   ->     1 3'100
     24:     1 13'1---1-----1-1   ->     1 3'100
     25:     1 13'00---0------1   ->     1 3'100
     26:     1 13'-1--0-------1   ->     1 3'100
     27:     1 13'1---0-------1   ->     1 3'100
     28:     1 13'-11-1------01   ->     2 3'100
     29:     1 13'1---1--1--0-1   ->     2 3'100
     30:     2 13'-1--1----1-01   ->     0 3'010
     31:     2 13'1---1-1---0-1   ->     0 3'010
     32:     2 13'-----1------1   ->     0 3'010
     33:     2 13'-1-11------01   ->     1 3'010
     34:     2 13'1---1---1-0-1   ->     1 3'010
     35:     2 13'------------0   ->     2 3'010
     36:     2 13'-1001----0-01   ->     2 3'010
     37:     2 13'-11-1------01   ->     2 3'010
     38:     2 13'-1--1------11   ->     2 3'010
     39:     2 13'1---1-000-0-1   ->     2 3'010
     40:     2 13'1---1--1--0-1   ->     2 3'010
     41:     2 13'1---1-----1-1   ->     2 3'010
     42:     2 13'00---0------1   ->     2 3'010
     43:     2 13'-1--0-------1   ->     2 3'010
     44:     2 13'1---0-------1   ->     2 3'010

-------------------------------------

24.8. Executing FSM_MAP pass (mapping FSMs to basic logic).
Mapping FSM `$fsm$\cpu_state$3504' from module `\alphacore'.
Mapping FSM `$fsm$\mem_wordsize$3514' from module `\alphacore'.

25. Executing OPT pass (performing simple optimizations).

25.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alphacore.
<suppressed ~5 debug messages>

25.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alphacore'.
<suppressed ~93 debug messages>
Removed a total of 31 cells.

25.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alphacore..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/4 on $pmux $procmux$1261.
    dead port 2/5 on $pmux $procmux$1687.
    dead port 1/3 on $pmux $procmux$1697.
    dead port 2/3 on $pmux $procmux$1697.
    dead port 3/3 on $pmux $procmux$1697.
    dead port 1/3 on $pmux $procmux$1888.
    dead port 1/2 on $mux $procmux$2043.
    dead port 2/2 on $mux $procmux$2043.
    dead port 1/2 on $mux $procmux$2045.
    dead port 2/2 on $mux $procmux$2045.
    dead port 2/5 on $pmux $procmux$725.
    dead port 1/2 on $mux $procmux$809.
    dead port 2/2 on $mux $procmux$809.
    dead port 1/2 on $mux $procmux$826.
    dead port 2/2 on $mux $procmux$826.
Removed 15 multiplexer ports.
<suppressed ~178 debug messages>

25.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alphacore.
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$3492: \cpu_state [5:0]
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$3490: { \cpu_state [6] \cpu_state [4:0] }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$3488: { \cpu_state [6:2] \cpu_state [0] }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$3418: { \cpu_state [6:4] \cpu_state [2:0] }
  Optimizing cells in module \alphacore.
Performed a total of 4 changes.

25.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alphacore'.
Removed a total of 0 cells.

25.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $procdff$3413 ($dff) from module alphacore (D = $logic_and$/openlane/designs/alphacore/src/alphacore.v:142$74_Y, Q = \last_mem_valid, rval = 1'0).
Adding SRST signal on $procdff$3412 ($dff) from module alphacore (D = $procmux$3248_Y, Q = \mem_la_firstword_reg, rval = 1'0).
Adding EN signal on $procdff$3411 ($dff) from module alphacore (D = \mem_rdata_latched [6:0], Q = \mem_rdata_q [6:0]).
Adding EN signal on $procdff$3409 ($dff) from module alphacore (D = $procmux$2880_Y, Q = \mem_16bit_buffer).
Adding SRST signal on $procdff$3408 ($dff) from module alphacore (D = $procmux$2901_Y, Q = \prefetched_high_word, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$4188 ($sdff) from module alphacore (D = $procmux$2892_Y, Q = \prefetched_high_word).
Adding SRST signal on $procdff$3407 ($dff) from module alphacore (D = $procmux$2915_Y, Q = \mem_la_secondword, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$4196 ($sdff) from module alphacore (D = $procmux$2911_Y, Q = \mem_la_secondword).
Adding EN signal on $procdff$3406 ($dff) from module alphacore (D = $0\mem_state[1:0], Q = \mem_state).
Adding EN signal on $procdff$3405 ($dff) from module alphacore (D = $procmux$2950_Y, Q = \mem_wstrb).
Adding EN signal on $procdff$3404 ($dff) from module alphacore (D = \mem_la_wdata, Q = \mem_wdata).
Adding EN signal on $procdff$3403 ($dff) from module alphacore (D = \mem_la_addr, Q = \mem_addr).
Adding EN signal on $procdff$3402 ($dff) from module alphacore (D = $procmux$2970_Y, Q = \mem_instr).
Adding SRST signal on $auto$ff.cc:266:slice$4228 ($dffe) from module alphacore (D = $procmux$2968_Y, Q = \mem_instr, rval = 1'0).
Adding EN signal on $procdff$3401 ($dff) from module alphacore (D = $0\mem_valid[0:0], Q = \mem_valid).
Adding SRST signal on $procdff$3385 ($dff) from module alphacore (D = $reduce_or$/openlane/designs/alphacore/src/alphacore.v:637$152_Y, Q = \is_compare, rval = 1'0).
Adding EN signal on $procdff$3384 ($dff) from module alphacore (D = $procmux$2276_Y, Q = \is_alu_reg_reg).
Adding EN signal on $procdff$3383 ($dff) from module alphacore (D = $procmux$2312_Y, Q = \is_alu_reg_imm).
Adding SRST signal on $procdff$3381 ($dff) from module alphacore (D = $procmux$2324_Y, Q = \is_beq_bne_blt_bge_bltu_bgeu, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$4256 ($sdff) from module alphacore (D = $procmux$2322_Y, Q = \is_beq_bne_blt_bge_bltu_bgeu).
Adding SRST signal on $procdff$3378 ($dff) from module alphacore (D = $reduce_or$/openlane/designs/alphacore/src/alphacore.v:633$148_Y, Q = \is_lui_auipc_jal_jalr_addi_add_sub, rval = 1'0).
Adding EN signal on $procdff$3377 ($dff) from module alphacore (D = $logic_and$/openlane/designs/alphacore/src/alphacore.v:883$398_Y, Q = \is_sll_srl_sra).
Adding EN signal on $procdff$3376 ($dff) from module alphacore (D = $procmux$2337_Y, Q = \is_sb_sh_sw).
Adding EN signal on $procdff$3375 ($dff) from module alphacore (D = $logic_or$/openlane/designs/alphacore/src/alphacore.v:874$387_Y, Q = \is_jalr_addi_slti_sltiu_xori_ori_andi).
Adding EN signal on $procdff$3374 ($dff) from module alphacore (D = $logic_and$/openlane/designs/alphacore/src/alphacore.v:868$378_Y, Q = \is_slli_srli_srai).
Adding EN signal on $procdff$3373 ($dff) from module alphacore (D = $procmux$2357_Y, Q = \is_lb_lh_lw_lbu_lhu).
Adding EN signal on $procdff$3371 ($dff) from module alphacore (D = $procmux$2361_Y, Q = \compressed_instr).
Adding EN signal on $procdff$3370 ($dff) from module alphacore (D = { $procmux$2194_Y $procmux$2407_Y $procmux$2202_Y $procmux$2170_Y $procmux$2190_Y $procmux$2174_Y $procmux$2178_Y $procmux$2186_Y $procmux$2198_Y $procmux$2182_Y 1'0 }, Q = \decoded_imm_j).
Adding EN signal on $procdff$3369 ($dff) from module alphacore (D = $procmux$2370_Y, Q = \decoded_imm).
Adding EN signal on $procdff$3368 ($dff) from module alphacore (D = $procmux$2403_Y, Q = \decoded_rs2).
Adding EN signal on $procdff$3367 ($dff) from module alphacore (D = { $procmux$2166_Y $procmux$2253_Y }, Q = \decoded_rs1).
Adding EN signal on $procdff$3366 ($dff) from module alphacore (D = $procmux$2454_Y, Q = \decoded_rd).
Adding EN signal on $procdff$3365 ($dff) from module alphacore (D = $logic_and$/openlane/designs/alphacore/src/alphacore.v:866$367_Y, Q = \instr_timer).
Adding EN signal on $procdff$3364 ($dff) from module alphacore (D = $logic_and$/openlane/designs/alphacore/src/alphacore.v:645$167_Y, Q = \instr_waitirq).
Adding EN signal on $procdff$3363 ($dff) from module alphacore (D = $logic_and$/openlane/designs/alphacore/src/alphacore.v:865$362_Y, Q = \instr_maskirq).
Adding EN signal on $procdff$3362 ($dff) from module alphacore (D = $logic_and$/openlane/designs/alphacore/src/alphacore.v:644$163_Y, Q = \instr_retirq).
Adding EN signal on $procdff$3361 ($dff) from module alphacore (D = $logic_and$/openlane/designs/alphacore/src/alphacore.v:864$358_Y, Q = \instr_setq).
Adding EN signal on $procdff$3360 ($dff) from module alphacore (D = $logic_and$/openlane/designs/alphacore/src/alphacore.v:863$353_Y, Q = \instr_getq).
Adding SRST signal on $procdff$3359 ($dff) from module alphacore (D = $procmux$2470_Y, Q = \instr_fence, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$4276 ($sdff) from module alphacore (D = $logic_and$/openlane/designs/alphacore/src/alphacore.v:861$348_Y, Q = \instr_fence).
Adding EN signal on $procdff$3358 ($dff) from module alphacore (D = $logic_or$/openlane/designs/alphacore/src/alphacore.v:859$345_Y, Q = \instr_ecall_ebreak).
Adding EN signal on $procdff$3357 ($dff) from module alphacore (D = $logic_and$/openlane/designs/alphacore/src/alphacore.v:857$337_Y, Q = \instr_rdinstrh).
Adding EN signal on $procdff$3356 ($dff) from module alphacore (D = $logic_and$/openlane/designs/alphacore/src/alphacore.v:856$334_Y, Q = \instr_rdinstr).
Adding EN signal on $procdff$3355 ($dff) from module alphacore (D = $logic_or$/openlane/designs/alphacore/src/alphacore.v:854$331_Y, Q = \instr_rdcycleh).
Adding EN signal on $procdff$3354 ($dff) from module alphacore (D = $logic_or$/openlane/designs/alphacore/src/alphacore.v:852$324_Y, Q = \instr_rdcycle).
Adding SRST signal on $procdff$3353 ($dff) from module alphacore (D = $procmux$2484_Y, Q = \instr_and, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$4283 ($sdff) from module alphacore (D = $logic_and$/openlane/designs/alphacore/src/alphacore.v:850$317_Y, Q = \instr_and).
Adding SRST signal on $procdff$3352 ($dff) from module alphacore (D = $procmux$2488_Y, Q = \instr_or, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$4285 ($sdff) from module alphacore (D = $logic_and$/openlane/designs/alphacore/src/alphacore.v:849$313_Y, Q = \instr_or).
Adding SRST signal on $procdff$3351 ($dff) from module alphacore (D = $procmux$2492_Y, Q = \instr_sra, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$4287 ($sdff) from module alphacore (D = $logic_and$/openlane/designs/alphacore/src/alphacore.v:848$309_Y, Q = \instr_sra).
Adding SRST signal on $procdff$3350 ($dff) from module alphacore (D = $procmux$2496_Y, Q = \instr_srl, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$4289 ($sdff) from module alphacore (D = $logic_and$/openlane/designs/alphacore/src/alphacore.v:847$305_Y, Q = \instr_srl).
Adding SRST signal on $procdff$3349 ($dff) from module alphacore (D = $procmux$2500_Y, Q = \instr_xor, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$4291 ($sdff) from module alphacore (D = $logic_and$/openlane/designs/alphacore/src/alphacore.v:846$301_Y, Q = \instr_xor).
Adding SRST signal on $procdff$3348 ($dff) from module alphacore (D = $procmux$2504_Y, Q = \instr_sltu, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$4293 ($sdff) from module alphacore (D = $logic_and$/openlane/designs/alphacore/src/alphacore.v:845$297_Y, Q = \instr_sltu).
Adding SRST signal on $procdff$3347 ($dff) from module alphacore (D = $procmux$2508_Y, Q = \instr_slt, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$4295 ($sdff) from module alphacore (D = $logic_and$/openlane/designs/alphacore/src/alphacore.v:844$293_Y, Q = \instr_slt).
Adding SRST signal on $procdff$3346 ($dff) from module alphacore (D = $procmux$2512_Y, Q = \instr_sll, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$4297 ($sdff) from module alphacore (D = $logic_and$/openlane/designs/alphacore/src/alphacore.v:843$289_Y, Q = \instr_sll).
Adding SRST signal on $procdff$3345 ($dff) from module alphacore (D = $procmux$2516_Y, Q = \instr_sub, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$4299 ($sdff) from module alphacore (D = $logic_and$/openlane/designs/alphacore/src/alphacore.v:842$285_Y, Q = \instr_sub).
Adding SRST signal on $procdff$3344 ($dff) from module alphacore (D = $procmux$2520_Y, Q = \instr_add, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$4301 ($sdff) from module alphacore (D = $logic_and$/openlane/designs/alphacore/src/alphacore.v:841$281_Y, Q = \instr_add).
Adding EN signal on $procdff$3343 ($dff) from module alphacore (D = $logic_and$/openlane/designs/alphacore/src/alphacore.v:839$277_Y, Q = \instr_srai).
Adding EN signal on $procdff$3342 ($dff) from module alphacore (D = $logic_and$/openlane/designs/alphacore/src/alphacore.v:838$273_Y, Q = \instr_srli).
Adding EN signal on $procdff$3341 ($dff) from module alphacore (D = $logic_and$/openlane/designs/alphacore/src/alphacore.v:837$269_Y, Q = \instr_slli).
Adding SRST signal on $procdff$3340 ($dff) from module alphacore (D = $procmux$2530_Y, Q = \instr_andi, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$4306 ($sdff) from module alphacore (D = $logic_and$/openlane/designs/alphacore/src/alphacore.v:835$265_Y, Q = \instr_andi).
Adding SRST signal on $procdff$3339 ($dff) from module alphacore (D = $procmux$2534_Y, Q = \instr_ori, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$4308 ($sdff) from module alphacore (D = $logic_and$/openlane/designs/alphacore/src/alphacore.v:834$263_Y, Q = \instr_ori).
Adding SRST signal on $procdff$3338 ($dff) from module alphacore (D = $procmux$2538_Y, Q = \instr_xori, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$4310 ($sdff) from module alphacore (D = $logic_and$/openlane/designs/alphacore/src/alphacore.v:833$261_Y, Q = \instr_xori).
Adding SRST signal on $procdff$3337 ($dff) from module alphacore (D = $procmux$2542_Y, Q = \instr_sltiu, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$4312 ($sdff) from module alphacore (D = $logic_and$/openlane/designs/alphacore/src/alphacore.v:832$259_Y, Q = \instr_sltiu).
Adding SRST signal on $procdff$3336 ($dff) from module alphacore (D = $procmux$2546_Y, Q = \instr_slti, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$4314 ($sdff) from module alphacore (D = $logic_and$/openlane/designs/alphacore/src/alphacore.v:831$257_Y, Q = \instr_slti).
Adding SRST signal on $procdff$3335 ($dff) from module alphacore (D = $procmux$2550_Y, Q = \instr_addi, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$4316 ($sdff) from module alphacore (D = $logic_and$/openlane/designs/alphacore/src/alphacore.v:830$255_Y, Q = \instr_addi).
Adding EN signal on $procdff$3334 ($dff) from module alphacore (D = $logic_and$/openlane/designs/alphacore/src/alphacore.v:828$253_Y, Q = \instr_sw).
Adding EN signal on $procdff$3333 ($dff) from module alphacore (D = $logic_and$/openlane/designs/alphacore/src/alphacore.v:827$251_Y, Q = \instr_sh).
Adding EN signal on $procdff$3332 ($dff) from module alphacore (D = $logic_and$/openlane/designs/alphacore/src/alphacore.v:826$249_Y, Q = \instr_sb).
Adding EN signal on $procdff$3331 ($dff) from module alphacore (D = $logic_and$/openlane/designs/alphacore/src/alphacore.v:824$247_Y, Q = \instr_lhu).
Adding EN signal on $procdff$3330 ($dff) from module alphacore (D = $logic_and$/openlane/designs/alphacore/src/alphacore.v:823$245_Y, Q = \instr_lbu).
Adding EN signal on $procdff$3329 ($dff) from module alphacore (D = $logic_and$/openlane/designs/alphacore/src/alphacore.v:822$243_Y, Q = \instr_lw).
Adding EN signal on $procdff$3328 ($dff) from module alphacore (D = $logic_and$/openlane/designs/alphacore/src/alphacore.v:821$241_Y, Q = \instr_lh).
Adding EN signal on $procdff$3327 ($dff) from module alphacore (D = $logic_and$/openlane/designs/alphacore/src/alphacore.v:820$239_Y, Q = \instr_lb).
Adding SRST signal on $procdff$3326 ($dff) from module alphacore (D = $procmux$2570_Y, Q = \instr_bgeu, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$4326 ($sdff) from module alphacore (D = $logic_and$/openlane/designs/alphacore/src/alphacore.v:818$237_Y, Q = \instr_bgeu).
Adding SRST signal on $procdff$3325 ($dff) from module alphacore (D = $procmux$2574_Y, Q = \instr_bltu, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$4328 ($sdff) from module alphacore (D = $logic_and$/openlane/designs/alphacore/src/alphacore.v:817$235_Y, Q = \instr_bltu).
Adding SRST signal on $procdff$3324 ($dff) from module alphacore (D = $procmux$2578_Y, Q = \instr_bge, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$4330 ($sdff) from module alphacore (D = $logic_and$/openlane/designs/alphacore/src/alphacore.v:816$233_Y, Q = \instr_bge).
Adding SRST signal on $procdff$3323 ($dff) from module alphacore (D = $procmux$2582_Y, Q = \instr_blt, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$4332 ($sdff) from module alphacore (D = $logic_and$/openlane/designs/alphacore/src/alphacore.v:815$231_Y, Q = \instr_blt).
Adding SRST signal on $procdff$3322 ($dff) from module alphacore (D = $procmux$2586_Y, Q = \instr_bne, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$4334 ($sdff) from module alphacore (D = $logic_and$/openlane/designs/alphacore/src/alphacore.v:814$229_Y, Q = \instr_bne).
Adding SRST signal on $procdff$3321 ($dff) from module alphacore (D = $procmux$2590_Y, Q = \instr_beq, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$4336 ($sdff) from module alphacore (D = $logic_and$/openlane/designs/alphacore/src/alphacore.v:813$227_Y, Q = \instr_beq).
Adding EN signal on $procdff$3320 ($dff) from module alphacore (D = $procmux$2603_Y, Q = \instr_jalr).
Adding EN signal on $procdff$3319 ($dff) from module alphacore (D = $procmux$2615_Y, Q = \instr_jal).
Adding EN signal on $procdff$3318 ($dff) from module alphacore (D = $eq$/openlane/designs/alphacore/src/alphacore.v:641$155_Y, Q = \instr_auipc).
Adding EN signal on $procdff$3317 ($dff) from module alphacore (D = $procmux$2635_Y, Q = \instr_lui).
Adding EN signal on $procdff$3316 ($dff) from module alphacore (D = 32'x, Q = \cpi_insn).
Adding SRST signal on $procdff$3310 ($dff) from module alphacore (D = $procmux$1072_Y, Q = \do_waitirq, rval = 1'0).
Adding EN signal on $procdff$3308 ($dff) from module alphacore (D = 1'0, Q = \cpi_timeout).
Adding EN signal on $procdff$3306 ($dff) from module alphacore (D = $procmux$1305_Y, Q = \latched_rd).
Adding SRST signal on $procdff$3305 ($dff) from module alphacore (D = $procmux$1321_Y, Q = \latched_is_lb, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$4360 ($sdff) from module alphacore (D = $procmux$1321_Y, Q = \latched_is_lb).
Adding SRST signal on $procdff$3304 ($dff) from module alphacore (D = $procmux$1334_Y, Q = \latched_is_lh, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$4370 ($sdff) from module alphacore (D = $procmux$1334_Y, Q = \latched_is_lh).
Adding SRST signal on $procdff$3303 ($dff) from module alphacore (D = $procmux$1347_Y, Q = \latched_is_lu, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$4380 ($sdff) from module alphacore (D = $procmux$1347_Y, Q = \latched_is_lu).
Adding SRST signal on $procdff$3302 ($dff) from module alphacore (D = $procmux$1362_Y, Q = \latched_trace, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$4390 ($sdff) from module alphacore (D = 1'0, Q = \latched_trace).
Adding EN signal on $procdff$3301 ($dff) from module alphacore (D = \compressed_instr, Q = \latched_compr).
Adding SRST signal on $procdff$3300 ($dff) from module alphacore (D = $procmux$1392_Y, Q = \latched_branch, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$4399 ($sdff) from module alphacore (D = $procmux$1392_Y, Q = \latched_branch).
Adding SRST signal on $procdff$3299 ($dff) from module alphacore (D = $procmux$1428_Y, Q = \latched_stalu, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$4407 ($sdff) from module alphacore (D = $procmux$1428_Y, Q = \latched_stalu).
Adding SRST signal on $procdff$3298 ($dff) from module alphacore (D = $procmux$1435_Y, Q = \latched_store, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$4415 ($sdff) from module alphacore (D = $procmux$1435_Y, Q = \latched_store).
Adding SRST signal on $procdff$3294 ($dff) from module alphacore (D = $procmux$1478_Y, Q = \irq_state, rval = 2'00).
Adding EN signal on $auto$ff.cc:266:slice$4423 ($sdff) from module alphacore (D = $ternary$/openlane/designs/alphacore/src/alphacore.v:1275$512_Y, Q = \irq_state).
Adding SRST signal on $procdff$3287 ($dff) from module alphacore (D = $procmux$1086_Y, Q = \decoder_pseudo_trigger, rval = 1'0).
Adding SRST signal on $procdff$3284 ($dff) from module alphacore (D = $procmux$1673_Y, Q = \mem_do_wdata, rval = 1'1).
Adding EN signal on $auto$ff.cc:266:slice$4430 ($sdff) from module alphacore (D = 1'0, Q = \mem_do_wdata).
Adding SRST signal on $procdff$3283 ($dff) from module alphacore (D = $procmux$1677_Y, Q = \mem_do_rdata, rval = 1'1).
Adding EN signal on $auto$ff.cc:266:slice$4432 ($sdff) from module alphacore (D = 1'0, Q = \mem_do_rdata).
Adding SRST signal on $procdff$3282 ($dff) from module alphacore (D = $procmux$1743_Y, Q = \mem_do_rinst, rval = 1'1).
Adding EN signal on $auto$ff.cc:266:slice$4434 ($sdff) from module alphacore (D = $procmux$1743_Y, Q = \mem_do_rinst).
Adding SRST signal on $procdff$3281 ($dff) from module alphacore (D = $procmux$1768_Y, Q = \mem_do_prefetch, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$4450 ($sdff) from module alphacore (D = $logic_and$/openlane/designs/alphacore/src/alphacore.v:1308$526_Y, Q = \mem_do_prefetch).
Adding SRST signal on $procdff$3279 ($dff) from module alphacore (D = $procmux$1816_Y, Q = \timer, rval = 0).
Adding SRST signal on $procdff$3277 ($dff) from module alphacore (D = $procmux$1834_Y, Q = \irq_mask, rval = 32'11111111111111111111111111111111).
Adding EN signal on $auto$ff.cc:266:slice$4461 ($sdff) from module alphacore (D = \cpuregs_rs1, Q = \irq_mask).
Adding SRST signal on $procdff$3276 ($dff) from module alphacore (D = $procmux$1853_Y, Q = \irq_active, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$4465 ($sdff) from module alphacore (D = $procmux$1853_Y, Q = \irq_active).
Adding SRST signal on $procdff$3275 ($dff) from module alphacore (D = $procmux$1878_Y, Q = \irq_delay, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$4475 ($sdff) from module alphacore (D = \irq_active, Q = \irq_delay).
Adding EN signal on $procdff$3272 ($dff) from module alphacore (D = $procmux$1891_Y, Q = \reg_op2).
Adding EN signal on $procdff$3271 ($dff) from module alphacore (D = $procmux$1912_Y [31], Q = \reg_op1 [31]).
Adding EN signal on $procdff$3271 ($dff) from module alphacore (D = $procmux$1912_Y [30:0], Q = \reg_op1 [30:0]).
Adding SRST signal on $procdff$3270 ($dff) from module alphacore (D = $procmux$1974_Y, Q = \reg_next_pc, rval = 0).
Adding EN signal on $auto$ff.cc:266:slice$4528 ($sdff) from module alphacore (D = $procmux$1972_Y, Q = \reg_next_pc).
Adding SRST signal on $procdff$3269 ($dff) from module alphacore (D = $procmux$1986_Y, Q = \reg_pc, rval = 0).
Adding EN signal on $auto$ff.cc:266:slice$4530 ($sdff) from module alphacore (D = $3\current_pc[31:0], Q = \reg_pc).
Adding SRST signal on $procdff$3268 ($dff) from module alphacore (D = $procmux$2006_Y, Q = \count_instr, rval = 64'0000000000000000000000000000000000000000000000000000000000000000).
Adding EN signal on $auto$ff.cc:266:slice$4532 ($sdff) from module alphacore (D = $add$/openlane/designs/alphacore/src/alphacore.v:1299$522_Y, Q = \count_instr).
Adding SRST signal on $procdff$3267 ($dff) from module alphacore (D = $add$/openlane/designs/alphacore/src/alphacore.v:1168$468_Y, Q = \count_cycle, rval = 64'0000000000000000000000000000000000000000000000000000000000000000).
Adding SRST signal on $procdff$3265 ($dff) from module alphacore (D = $procmux$1056_Y, Q = \trace_valid, rval = 1'0).
Adding SRST signal on $procdff$3264 ($dff) from module alphacore (D = $procmux$2025_Y, Q = \eoi, rval = 0).
Adding EN signal on $auto$ff.cc:266:slice$4544 ($sdff) from module alphacore (D = $procmux$2025_Y, Q = \eoi).
Adding SRST signal on $procdff$3263 ($dff) from module alphacore (D = $procmux$2047_Y, Q = \cpi_valid, rval = 1'0).
Adding SRST signal on $procdff$3262 ($dff) from module alphacore (D = $procmux$1287_Y, Q = \trap, rval = 1'0).
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$4391 ($sdffe) from module alphacore.
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$4352 ($dffe) from module alphacore.
Setting constant 1-bit at position 0 on $auto$ff.cc:266:slice$4342 ($dffe) from module alphacore.
Setting constant 1-bit at position 1 on $auto$ff.cc:266:slice$4342 ($dffe) from module alphacore.
Setting constant 1-bit at position 2 on $auto$ff.cc:266:slice$4342 ($dffe) from module alphacore.
Setting constant 1-bit at position 3 on $auto$ff.cc:266:slice$4342 ($dffe) from module alphacore.
Setting constant 1-bit at position 4 on $auto$ff.cc:266:slice$4342 ($dffe) from module alphacore.
Setting constant 1-bit at position 5 on $auto$ff.cc:266:slice$4342 ($dffe) from module alphacore.
Setting constant 1-bit at position 6 on $auto$ff.cc:266:slice$4342 ($dffe) from module alphacore.
Setting constant 1-bit at position 7 on $auto$ff.cc:266:slice$4342 ($dffe) from module alphacore.
Setting constant 1-bit at position 8 on $auto$ff.cc:266:slice$4342 ($dffe) from module alphacore.
Setting constant 1-bit at position 9 on $auto$ff.cc:266:slice$4342 ($dffe) from module alphacore.
Setting constant 1-bit at position 10 on $auto$ff.cc:266:slice$4342 ($dffe) from module alphacore.
Setting constant 1-bit at position 11 on $auto$ff.cc:266:slice$4342 ($dffe) from module alphacore.
Setting constant 1-bit at position 12 on $auto$ff.cc:266:slice$4342 ($dffe) from module alphacore.
Setting constant 1-bit at position 13 on $auto$ff.cc:266:slice$4342 ($dffe) from module alphacore.
Setting constant 1-bit at position 14 on $auto$ff.cc:266:slice$4342 ($dffe) from module alphacore.
Setting constant 1-bit at position 15 on $auto$ff.cc:266:slice$4342 ($dffe) from module alphacore.
Setting constant 1-bit at position 16 on $auto$ff.cc:266:slice$4342 ($dffe) from module alphacore.
Setting constant 1-bit at position 17 on $auto$ff.cc:266:slice$4342 ($dffe) from module alphacore.
Setting constant 1-bit at position 18 on $auto$ff.cc:266:slice$4342 ($dffe) from module alphacore.
Setting constant 1-bit at position 19 on $auto$ff.cc:266:slice$4342 ($dffe) from module alphacore.
Setting constant 1-bit at position 20 on $auto$ff.cc:266:slice$4342 ($dffe) from module alphacore.
Setting constant 1-bit at position 21 on $auto$ff.cc:266:slice$4342 ($dffe) from module alphacore.
Setting constant 1-bit at position 22 on $auto$ff.cc:266:slice$4342 ($dffe) from module alphacore.
Setting constant 1-bit at position 23 on $auto$ff.cc:266:slice$4342 ($dffe) from module alphacore.
Setting constant 1-bit at position 24 on $auto$ff.cc:266:slice$4342 ($dffe) from module alphacore.
Setting constant 1-bit at position 25 on $auto$ff.cc:266:slice$4342 ($dffe) from module alphacore.
Setting constant 1-bit at position 26 on $auto$ff.cc:266:slice$4342 ($dffe) from module alphacore.
Setting constant 1-bit at position 27 on $auto$ff.cc:266:slice$4342 ($dffe) from module alphacore.
Setting constant 1-bit at position 28 on $auto$ff.cc:266:slice$4342 ($dffe) from module alphacore.
Setting constant 1-bit at position 29 on $auto$ff.cc:266:slice$4342 ($dffe) from module alphacore.
Setting constant 1-bit at position 30 on $auto$ff.cc:266:slice$4342 ($dffe) from module alphacore.
Setting constant 1-bit at position 31 on $auto$ff.cc:266:slice$4342 ($dffe) from module alphacore.
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$4265 ($dffe) from module alphacore.

25.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alphacore..
Removed 202 unused cells and 244 unused wires.
<suppressed ~204 debug messages>

25.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module alphacore.
<suppressed ~21 debug messages>

25.9. Rerunning OPT passes. (Maybe there is more to do..)

25.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alphacore..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $procmux$1039.
    dead port 2/2 on $mux $procmux$1039.
Removed 2 multiplexer ports.
<suppressed ~103 debug messages>

25.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alphacore.
Performed a total of 0 changes.

25.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alphacore'.
<suppressed ~111 debug messages>
Removed a total of 37 cells.

25.13. Executing OPT_DFF pass (perform DFF optimizations).
Handling D = Q on $auto$ff.cc:266:slice$4554 ($sdff) from module alphacore (conecting SRST instead).
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$4554 ($dffe) from module alphacore.
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$4541 ($sdff) from module alphacore.
Setting constant 1-bit at position 0 on $procdff$3266 ($dff) from module alphacore.
Setting constant 1-bit at position 1 on $procdff$3266 ($dff) from module alphacore.
Setting constant 1-bit at position 2 on $procdff$3266 ($dff) from module alphacore.
Setting constant 1-bit at position 3 on $procdff$3266 ($dff) from module alphacore.
Setting constant 1-bit at position 4 on $procdff$3266 ($dff) from module alphacore.
Setting constant 1-bit at position 5 on $procdff$3266 ($dff) from module alphacore.
Setting constant 1-bit at position 6 on $procdff$3266 ($dff) from module alphacore.
Setting constant 1-bit at position 7 on $procdff$3266 ($dff) from module alphacore.
Setting constant 1-bit at position 8 on $procdff$3266 ($dff) from module alphacore.
Setting constant 1-bit at position 9 on $procdff$3266 ($dff) from module alphacore.
Setting constant 1-bit at position 10 on $procdff$3266 ($dff) from module alphacore.
Setting constant 1-bit at position 11 on $procdff$3266 ($dff) from module alphacore.
Setting constant 1-bit at position 12 on $procdff$3266 ($dff) from module alphacore.
Setting constant 1-bit at position 13 on $procdff$3266 ($dff) from module alphacore.
Setting constant 1-bit at position 14 on $procdff$3266 ($dff) from module alphacore.
Setting constant 1-bit at position 15 on $procdff$3266 ($dff) from module alphacore.
Setting constant 1-bit at position 16 on $procdff$3266 ($dff) from module alphacore.
Setting constant 1-bit at position 17 on $procdff$3266 ($dff) from module alphacore.
Setting constant 1-bit at position 18 on $procdff$3266 ($dff) from module alphacore.
Setting constant 1-bit at position 19 on $procdff$3266 ($dff) from module alphacore.
Setting constant 1-bit at position 20 on $procdff$3266 ($dff) from module alphacore.
Setting constant 1-bit at position 21 on $procdff$3266 ($dff) from module alphacore.
Setting constant 1-bit at position 22 on $procdff$3266 ($dff) from module alphacore.
Setting constant 1-bit at position 23 on $procdff$3266 ($dff) from module alphacore.
Setting constant 1-bit at position 24 on $procdff$3266 ($dff) from module alphacore.
Setting constant 1-bit at position 25 on $procdff$3266 ($dff) from module alphacore.
Setting constant 1-bit at position 26 on $procdff$3266 ($dff) from module alphacore.
Setting constant 1-bit at position 27 on $procdff$3266 ($dff) from module alphacore.
Setting constant 1-bit at position 28 on $procdff$3266 ($dff) from module alphacore.
Setting constant 1-bit at position 29 on $procdff$3266 ($dff) from module alphacore.
Setting constant 1-bit at position 30 on $procdff$3266 ($dff) from module alphacore.
Setting constant 1-bit at position 31 on $procdff$3266 ($dff) from module alphacore.
Setting constant 1-bit at position 32 on $procdff$3266 ($dff) from module alphacore.
Setting constant 1-bit at position 33 on $procdff$3266 ($dff) from module alphacore.
Setting constant 1-bit at position 34 on $procdff$3266 ($dff) from module alphacore.
Setting constant 1-bit at position 35 on $procdff$3266 ($dff) from module alphacore.

25.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alphacore..
Removed 4 unused cells and 48 unused wires.
<suppressed ~5 debug messages>

25.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module alphacore.

25.16. Rerunning OPT passes. (Maybe there is more to do..)

25.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alphacore..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~102 debug messages>

25.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alphacore.
Performed a total of 0 changes.

25.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alphacore'.
Removed a total of 0 cells.

25.20. Executing OPT_DFF pass (perform DFF optimizations).

25.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alphacore..

25.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module alphacore.

25.23. Finished OPT passes. (There is nothing left to do.)

26. Executing WREDUCE pass (reducing word size of cells).
Removed top 3 bits (of 4) from port A of cell alphacore.$shl$/openlane/designs/alphacore/src/alphacore.v:164$77 ($shl).
Removed top 3 bits (of 5) from port B of cell alphacore.$eq$/openlane/designs/alphacore/src/alphacore.v:210$81 ($eq).
Removed top 1 bits (of 2) from port B of cell alphacore.$eq$/openlane/designs/alphacore/src/alphacore.v:223$83 ($eq).
Removed top 1 bits (of 3) from port B of cell alphacore.$eq$/openlane/designs/alphacore/src/alphacore.v:231$85 ($eq).
Removed top 1 bits (of 2) from port B of cell alphacore.$eq$/openlane/designs/alphacore/src/alphacore.v:233$87 ($eq).
Removed top 1 bits (of 7) from mux cell alphacore.$ternary$/openlane/designs/alphacore/src/alphacore.v:236$91 ($mux).
Removed top 3 bits (of 7) from port B of cell alphacore.$auto$fsm_map.cc:77:implement_pattern_cache$3625 ($eq).
Removed top 2 bits (of 5) from port B of cell alphacore.$auto$fsm_map.cc:77:implement_pattern_cache$3741 ($eq).
Removed top 1 bits (of 7) from port B of cell alphacore.$auto$fsm_map.cc:77:implement_pattern_cache$3759 ($eq).
Removed top 30 bits (of 32) from mux cell alphacore.$ternary$/openlane/designs/alphacore/src/alphacore.v:362$135 ($mux).
Removed top 1 bits (of 6) from port B of cell alphacore.$auto$fsm_map.cc:77:implement_pattern_cache$3713 ($eq).
Removed top 1 bits (of 7) from port B of cell alphacore.$eq$/openlane/designs/alphacore/src/alphacore.v:640$154 ($eq).
Removed top 2 bits (of 7) from port B of cell alphacore.$eq$/openlane/designs/alphacore/src/alphacore.v:641$155 ($eq).
Removed top 3 bits (of 7) from port B of cell alphacore.$eq$/openlane/designs/alphacore/src/alphacore.v:644$160 ($eq).
Removed top 5 bits (of 7) from port B of cell alphacore.$eq$/openlane/designs/alphacore/src/alphacore.v:644$161 ($eq).
Removed top 4 bits (of 7) from port B of cell alphacore.$eq$/openlane/designs/alphacore/src/alphacore.v:645$165 ($eq).
Removed top 5 bits (of 7) from port B of cell alphacore.$eq$/openlane/designs/alphacore/src/alphacore.v:648$169 ($eq).
Removed top 1 bits (of 7) from port B of cell alphacore.$eq$/openlane/designs/alphacore/src/alphacore.v:649$170 ($eq).
Removed top 2 bits (of 7) from port B of cell alphacore.$eq$/openlane/designs/alphacore/src/alphacore.v:650$171 ($eq).
Removed top 1 bits (of 7) from port B of cell alphacore.$eq$/openlane/designs/alphacore/src/alphacore.v:651$172 ($eq).
Removed top 2 bits (of 8) from port B of cell alphacore.$auto$fsm_map.cc:77:implement_pattern_cache$3629 ($eq).
Removed top 28 bits (of 32) from port A of cell alphacore.$add$/openlane/designs/alphacore/src/alphacore.v:681$185 ($add).
Removed top 27 bits (of 32) from port Y of cell alphacore.$add$/openlane/designs/alphacore/src/alphacore.v:681$185 ($add).
Removed top 28 bits (of 32) from port A of cell alphacore.$add$/openlane/designs/alphacore/src/alphacore.v:685$186 ($add).
Removed top 27 bits (of 32) from port Y of cell alphacore.$add$/openlane/designs/alphacore/src/alphacore.v:685$186 ($add).
Removed top 2 bits (of 10) from port B of cell alphacore.$auto$fsm_map.cc:77:implement_pattern_cache$3609 ($eq).
Removed top 1 bits (of 9) from port B of cell alphacore.$auto$fsm_map.cc:77:implement_pattern_cache$3613 ($eq).
Removed top 1 bits (of 7) from port B of cell alphacore.$auto$fsm_map.cc:77:implement_pattern_cache$3633 ($eq).
Removed top 2 bits (of 3) from port B of cell alphacore.$eq$/openlane/designs/alphacore/src/alphacore.v:814$228 ($eq).
Removed top 1 bits (of 3) from port B of cell alphacore.$eq$/openlane/designs/alphacore/src/alphacore.v:822$242 ($eq).
Removed top 5 bits (of 6) from port B of cell alphacore.$auto$fsm_map.cc:77:implement_pattern_cache$3641 ($eq).
Removed top 3 bits (of 8) from port B of cell alphacore.$auto$fsm_map.cc:77:implement_pattern_cache$3645 ($eq).
Removed top 1 bits (of 3) from port B of cell alphacore.$eq$/openlane/designs/alphacore/src/alphacore.v:832$258 ($eq).
Removed top 2 bits (of 9) from port B of cell alphacore.$auto$fsm_map.cc:77:implement_pattern_cache$3649 ($eq).
Removed top 1 bits (of 7) from port B of cell alphacore.$eq$/openlane/designs/alphacore/src/alphacore.v:839$276 ($eq).
Removed top 1 bits (of 8) from port B of cell alphacore.$auto$fsm_map.cc:77:implement_pattern_cache$3653 ($eq).
Removed top 2 bits (of 4) from port B of cell alphacore.$auto$fsm_map.cc:77:implement_pattern_cache$3721 ($eq).
Removed top 3 bits (of 4) from port B of cell alphacore.$auto$fsm_map.cc:77:implement_pattern_cache$3661 ($eq).
Removed top 3 bits (of 6) from port B of cell alphacore.$auto$fsm_map.cc:77:implement_pattern_cache$3665 ($eq).
Removed top 2 bits (of 7) from port B of cell alphacore.$auto$fsm_map.cc:77:implement_pattern_cache$3669 ($eq).
Removed top 1 bits (of 6) from port B of cell alphacore.$auto$fsm_map.cc:77:implement_pattern_cache$3673 ($eq).
Removed top 3 bits (of 7) from port B of cell alphacore.$eq$/openlane/designs/alphacore/src/alphacore.v:861$346 ($eq).
Removed top 3 bits (of 7) from port B of cell alphacore.$eq$/openlane/designs/alphacore/src/alphacore.v:863$349 ($eq).
Removed top 6 bits (of 7) from port B of cell alphacore.$eq$/openlane/designs/alphacore/src/alphacore.v:864$355 ($eq).
Removed top 2 bits (of 5) from port B of cell alphacore.$auto$fsm_map.cc:77:implement_pattern_cache$3681 ($eq).
Removed top 5 bits (of 7) from port B of cell alphacore.$eq$/openlane/designs/alphacore/src/alphacore.v:865$360 ($eq).
Removed top 4 bits (of 7) from port B of cell alphacore.$eq$/openlane/designs/alphacore/src/alphacore.v:866$364 ($eq).
Removed top 3 bits (of 7) from port B of cell alphacore.$auto$fsm_map.cc:77:implement_pattern_cache$3685 ($eq).
Removed top 1 bits (of 7) from port B of cell alphacore.$auto$fsm_map.cc:77:implement_pattern_cache$3693 ($eq).
Removed top 2 bits (of 8) from port B of cell alphacore.$auto$fsm_map.cc:77:implement_pattern_cache$3689 ($eq).
Removed top 3 bits (of 6) from port B of cell alphacore.$auto$fsm_map.cc:77:implement_pattern_cache$3725 ($eq).
Removed top 3 bits (of 9) from port B of cell alphacore.$auto$fsm_map.cc:77:implement_pattern_cache$3605 ($eq).
Removed top 29 bits (of 32) from mux cell alphacore.$ternary$/openlane/designs/alphacore/src/alphacore.v:1086$441 ($mux).
Removed top 29 bits (of 32) from port B of cell alphacore.$add$/openlane/designs/alphacore/src/alphacore.v:1086$442 ($add).
Removed top 31 bits (of 32) from port B of cell alphacore.$add$/openlane/designs/alphacore/src/alphacore.v:1168$468 ($add).
Removed top 31 bits (of 32) from port B of cell alphacore.$sub$/openlane/designs/alphacore/src/alphacore.v:1178$473 ($sub).
Removed top 2 bits (of 4) from port B of cell alphacore.$auto$fsm_map.cc:77:implement_pattern_cache$3701 ($eq).
Removed top 2 bits (of 5) from port B of cell alphacore.$auto$fsm_map.cc:77:implement_pattern_cache$3621 ($eq).
Removed top 1 bits (of 2) from port B of cell alphacore.$eq$/openlane/designs/alphacore/src/alphacore.v:1276$510 ($eq).
Removed top 29 bits (of 32) from mux cell alphacore.$ternary$/openlane/designs/alphacore/src/alphacore.v:1281$513 ($mux).
Removed top 29 bits (of 32) from mux cell alphacore.$ternary$/openlane/designs/alphacore/src/alphacore.v:1287$518 ($mux).
Removed top 29 bits (of 32) from port B of cell alphacore.$add$/openlane/designs/alphacore/src/alphacore.v:1287$519 ($add).
Removed top 31 bits (of 32) from port B of cell alphacore.$add$/openlane/designs/alphacore/src/alphacore.v:1299$522 ($add).
Removed top 2 bits (of 7) from port B of cell alphacore.$auto$fsm_map.cc:77:implement_pattern_cache$3729 ($eq).
Removed top 3 bits (of 6) from port B of cell alphacore.$auto$fsm_map.cc:77:implement_pattern_cache$3705 ($eq).
Removed top 3 bits (of 7) from port B of cell alphacore.$auto$fsm_map.cc:77:implement_pattern_cache$3747 ($eq).
Removed top 29 bits (of 32) from port B of cell alphacore.$ge$/openlane/designs/alphacore/src/alphacore.v:1512$567 ($ge).
Removed top 1 bits (of 3) from port B of cell alphacore.$auto$opt_dff.cc:195:make_patterns_logic$4183 ($ne).
Removed top 29 bits (of 32) from port B of cell alphacore.$sub$/openlane/designs/alphacore/src/alphacore.v:1519$575 ($sub).
Removed top 27 bits (of 32) from port Y of cell alphacore.$sub$/openlane/designs/alphacore/src/alphacore.v:1519$575 ($sub).
Removed top 2 bits (of 8) from port B of cell alphacore.$auto$fsm_map.cc:77:implement_pattern_cache$3753 ($eq).
Removed top 31 bits (of 32) from port B of cell alphacore.$sub$/openlane/designs/alphacore/src/alphacore.v:1527$582 ($sub).
Removed top 27 bits (of 32) from port Y of cell alphacore.$sub$/openlane/designs/alphacore/src/alphacore.v:1527$582 ($sub).
Removed top 1 bits (of 6) from port B of cell alphacore.$auto$fsm_map.cc:77:implement_pattern_cache$3733 ($eq).
Removed top 2 bits (of 7) from port B of cell alphacore.$auto$fsm_map.cc:77:implement_pattern_cache$3709 ($eq).
Removed top 1 bits (of 33) from port Y of cell alphacore.$sshr$/openlane/designs/alphacore/src/alphacore.v:1018$636 ($sshr).
Removed top 2 bits (of 7) from port B of cell alphacore.$auto$fsm_map.cc:77:implement_pattern_cache$4024 ($eq).
Removed top 3 bits (of 4) from port B of cell alphacore.$auto$fsm_map.cc:77:implement_pattern_cache$4161 ($eq).
Removed top 3 bits (of 5) from port B of cell alphacore.$auto$fsm_map.cc:77:implement_pattern_cache$3524 ($eq).
Removed top 1 bits (of 6) from port B of cell alphacore.$auto$fsm_map.cc:77:implement_pattern_cache$4028 ($eq).
Removed top 3 bits (of 5) from port B of cell alphacore.$auto$fsm_map.cc:77:implement_pattern_cache$4036 ($eq).
Removed top 3 bits (of 7) from port B of cell alphacore.$auto$fsm_map.cc:77:implement_pattern_cache$4040 ($eq).
Removed top 2 bits (of 8) from port B of cell alphacore.$auto$fsm_map.cc:77:implement_pattern_cache$4044 ($eq).
Removed top 1 bits (of 7) from port B of cell alphacore.$auto$fsm_map.cc:77:implement_pattern_cache$4048 ($eq).
Removed top 1 bits (of 2) from port B of cell alphacore.$auto$opt_dff.cc:195:make_patterns_logic$4246 ($ne).
Removed top 2 bits (of 4) from port B of cell alphacore.$auto$opt_dff.cc:195:make_patterns_logic$4206 ($ne).
Removed top 3 bits (of 7) from port B of cell alphacore.$auto$fsm_map.cc:77:implement_pattern_cache$3528 ($eq).
Removed top 4 bits (of 7) from port B of cell alphacore.$auto$fsm_map.cc:77:implement_pattern_cache$3601 ($eq).
Removed top 4 bits (of 7) from port B of cell alphacore.$auto$fsm_map.cc:77:implement_pattern_cache$3792 ($eq).
Removed top 3 bits (of 9) from port B of cell alphacore.$auto$fsm_map.cc:77:implement_pattern_cache$3796 ($eq).
Removed top 2 bits (of 10) from port B of cell alphacore.$auto$fsm_map.cc:77:implement_pattern_cache$3800 ($eq).
Removed top 1 bits (of 9) from port B of cell alphacore.$auto$fsm_map.cc:77:implement_pattern_cache$3804 ($eq).
Removed top 2 bits (of 8) from port B of cell alphacore.$auto$fsm_map.cc:77:implement_pattern_cache$3532 ($eq).
Removed top 1 bits (of 7) from port B of cell alphacore.$auto$fsm_map.cc:77:implement_pattern_cache$3593 ($eq).
Removed top 2 bits (of 5) from port B of cell alphacore.$auto$fsm_map.cc:77:implement_pattern_cache$3813 ($eq).
Removed top 1 bits (of 7) from port B of cell alphacore.$auto$fsm_map.cc:77:implement_pattern_cache$3536 ($eq).
Removed top 2 bits (of 8) from port B of cell alphacore.$auto$fsm_map.cc:77:implement_pattern_cache$3589 ($eq).
Removed top 3 bits (of 7) from port B of cell alphacore.$auto$fsm_map.cc:77:implement_pattern_cache$3817 ($eq).
Removed top 3 bits (of 7) from port B of cell alphacore.$auto$fsm_map.cc:77:implement_pattern_cache$3585 ($eq).
Removed top 2 bits (of 3) from port B of cell alphacore.$auto$fsm_map.cc:77:implement_pattern_cache$3544 ($eq).
Removed top 2 bits (of 5) from port B of cell alphacore.$auto$fsm_map.cc:77:implement_pattern_cache$3581 ($eq).
Removed top 2 bits (of 8) from port B of cell alphacore.$auto$fsm_map.cc:77:implement_pattern_cache$3821 ($eq).
Removed top 3 bits (of 5) from port B of cell alphacore.$auto$fsm_map.cc:77:implement_pattern_cache$3548 ($eq).
Removed top 1 bits (of 5) from port B of cell alphacore.$auto$fsm_map.cc:77:implement_pattern_cache$3577 ($eq).
Removed top 2 bits (of 6) from port B of cell alphacore.$auto$fsm_map.cc:77:implement_pattern_cache$3552 ($eq).
Removed top 2 bits (of 6) from port B of cell alphacore.$auto$fsm_map.cc:77:implement_pattern_cache$3575 ($eq).
Removed top 3 bits (of 5) from port B of cell alphacore.$auto$fsm_map.cc:77:implement_pattern_cache$3573 ($eq).
Removed top 1 bits (of 7) from port B of cell alphacore.$auto$fsm_map.cc:77:implement_pattern_cache$3825 ($eq).
Removed top 1 bits (of 5) from port B of cell alphacore.$auto$fsm_map.cc:77:implement_pattern_cache$3556 ($eq).
Removed top 1 bits (of 4) from port B of cell alphacore.$auto$fsm_map.cc:77:implement_pattern_cache$3566 ($eq).
Removed top 9 bits (of 10) from port B of cell alphacore.$auto$fsm_map.cc:77:implement_pattern_cache$3833 ($eq).
Removed top 5 bits (of 12) from port B of cell alphacore.$auto$fsm_map.cc:77:implement_pattern_cache$3837 ($eq).
Removed top 4 bits (of 13) from port B of cell alphacore.$auto$fsm_map.cc:77:implement_pattern_cache$3841 ($eq).
Removed top 3 bits (of 12) from port B of cell alphacore.$auto$fsm_map.cc:77:implement_pattern_cache$3845 ($eq).
Removed top 2 bits (of 10) from port B of cell alphacore.$auto$fsm_map.cc:77:implement_pattern_cache$3849 ($eq).
Removed top 1 bits (of 3) from port B of cell alphacore.$procmux$2159_CMP0 ($eq).
Removed top 1 bits (of 2) from port B of cell alphacore.$procmux$2161_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell alphacore.$procmux$2164_CMP0 ($eq).
Removed top 2 bits (of 4) from mux cell alphacore.$procmux$2222 ($mux).
Removed top 4 bits (of 9) from port B of cell alphacore.$auto$fsm_map.cc:77:implement_pattern_cache$3874 ($eq).
Removed top 5 bits (of 11) from port B of cell alphacore.$auto$fsm_map.cc:77:implement_pattern_cache$3878 ($eq).
Removed top 4 bits (of 12) from port B of cell alphacore.$auto$fsm_map.cc:77:implement_pattern_cache$3882 ($eq).
Removed top 3 bits (of 11) from port B of cell alphacore.$auto$fsm_map.cc:77:implement_pattern_cache$3886 ($eq).
Removed top 2 bits (of 9) from port B of cell alphacore.$auto$fsm_map.cc:77:implement_pattern_cache$3890 ($eq).
Removed top 2 bits (of 4) from port B of cell alphacore.$auto$fsm_map.cc:77:implement_pattern_cache$3894 ($eq).
Removed top 3 bits (of 6) from port B of cell alphacore.$auto$fsm_map.cc:77:implement_pattern_cache$3898 ($eq).
Removed top 2 bits (of 7) from port B of cell alphacore.$auto$fsm_map.cc:77:implement_pattern_cache$3902 ($eq).
Removed top 1 bits (of 6) from port B of cell alphacore.$auto$fsm_map.cc:77:implement_pattern_cache$3906 ($eq).
Removed top 1 bits (of 2) from port B of cell alphacore.$auto$opt_dff.cc:195:make_patterns_logic$4504 ($ne).
Removed top 2 bits (of 3) from port B of cell alphacore.$procmux$2446_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell alphacore.$auto$fsm_map.cc:77:implement_pattern_cache$3914 ($eq).
Removed top 3 bits (of 6) from port B of cell alphacore.$auto$fsm_map.cc:77:implement_pattern_cache$3918 ($eq).
Removed top 1 bits (of 6) from port B of cell alphacore.$auto$opt_dff.cc:195:make_patterns_logic$4494 ($ne).
Removed top 3 bits (of 6) from port B of cell alphacore.$auto$opt_dff.cc:195:make_patterns_logic$4492 ($ne).
Removed top 2 bits (of 7) from port B of cell alphacore.$auto$fsm_map.cc:77:implement_pattern_cache$3922 ($eq).
Removed top 1 bits (of 2) from port B of cell alphacore.$procmux$2885_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell alphacore.$auto$fsm_map.cc:77:implement_pattern_cache$3926 ($eq).
Removed top 6 bits (of 9) from port B of cell alphacore.$auto$fsm_map.cc:77:implement_pattern_cache$3935 ($eq).
Removed top 5 bits (of 11) from port B of cell alphacore.$auto$fsm_map.cc:77:implement_pattern_cache$3939 ($eq).
Removed top 4 bits (of 12) from port B of cell alphacore.$auto$fsm_map.cc:77:implement_pattern_cache$3943 ($eq).
Removed top 3 bits (of 11) from port B of cell alphacore.$auto$fsm_map.cc:77:implement_pattern_cache$3947 ($eq).
Removed top 2 bits (of 9) from port B of cell alphacore.$auto$fsm_map.cc:77:implement_pattern_cache$3951 ($eq).
Removed top 2 bits (of 4) from port B of cell alphacore.$auto$opt_dff.cc:195:make_patterns_logic$4447 ($ne).
Removed top 4 bits (of 5) from port B of cell alphacore.$auto$opt_dff.cc:195:make_patterns_logic$4443 ($ne).
Removed top 3 bits (of 7) from port B of cell alphacore.$auto$opt_dff.cc:195:make_patterns_logic$4441 ($ne).
Removed top 3 bits (of 9) from port B of cell alphacore.$auto$opt_dff.cc:195:make_patterns_logic$4439 ($ne).
Removed top 1 bits (of 2) from port B of cell alphacore.$auto$opt_dff.cc:195:make_patterns_logic$4420 ($ne).
Removed top 2 bits (of 4) from port B of cell alphacore.$auto$fsm_map.cc:77:implement_pattern_cache$3996 ($eq).
Removed top 3 bits (of 6) from port B of cell alphacore.$auto$fsm_map.cc:77:implement_pattern_cache$4000 ($eq).
Removed top 2 bits (of 6) from mux cell alphacore.$procmux$3200 ($mux).
Removed top 2 bits (of 7) from port B of cell alphacore.$auto$fsm_map.cc:77:implement_pattern_cache$4004 ($eq).
Removed top 1 bits (of 6) from port B of cell alphacore.$auto$fsm_map.cc:77:implement_pattern_cache$4008 ($eq).
Removed top 1 bits (of 2) from port B of cell alphacore.$procmux$3219_CMP0 ($eq).
Removed top 3 bits (of 5) from port B of cell alphacore.$auto$fsm_map.cc:77:implement_pattern_cache$3564 ($eq).
Removed top 3 bits (of 4) from port B of cell alphacore.$auto$fsm_map.cc:77:implement_pattern_cache$4016 ($eq).
Removed top 1 bits (of 2) from port B of cell alphacore.$auto$opt_dff.cc:195:make_patterns_logic$4367 ($ne).
Removed top 3 bits (of 6) from port B of cell alphacore.$auto$fsm_map.cc:77:implement_pattern_cache$4020 ($eq).
Removed top 27 bits (of 32) from wire alphacore.$add$/openlane/designs/alphacore/src/alphacore.v:681$185_Y.
Removed top 27 bits (of 32) from wire alphacore.$add$/openlane/designs/alphacore/src/alphacore.v:685$186_Y.
Removed top 29 bits (of 32) from wire alphacore.$or$/openlane/designs/alphacore/src/alphacore.v:1593$597_Y.
Removed top 2 bits (of 4) from wire alphacore.$procmux$2222_Y.
Removed top 27 bits (of 32) from wire alphacore.$sub$/openlane/designs/alphacore/src/alphacore.v:1519$575_Y.
Removed top 1 bits (of 7) from wire alphacore.$ternary$/openlane/designs/alphacore/src/alphacore.v:236$91_Y.
Removed top 30 bits (of 32) from wire alphacore.$ternary$/openlane/designs/alphacore/src/alphacore.v:362$135_Y.

27. Executing PEEPOPT pass (run peephole optimizers).

28. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alphacore..
Removed 0 unused cells and 8 unused wires.
<suppressed ~1 debug messages>

29. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module alphacore:
  creating $macc model for $add$/openlane/designs/alphacore/src/alphacore.v:1013$628 ($add).
  creating $macc model for $add$/openlane/designs/alphacore/src/alphacore.v:1086$442 ($add).
  creating $macc model for $add$/openlane/designs/alphacore/src/alphacore.v:1168$468 ($add).
  creating $macc model for $add$/openlane/designs/alphacore/src/alphacore.v:1287$519 ($add).
  creating $macc model for $add$/openlane/designs/alphacore/src/alphacore.v:129$63 ($add).
  creating $macc model for $add$/openlane/designs/alphacore/src/alphacore.v:1299$522 ($add).
  creating $macc model for $add$/openlane/designs/alphacore/src/alphacore.v:1304$523 ($add).
  creating $macc model for $add$/openlane/designs/alphacore/src/alphacore.v:1483$561 ($add).
  creating $macc model for $add$/openlane/designs/alphacore/src/alphacore.v:1546$586 ($add).
  creating $macc model for $add$/openlane/designs/alphacore/src/alphacore.v:681$185 ($add).
  creating $macc model for $add$/openlane/designs/alphacore/src/alphacore.v:685$186 ($add).
  creating $macc model for $sub$/openlane/designs/alphacore/src/alphacore.v:1013$627 ($sub).
  creating $macc model for $sub$/openlane/designs/alphacore/src/alphacore.v:1178$473 ($sub).
  creating $macc model for $sub$/openlane/designs/alphacore/src/alphacore.v:1519$575 ($sub).
  creating $macc model for $sub$/openlane/designs/alphacore/src/alphacore.v:1527$582 ($sub).
  creating $alu model for $macc $sub$/openlane/designs/alphacore/src/alphacore.v:1527$582.
  creating $alu model for $macc $sub$/openlane/designs/alphacore/src/alphacore.v:1519$575.
  creating $alu model for $macc $sub$/openlane/designs/alphacore/src/alphacore.v:1178$473.
  creating $alu model for $macc $sub$/openlane/designs/alphacore/src/alphacore.v:1013$627.
  creating $alu model for $macc $add$/openlane/designs/alphacore/src/alphacore.v:685$186.
  creating $alu model for $macc $add$/openlane/designs/alphacore/src/alphacore.v:681$185.
  creating $alu model for $macc $add$/openlane/designs/alphacore/src/alphacore.v:1546$586.
  creating $alu model for $macc $add$/openlane/designs/alphacore/src/alphacore.v:1483$561.
  creating $alu model for $macc $add$/openlane/designs/alphacore/src/alphacore.v:1304$523.
  creating $alu model for $macc $add$/openlane/designs/alphacore/src/alphacore.v:1299$522.
  creating $alu model for $macc $add$/openlane/designs/alphacore/src/alphacore.v:129$63.
  creating $alu model for $macc $add$/openlane/designs/alphacore/src/alphacore.v:1287$519.
  creating $alu model for $macc $add$/openlane/designs/alphacore/src/alphacore.v:1168$468.
  creating $alu model for $macc $add$/openlane/designs/alphacore/src/alphacore.v:1086$442.
  creating $alu model for $macc $add$/openlane/designs/alphacore/src/alphacore.v:1013$628.
  creating $alu model for $ge$/openlane/designs/alphacore/src/alphacore.v:1512$567 ($ge): new $alu
  creating $alu model for $lt$/openlane/designs/alphacore/src/alphacore.v:1015$631 ($lt): new $alu
  creating $alu model for $lt$/openlane/designs/alphacore/src/alphacore.v:1016$632 ($lt): merged with $sub$/openlane/designs/alphacore/src/alphacore.v:1013$627.
  creating $alu model for $eq$/openlane/designs/alphacore/src/alphacore.v:1014$630 ($eq): merged with $sub$/openlane/designs/alphacore/src/alphacore.v:1013$627.
  creating $alu cell for $ge$/openlane/designs/alphacore/src/alphacore.v:1512$567: $auto$alumacc.cc:485:replace_alu$4566
  creating $alu cell for $add$/openlane/designs/alphacore/src/alphacore.v:1086$442: $auto$alumacc.cc:485:replace_alu$4575
  creating $alu cell for $add$/openlane/designs/alphacore/src/alphacore.v:1168$468: $auto$alumacc.cc:485:replace_alu$4578
  creating $alu cell for $add$/openlane/designs/alphacore/src/alphacore.v:1287$519: $auto$alumacc.cc:485:replace_alu$4581
  creating $alu cell for $add$/openlane/designs/alphacore/src/alphacore.v:129$63: $auto$alumacc.cc:485:replace_alu$4584
  creating $alu cell for $add$/openlane/designs/alphacore/src/alphacore.v:1299$522: $auto$alumacc.cc:485:replace_alu$4587
  creating $alu cell for $add$/openlane/designs/alphacore/src/alphacore.v:1304$523: $auto$alumacc.cc:485:replace_alu$4590
  creating $alu cell for $add$/openlane/designs/alphacore/src/alphacore.v:1483$561: $auto$alumacc.cc:485:replace_alu$4593
  creating $alu cell for $add$/openlane/designs/alphacore/src/alphacore.v:1546$586: $auto$alumacc.cc:485:replace_alu$4596
  creating $alu cell for $add$/openlane/designs/alphacore/src/alphacore.v:681$185: $auto$alumacc.cc:485:replace_alu$4599
  creating $alu cell for $add$/openlane/designs/alphacore/src/alphacore.v:685$186: $auto$alumacc.cc:485:replace_alu$4602
  creating $alu cell for $lt$/openlane/designs/alphacore/src/alphacore.v:1015$631: $auto$alumacc.cc:485:replace_alu$4605
  creating $alu cell for $add$/openlane/designs/alphacore/src/alphacore.v:1013$628: $auto$alumacc.cc:485:replace_alu$4612
  creating $alu cell for $sub$/openlane/designs/alphacore/src/alphacore.v:1013$627, $lt$/openlane/designs/alphacore/src/alphacore.v:1016$632, $eq$/openlane/designs/alphacore/src/alphacore.v:1014$630: $auto$alumacc.cc:485:replace_alu$4615
  creating $alu cell for $sub$/openlane/designs/alphacore/src/alphacore.v:1178$473: $auto$alumacc.cc:485:replace_alu$4622
  creating $alu cell for $sub$/openlane/designs/alphacore/src/alphacore.v:1519$575: $auto$alumacc.cc:485:replace_alu$4625
  creating $alu cell for $sub$/openlane/designs/alphacore/src/alphacore.v:1527$582: $auto$alumacc.cc:485:replace_alu$4628
  created 17 $alu and 0 $macc cells.

30. Executing SHARE pass (SAT-based resource sharing).
Found 4 cells in module alphacore that may be considered for resource sharing.
  Analyzing resource sharing options for $sshr$/openlane/designs/alphacore/src/alphacore.v:1018$636 ($sshr):
    Found 1 activation_patterns using ctrl signal $logic_or$/openlane/designs/alphacore/src/alphacore.v:1055$432_Y.
    No candidates found.
  Analyzing resource sharing options for $shl$/openlane/designs/alphacore/src/alphacore.v:1017$633 ($shl):
    Found 1 activation_patterns using ctrl signal $logic_or$/openlane/designs/alphacore/src/alphacore.v:1053$429_Y.
    No candidates found.
  Analyzing resource sharing options for $flatten\cpuregs.$memrd$\regs$/openlane/designs/alphacore/src/alphasoc_regs.v:16$646 ($memrd):
    Found 2 activation_patterns using ctrl signal { $procmux$1266_CTRL $auto$opt_reduce.cc:134:opt_pmux$3421 $auto$opt_reduce.cc:134:opt_pmux$3437 \cpu_state [2] $logic_and$/openlane/designs/alphacore/src/alphacore.v:1390$539_Y $reduce_bool$/openlane/designs/alphacore/src/alphacore.v:1127$456_Y \is_lui_auipc_jal \resetn }.
    Found 1 candidates: $flatten\cpuregs.$memrd$\regs$/openlane/designs/alphacore/src/alphasoc_regs.v:15$645
    Analyzing resource sharing with $flatten\cpuregs.$memrd$\regs$/openlane/designs/alphacore/src/alphasoc_regs.v:15$645 ($memrd):
      Found 1 activation_patterns using ctrl signal $reduce_bool$/openlane/designs/alphacore/src/alphacore.v:1126$454_Y.
      Activation pattern for cell $flatten\cpuregs.$memrd$\regs$/openlane/designs/alphacore/src/alphasoc_regs.v:16$646: { $procmux$1266_CTRL $auto$opt_reduce.cc:134:opt_pmux$3437 $reduce_bool$/openlane/designs/alphacore/src/alphacore.v:1127$456_Y \is_lui_auipc_jal } = 4'0010
      Activation pattern for cell $flatten\cpuregs.$memrd$\regs$/openlane/designs/alphacore/src/alphasoc_regs.v:16$646: { $auto$opt_reduce.cc:134:opt_pmux$3421 \cpu_state [2] $logic_and$/openlane/designs/alphacore/src/alphacore.v:1390$539_Y $reduce_bool$/openlane/designs/alphacore/src/alphacore.v:1127$456_Y \resetn } = 5'01011
      Activation pattern for cell $flatten\cpuregs.$memrd$\regs$/openlane/designs/alphacore/src/alphasoc_regs.v:15$645: $reduce_bool$/openlane/designs/alphacore/src/alphacore.v:1126$454_Y = 1'1
      Size of SAT problem: 0 cells, 151 variables, 343 clauses
      According to the SAT solver this pair of cells can not be shared.
      Model from SAT solver: { $procmux$1266_CTRL $auto$opt_reduce.cc:134:opt_pmux$3421 $auto$opt_reduce.cc:134:opt_pmux$3437 \cpu_state [2] $logic_and$/openlane/designs/alphacore/src/alphacore.v:1390$539_Y $reduce_bool$/openlane/designs/alphacore/src/alphacore.v:1127$456_Y $reduce_bool$/openlane/designs/alphacore/src/alphacore.v:1126$454_Y \is_lui_auipc_jal \resetn } = 9'000001100
  Analyzing resource sharing options for $flatten\cpuregs.$memrd$\regs$/openlane/designs/alphacore/src/alphasoc_regs.v:15$645 ($memrd):
    Found 1 activation_patterns using ctrl signal $reduce_bool$/openlane/designs/alphacore/src/alphacore.v:1126$454_Y.
    No candidates found.

31. Executing OPT pass (performing simple optimizations).

31.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alphacore.
<suppressed ~1 debug messages>

31.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alphacore'.
Removed a total of 0 cells.

31.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alphacore..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~101 debug messages>

31.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alphacore.
Performed a total of 0 changes.

31.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alphacore'.
Removed a total of 0 cells.

31.6. Executing OPT_DFF pass (perform DFF optimizations).

31.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alphacore..
Removed 0 unused cells and 5 unused wires.
<suppressed ~1 debug messages>

31.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module alphacore.

31.9. Rerunning OPT passes. (Maybe there is more to do..)

31.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alphacore..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~101 debug messages>

31.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alphacore.
Performed a total of 0 changes.

31.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alphacore'.
Removed a total of 0 cells.

31.13. Executing OPT_DFF pass (perform DFF optimizations).

31.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alphacore..

31.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module alphacore.

31.16. Finished OPT passes. (There is nothing left to do.)

32. Executing MEMORY pass.

32.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

32.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

32.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).
  Analyzing alphacore.cpuregs.regs write port 0.

32.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

32.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).
Checking read port `\cpuregs.regs'[0] in module `\alphacore': no output FF found.
Checking read port `\cpuregs.regs'[1] in module `\alphacore': no output FF found.
Checking read port address `\cpuregs.regs'[0] in module `\alphacore': merged address FF to cell.
Checking read port address `\cpuregs.regs'[1] in module `\alphacore': merged address FF to cell.

32.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alphacore..

32.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).
Consolidating read ports of memory alphacore.cpuregs.regs by address:

32.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

32.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alphacore..

32.10. Executing MEMORY_COLLECT pass (generating $mem cells).

33. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alphacore..

34. Executing OPT pass (performing simple optimizations).

34.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alphacore.
<suppressed ~244 debug messages>

34.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alphacore'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

34.3. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $auto$ff.cc:266:slice$4236 ($dffe) from module alphacore (D = $procmux$2980_Y, Q = \mem_valid, rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$4200 ($dffe) from module alphacore (D = $procmux$2922_Y, Q = \mem_state, rval = 2'00).
Adding SRST signal on $auto$ff.cc:266:slice$4353 ($dffe) from module alphacore (D = \decoded_rd [4:3], Q = \latched_rd [4:3], rval = 2'00).
Adding SRST signal on $auto$ff.cc:266:slice$4353 ($dffe) from module alphacore (D = $procmux$1308_Y [2:0], Q = \latched_rd [2:0], rval = 3'000).
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$4274 ($dffe) from module alphacore.

34.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alphacore..
Removed 24 unused cells and 138 unused wires.
<suppressed ~30 debug messages>

34.5. Rerunning OPT passes. (Removed registers in this run.)

34.6. Executing OPT_EXPR pass (perform const folding).
Optimizing module alphacore.
<suppressed ~2 debug messages>

34.7. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alphacore'.
Removed a total of 0 cells.

34.8. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$3274 ($dff) from module alphacore (D = $0\reg_sh[4:0] [1:0], Q = \reg_sh [1:0]).

34.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alphacore..

34.10. Rerunning OPT passes. (Removed registers in this run.)

34.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module alphacore.

34.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alphacore'.
Removed a total of 0 cells.

34.13. Executing OPT_DFF pass (perform DFF optimizations).

34.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alphacore..

34.15. Finished fast OPT passes.

35. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).
Mapping memory \cpuregs.regs in module \alphacore:
  created 32 $dff cells and 0 static cells of width 32.
Extracted addr FF from read port 0 of alphacore.cpuregs.regs: $\cpuregs.regs$rdreg[0]
Extracted addr FF from read port 1 of alphacore.cpuregs.regs: $\cpuregs.regs$rdreg[1]
  read interface: 2 $dff and 62 $mux cells.
  write interface: 32 write mux blocks.

36. Executing OPT pass (performing simple optimizations).

36.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alphacore.
<suppressed ~10 debug messages>

36.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alphacore'.
Removed a total of 0 cells.

36.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alphacore..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~114 debug messages>

36.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alphacore.
    Consolidated identical input bits for $pmux cell $procmux$1208:
      Old ports: A=\mem_rdata_word, B={ \mem_rdata_word [15] \mem_rdata_word [15] \mem_rdata_word [15] \mem_rdata_word [15] \mem_rdata_word [15] \mem_rdata_word [15] \mem_rdata_word [15] \mem_rdata_word [15] \mem_rdata_word [15] \mem_rdata_word [15] \mem_rdata_word [15] \mem_rdata_word [15] \mem_rdata_word [15] \mem_rdata_word [15] \mem_rdata_word [15] \mem_rdata_word [15] \mem_rdata_word [15:0] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7:0] }, Y=$procmux$1208_Y
      New ports: A=\mem_rdata_word [31:8], B={ \mem_rdata_word [15] \mem_rdata_word [15] \mem_rdata_word [15] \mem_rdata_word [15] \mem_rdata_word [15] \mem_rdata_word [15] \mem_rdata_word [15] \mem_rdata_word [15] \mem_rdata_word [15] \mem_rdata_word [15] \mem_rdata_word [15] \mem_rdata_word [15] \mem_rdata_word [15] \mem_rdata_word [15] \mem_rdata_word [15] \mem_rdata_word [15] \mem_rdata_word [15:7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] }, Y=$procmux$1208_Y [31:8]
      New connections: $procmux$1208_Y [7:0] = \mem_rdata_word [7:0]
    New ctrl vector for $pmux cell $procmux$1435: { \cpu_state [3] $auto$opt_reduce.cc:134:opt_pmux$5151 }
    New ctrl vector for $pmux cell $procmux$1912: { \cpu_state [4] $auto$opt_reduce.cc:134:opt_pmux$5153 }
    New ctrl vector for $pmux cell $procmux$2142: { $procmux$2161_CMP $procmux$2143_CMP }
    New ctrl vector for $pmux cell $procmux$2144: { $procmux$2141_CMP $procmux$2159_CMP }
    Consolidated identical input bits for $mux cell $procmux$2194:
      Old ports: A={ \mem_rdata_latched [31] \mem_rdata_latched [31] \mem_rdata_latched [31] \mem_rdata_latched [31] \mem_rdata_latched [31] \mem_rdata_latched [31] \mem_rdata_latched [31] \mem_rdata_latched [31] \mem_rdata_latched [31] \mem_rdata_latched [31] \mem_rdata_latched [31] \mem_rdata_latched [31] }, B={ \mem_rdata_latched [12] \mem_rdata_latched [12] \mem_rdata_latched [12] \mem_rdata_latched [12] \mem_rdata_latched [12] \mem_rdata_latched [12] \mem_rdata_latched [12] \mem_rdata_latched [12] \mem_rdata_latched [12] \mem_rdata_latched [12] \mem_rdata_latched [12] \mem_rdata_latched [12] }, Y=$procmux$2194_Y
      New ports: A=\mem_rdata_latched [31], B=\mem_rdata_latched [12], Y=$procmux$2194_Y [0]
      New connections: $procmux$2194_Y [11:1] = { $procmux$2194_Y [0] $procmux$2194_Y [0] $procmux$2194_Y [0] $procmux$2194_Y [0] $procmux$2194_Y [0] $procmux$2194_Y [0] $procmux$2194_Y [0] $procmux$2194_Y [0] $procmux$2194_Y [0] $procmux$2194_Y [0] $procmux$2194_Y [0] }
    Consolidated identical input bits for $mux cell $procmux$2222:
      Old ports: A=2'00, B=2'10, Y=$auto$wreduce.cc:461:run$4560 [1:0]
      New ports: A=1'0, B=1'1, Y=$auto$wreduce.cc:461:run$4560 [1]
      New connections: $auto$wreduce.cc:461:run$4560 [0] = 1'0
    Consolidated identical input bits for $mux cell $procmux$2400:
      Old ports: A=5'00000, B={ 2'01 \mem_rdata_latched [4:2] }, Y=$procmux$2400_Y
      New ports: A=4'0000, B={ 1'1 \mem_rdata_latched [4:2] }, Y=$procmux$2400_Y [3:0]
      New connections: $procmux$2400_Y [4] = 1'0
    Consolidated identical input bits for $mux cell $procmux$2407:
      Old ports: A=\mem_rdata_latched [19:12], B={ \mem_rdata_latched [12] \mem_rdata_latched [12] \mem_rdata_latched [12] \mem_rdata_latched [12] \mem_rdata_latched [12] \mem_rdata_latched [12] \mem_rdata_latched [12] \mem_rdata_latched [12] }, Y=$procmux$2407_Y
      New ports: A=\mem_rdata_latched [19:13], B={ \mem_rdata_latched [12] \mem_rdata_latched [12] \mem_rdata_latched [12] \mem_rdata_latched [12] \mem_rdata_latched [12] \mem_rdata_latched [12] \mem_rdata_latched [12] }, Y=$procmux$2407_Y [7:1]
      New connections: $procmux$2407_Y [0] = \mem_rdata_latched [12]
    Consolidated identical input bits for $mux cell $procmux$2432:
      Old ports: A=5'00000, B={ 2'01 \mem_rdata_latched [9:7] }, Y=$procmux$2432_Y
      New ports: A=4'0000, B={ 1'1 \mem_rdata_latched [9:7] }, Y=$procmux$2432_Y [3:0]
      New connections: $procmux$2432_Y [4] = 1'0
    Consolidated identical input bits for $mux cell $procmux$2450:
      Old ports: A=5'00000, B={ 2'01 \mem_rdata_latched [4:2] }, Y=$procmux$2450_Y
      New ports: A=4'0000, B={ 1'1 \mem_rdata_latched [4:2] }, Y=$procmux$2450_Y [3:0]
      New connections: $procmux$2450_Y [4] = 1'0
    New ctrl vector for $pmux cell $procmux$2922: { $procmux$2885_CMP $auto$opt_reduce.cc:134:opt_pmux$5155 }
    Consolidated identical input bits for $mux cell $procmux$3074:
      Old ports: A={ \mem_rdata_latched [12] \mem_rdata_latched [12] \mem_rdata_latched [12] \mem_rdata_latched [12] \mem_rdata_latched [12] }, B={ \mem_rdata_latched [6] 4'0000 }, Y=$procmux$3074_Y
      New ports: A={ \mem_rdata_latched [12] \mem_rdata_latched [12] }, B={ \mem_rdata_latched [6] 1'0 }, Y={ $procmux$3074_Y [4] $procmux$3074_Y [0] }
      New connections: $procmux$3074_Y [3:1] = { $procmux$3074_Y [0] $procmux$3074_Y [0] $procmux$3074_Y [0] }
    Consolidated identical input bits for $pmux cell $procmux$3216:
      Old ports: A={ 24'000000000000000000000000 \mem_rdata [7:0] }, B={ 24'000000000000000000000000 \mem_rdata [15:8] 24'000000000000000000000000 \mem_rdata [23:16] 24'000000000000000000000000 \mem_rdata [31:24] }, Y=$3\mem_rdata_word[31:0]
      New ports: A=\mem_rdata [7:0], B={ \mem_rdata [15:8] \mem_rdata [23:16] \mem_rdata [31:24] }, Y=$3\mem_rdata_word[31:0] [7:0]
      New connections: $3\mem_rdata_word[31:0] [31:8] = 24'000000000000000000000000
    Consolidated identical input bits for $mux cell $procmux$3225:
      Old ports: A={ 16'0000000000000000 \mem_rdata [15:0] }, B={ 16'0000000000000000 \mem_rdata [31:16] }, Y=$2\mem_rdata_word[31:0]
      New ports: A=\mem_rdata [15:0], B=\mem_rdata [31:16], Y=$2\mem_rdata_word[31:0] [15:0]
      New connections: $2\mem_rdata_word[31:0] [31:16] = 16'0000000000000000
    Consolidated identical input bits for $pmux cell $procmux$3241:
      Old ports: A=\reg_op2, B={ \reg_op2 [15:0] \reg_op2 [15:0] \reg_op2 [7:0] \reg_op2 [7:0] \reg_op2 [7:0] \reg_op2 [7:0] }, Y=\mem_la_wdata
      New ports: A=\reg_op2 [31:8], B={ \reg_op2 [15:0] \reg_op2 [15:0] \reg_op2 [7:0] \reg_op2 [7:0] }, Y=\mem_la_wdata [31:8]
      New connections: \mem_la_wdata [7:0] = \reg_op2 [7:0]
    Consolidated identical input bits for $mux cell $ternary$/openlane/designs/alphacore/src/alphacore.v:1086$441:
      Old ports: A=3'100, B=3'010, Y=$ternary$/openlane/designs/alphacore/src/alphacore.v:1086$441_Y [2:0]
      New ports: A=2'10, B=2'01, Y=$ternary$/openlane/designs/alphacore/src/alphacore.v:1086$441_Y [2:1]
      New connections: $ternary$/openlane/designs/alphacore/src/alphacore.v:1086$441_Y [0] = 1'0
    Consolidated identical input bits for $mux cell $ternary$/openlane/designs/alphacore/src/alphacore.v:1276$511:
      Old ports: A=2'00, B=2'10, Y=$ternary$/openlane/designs/alphacore/src/alphacore.v:1276$511_Y
      New ports: A=1'0, B=1'1, Y=$ternary$/openlane/designs/alphacore/src/alphacore.v:1276$511_Y [1]
      New connections: $ternary$/openlane/designs/alphacore/src/alphacore.v:1276$511_Y [0] = 1'0
    Consolidated identical input bits for $mux cell $ternary$/openlane/designs/alphacore/src/alphacore.v:1281$513:
      Old ports: A=3'011, B=3'100, Y=$ternary$/openlane/designs/alphacore/src/alphacore.v:1281$513_Y [2:0]
      New ports: A=2'01, B=2'10, Y={ $ternary$/openlane/designs/alphacore/src/alphacore.v:1281$513_Y [2] $ternary$/openlane/designs/alphacore/src/alphacore.v:1281$513_Y [0] }
      New connections: $ternary$/openlane/designs/alphacore/src/alphacore.v:1281$513_Y [1] = $ternary$/openlane/designs/alphacore/src/alphacore.v:1281$513_Y [0]
    Consolidated identical input bits for $mux cell $ternary$/openlane/designs/alphacore/src/alphacore.v:1287$518:
      Old ports: A=3'100, B=3'010, Y=$ternary$/openlane/designs/alphacore/src/alphacore.v:1287$518_Y [2:0]
      New ports: A=2'10, B=2'01, Y=$ternary$/openlane/designs/alphacore/src/alphacore.v:1287$518_Y [2:1]
      New connections: $ternary$/openlane/designs/alphacore/src/alphacore.v:1287$518_Y [0] = 1'0
    Consolidated identical input bits for $mux cell $ternary$/openlane/designs/alphacore/src/alphacore.v:129$64:
      Old ports: A={ \reg_op1 [31:2] 2'00 }, B={ $add$/openlane/designs/alphacore/src/alphacore.v:129$63_Y 2'00 }, Y=\mem_la_addr
      New ports: A=\reg_op1 [31:2], B=$add$/openlane/designs/alphacore/src/alphacore.v:129$63_Y, Y=\mem_la_addr [31:2]
      New connections: \mem_la_addr [1:0] = 2'00
    Consolidated identical input bits for $mux cell $ternary$/openlane/designs/alphacore/src/alphacore.v:156$76:
      Old ports: A=4'0011, B=4'1100, Y=$ternary$/openlane/designs/alphacore/src/alphacore.v:156$76_Y
      New ports: A=2'01, B=2'10, Y={ $ternary$/openlane/designs/alphacore/src/alphacore.v:156$76_Y [2] $ternary$/openlane/designs/alphacore/src/alphacore.v:156$76_Y [0] }
      New connections: { $ternary$/openlane/designs/alphacore/src/alphacore.v:156$76_Y [3] $ternary$/openlane/designs/alphacore/src/alphacore.v:156$76_Y [1] } = { $ternary$/openlane/designs/alphacore/src/alphacore.v:156$76_Y [2] $ternary$/openlane/designs/alphacore/src/alphacore.v:156$76_Y [0] }
    Consolidated identical input bits for $mux cell $ternary$/openlane/designs/alphacore/src/alphacore.v:236$91:
      Old ports: A=6'000000, B=6'100000, Y=$auto$wreduce.cc:461:run$4562 [5:0]
      New ports: A=1'0, B=1'1, Y=$auto$wreduce.cc:461:run$4562 [5]
      New connections: $auto$wreduce.cc:461:run$4562 [4:0] = 5'00000
    Consolidated identical input bits for $mux cell $ternary$/openlane/designs/alphacore/src/alphacore.v:362$135:
      Old ports: A=2'11, B=2'00, Y=$auto$wreduce.cc:461:run$4563 [1:0]
      New ports: A=1'1, B=1'0, Y=$auto$wreduce.cc:461:run$4563 [0]
      New connections: $auto$wreduce.cc:461:run$4563 [1] = $auto$wreduce.cc:461:run$4563 [0]
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$5150: { \cpu_state [6] \cpu_state [4] \cpu_state [2] }
  Optimizing cells in module \alphacore.
    Consolidated identical input bits for $mux cell $procmux$2434:
      Old ports: A=$procmux$2432_Y, B={ 2'01 \mem_rdata_latched [9:7] }, Y=$procmux$2434_Y
      New ports: A=$procmux$2432_Y [3:0], B={ 1'1 \mem_rdata_latched [9:7] }, Y=$procmux$2434_Y [3:0]
      New connections: $procmux$2434_Y [4] = 1'0
  Optimizing cells in module \alphacore.
    Consolidated identical input bits for $mux cell $procmux$2436:
      Old ports: A=$procmux$2434_Y, B={ 2'01 \mem_rdata_latched [9:7] }, Y=$procmux$2436_Y
      New ports: A=$procmux$2434_Y [3:0], B={ 1'1 \mem_rdata_latched [9:7] }, Y=$procmux$2436_Y [3:0]
      New connections: $procmux$2436_Y [4] = 1'0
  Optimizing cells in module \alphacore.
Performed a total of 27 changes.

36.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alphacore'.
<suppressed ~12 debug messages>
Removed a total of 4 cells.

36.6. Executing OPT_SHARE pass.

36.7. Executing OPT_DFF pass (perform DFF optimizations).

36.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alphacore..
Removed 0 unused cells and 105 unused wires.
<suppressed ~1 debug messages>

36.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module alphacore.
<suppressed ~6 debug messages>

36.10. Rerunning OPT passes. (Maybe there is more to do..)

36.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alphacore..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~116 debug messages>

36.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alphacore.
    Consolidated identical input bits for $mux cell $procmux$1961:
      Old ports: A=$add$/openlane/designs/alphacore/src/alphacore.v:1287$519_Y, B={ $add$/openlane/designs/alphacore/src/alphacore.v:1304$523_Y [31:1] $3\current_pc[31:0] [0] }, Y=$procmux$1961_Y
      New ports: A=$add$/openlane/designs/alphacore/src/alphacore.v:1287$519_Y [31:1], B=$add$/openlane/designs/alphacore/src/alphacore.v:1304$523_Y [31:1], Y=$procmux$1961_Y [31:1]
      New connections: $procmux$1961_Y [0] = $3\current_pc[31:0] [0]
    Consolidated identical input bits for $mux cell $procmux$1967:
      Old ports: A=$3\current_pc[31:0], B=$add$/openlane/designs/alphacore/src/alphacore.v:1287$519_Y, Y=$procmux$1967_Y
      New ports: A=$3\current_pc[31:0] [31:1], B=$add$/openlane/designs/alphacore/src/alphacore.v:1287$519_Y [31:1], Y=$procmux$1967_Y [31:1]
      New connections: $procmux$1967_Y [0] = $3\current_pc[31:0] [0]
  Optimizing cells in module \alphacore.
    Consolidated identical input bits for $mux cell $procmux$1963:
      Old ports: A=$3\current_pc[31:0], B=$procmux$1961_Y, Y=$procmux$1963_Y
      New ports: A=$3\current_pc[31:0] [31:1], B=$procmux$1961_Y [31:1], Y=$procmux$1963_Y [31:1]
      New connections: $procmux$1963_Y [0] = $3\current_pc[31:0] [0]
  Optimizing cells in module \alphacore.
    Consolidated identical input bits for $mux cell $procmux$1969:
      Old ports: A=$procmux$1963_Y, B=$procmux$1967_Y, Y=$procmux$1969_Y
      New ports: A=$procmux$1963_Y [31:1], B=$procmux$1967_Y [31:1], Y=$procmux$1969_Y [31:1]
      New connections: $procmux$1969_Y [0] = $3\current_pc[31:0] [0]
  Optimizing cells in module \alphacore.
    Consolidated identical input bits for $mux cell $procmux$1972:
      Old ports: A=$procmux$1969_Y, B=$3\current_pc[31:0], Y=$procmux$1972_Y
      New ports: A=$procmux$1969_Y [31:1], B=$3\current_pc[31:0] [31:1], Y=$procmux$1972_Y [31:1]
      New connections: $procmux$1972_Y [0] = $3\current_pc[31:0] [0]
  Optimizing cells in module \alphacore.
Performed a total of 5 changes.

36.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alphacore'.
Removed a total of 0 cells.

36.14. Executing OPT_SHARE pass.

36.15. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $memory\cpuregs.regs[9]$4674 ($dff) from module alphacore (D = \cpuregs.wdata, Q = \cpuregs.regs[9]).
Adding EN signal on $memory\cpuregs.regs[8]$4672 ($dff) from module alphacore (D = \cpuregs.wdata, Q = \cpuregs.regs[8]).
Adding EN signal on $memory\cpuregs.regs[7]$4670 ($dff) from module alphacore (D = \cpuregs.wdata, Q = \cpuregs.regs[7]).
Adding EN signal on $memory\cpuregs.regs[6]$4668 ($dff) from module alphacore (D = \cpuregs.wdata, Q = \cpuregs.regs[6]).
Adding EN signal on $memory\cpuregs.regs[5]$4666 ($dff) from module alphacore (D = \cpuregs.wdata, Q = \cpuregs.regs[5]).
Adding EN signal on $memory\cpuregs.regs[4]$4664 ($dff) from module alphacore (D = \cpuregs.wdata, Q = \cpuregs.regs[4]).
Adding EN signal on $memory\cpuregs.regs[3]$4662 ($dff) from module alphacore (D = \cpuregs.wdata, Q = \cpuregs.regs[3]).
Adding EN signal on $memory\cpuregs.regs[31]$4718 ($dff) from module alphacore (D = \cpuregs.wdata, Q = \cpuregs.regs[31]).
Adding EN signal on $memory\cpuregs.regs[30]$4716 ($dff) from module alphacore (D = \cpuregs.wdata, Q = \cpuregs.regs[30]).
Adding EN signal on $memory\cpuregs.regs[2]$4660 ($dff) from module alphacore (D = \cpuregs.wdata, Q = \cpuregs.regs[2]).
Adding EN signal on $memory\cpuregs.regs[29]$4714 ($dff) from module alphacore (D = \cpuregs.wdata, Q = \cpuregs.regs[29]).
Adding EN signal on $memory\cpuregs.regs[28]$4712 ($dff) from module alphacore (D = \cpuregs.wdata, Q = \cpuregs.regs[28]).
Adding EN signal on $memory\cpuregs.regs[27]$4710 ($dff) from module alphacore (D = \cpuregs.wdata, Q = \cpuregs.regs[27]).
Adding EN signal on $memory\cpuregs.regs[26]$4708 ($dff) from module alphacore (D = \cpuregs.wdata, Q = \cpuregs.regs[26]).
Adding EN signal on $memory\cpuregs.regs[25]$4706 ($dff) from module alphacore (D = \cpuregs.wdata, Q = \cpuregs.regs[25]).
Adding EN signal on $memory\cpuregs.regs[24]$4704 ($dff) from module alphacore (D = \cpuregs.wdata, Q = \cpuregs.regs[24]).
Adding EN signal on $memory\cpuregs.regs[23]$4702 ($dff) from module alphacore (D = \cpuregs.wdata, Q = \cpuregs.regs[23]).
Adding EN signal on $memory\cpuregs.regs[22]$4700 ($dff) from module alphacore (D = \cpuregs.wdata, Q = \cpuregs.regs[22]).
Adding EN signal on $memory\cpuregs.regs[21]$4698 ($dff) from module alphacore (D = \cpuregs.wdata, Q = \cpuregs.regs[21]).
Adding EN signal on $memory\cpuregs.regs[20]$4696 ($dff) from module alphacore (D = \cpuregs.wdata, Q = \cpuregs.regs[20]).
Adding EN signal on $memory\cpuregs.regs[1]$4658 ($dff) from module alphacore (D = \cpuregs.wdata, Q = \cpuregs.regs[1]).
Adding EN signal on $memory\cpuregs.regs[19]$4694 ($dff) from module alphacore (D = \cpuregs.wdata, Q = \cpuregs.regs[19]).
Adding EN signal on $memory\cpuregs.regs[18]$4692 ($dff) from module alphacore (D = \cpuregs.wdata, Q = \cpuregs.regs[18]).
Adding EN signal on $memory\cpuregs.regs[17]$4690 ($dff) from module alphacore (D = \cpuregs.wdata, Q = \cpuregs.regs[17]).
Adding EN signal on $memory\cpuregs.regs[16]$4688 ($dff) from module alphacore (D = \cpuregs.wdata, Q = \cpuregs.regs[16]).
Adding EN signal on $memory\cpuregs.regs[15]$4686 ($dff) from module alphacore (D = \cpuregs.wdata, Q = \cpuregs.regs[15]).
Adding EN signal on $memory\cpuregs.regs[14]$4684 ($dff) from module alphacore (D = \cpuregs.wdata, Q = \cpuregs.regs[14]).
Adding EN signal on $memory\cpuregs.regs[13]$4682 ($dff) from module alphacore (D = \cpuregs.wdata, Q = \cpuregs.regs[13]).
Adding EN signal on $memory\cpuregs.regs[12]$4680 ($dff) from module alphacore (D = \cpuregs.wdata, Q = \cpuregs.regs[12]).
Adding EN signal on $memory\cpuregs.regs[11]$4678 ($dff) from module alphacore (D = \cpuregs.wdata, Q = \cpuregs.regs[11]).
Adding EN signal on $memory\cpuregs.regs[10]$4676 ($dff) from module alphacore (D = \cpuregs.wdata, Q = \cpuregs.regs[10]).
Adding EN signal on $memory\cpuregs.regs[0]$4656 ($dff) from module alphacore (D = \cpuregs.wdata, Q = \cpuregs.regs[0]).
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$4223 ($dffe) from module alphacore.
Setting constant 0-bit at position 1 on $auto$ff.cc:266:slice$4223 ($dffe) from module alphacore.

36.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alphacore..
Removed 32 unused cells and 35 unused wires.
<suppressed ~33 debug messages>

36.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module alphacore.

36.18. Rerunning OPT passes. (Maybe there is more to do..)

36.19. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alphacore..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~84 debug messages>

36.20. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alphacore.
Performed a total of 0 changes.

36.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alphacore'.
Removed a total of 0 cells.

36.22. Executing OPT_SHARE pass.

36.23. Executing OPT_DFF pass (perform DFF optimizations).

36.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alphacore..

36.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module alphacore.

36.26. Finished OPT passes. (There is nothing left to do.)

37. Executing TECHMAP pass (map to technology primitives).

37.1. Executing Verilog-2005 frontend: /build/bin/../share/yosys/techmap.v
Parsing Verilog input from `/build/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

37.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $logic_or.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $reduce_and.
Using template $paramod$cc80a4e89b0341cb117f5d28b0e7244620640141\_90_alu for cells of type $alu.
Using template $paramod$constmap:66d421c313e4e958be776b99540ac2de3b59fdbc$paramod$77562a466236eb4a6d905351a0995599b75075cb\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $dffe.
Using extmapper simplemap for cells of type $ne.
Using template $paramod$2653f68ddb8eab7b1907b4a20767b72a824a7a36\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $or.
Using template $paramod$03eba0cdd46566f6651a3011e0b5671fa6b5e494\_90_alu for cells of type $alu.
Using template $paramod$8fabc56b80a569262acfc42757a02ca0b8e91278\_90_pmux for cells of type $pmux.
Using template $paramod$d901baf1fb63991ac0a40d2e3f4807d372bb57a2\_90_alu for cells of type $alu.
Using template $paramod$b8c0a997bce700f23568a5ada79cc6781d1f5ca0\_90_alu for cells of type $alu.
Using template $paramod$44a13d10af618e7fbe7b9aad2f6151ffcee1e2fa\_90_alu for cells of type $alu.
Using template $paramod$ebf89ea36a793f0f77858f212141d47c833068ad\_90_alu for cells of type $alu.
Using template $paramod$fbc7873bff55778c0b3173955b7e4bce1d9d6834\_90_alu for cells of type $alu.
Using template $paramod$dc04b7d98e503a7bab16fce2df70e6e2c5ca34d6\_90_alu for cells of type $alu.
Using template $paramod$c04af8dbf0e5d1d69bbccb2c7bd8a93fc9ef54dc\_90_alu for cells of type $alu.
Using template $paramod$constmap:4621fcf06a436d1e2a4080e2ed9866a7d07a6e07$paramod$335cfd09f1afa8139c4aafcbbe5f361887b79c5e\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using template $paramod$constmap:87f69c0bea22f84de4bcd0314b57cb19e61b5eb7$paramod$455891ae50d34e43581a517459d55825f76fa58e\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshr.
Using template $paramod$c5c783b17ab1d780abfad8cfe6563a0a7b47a3b0\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $sdff.
Using template $paramod$645fe0cc96ae5edb83bff90cc2c78f4a20ca3e3c\_90_pmux for cells of type $pmux.
Using template $paramod$cc1e387d9d5ac1d3f6e6bed180038d9c0ac48d0c\_90_pmux for cells of type $pmux.
Using template $paramod$54d740639e1393b22262823179ff783ea9f17a35\_90_pmux for cells of type $pmux.
Using template $paramod$b098bc6f249c0ac91c4d6e19d54b23c285914115\_90_pmux for cells of type $pmux.
Using template $paramod$2407ada40cc3dda6c6015be2b49b748cddb5a800\_90_pmux for cells of type $pmux.
Using template $paramod$c96def1cdcef2eee3c62e5dfb7ba2dd09c9f74dd\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $sdffce.
Using template $paramod$20d3ee62d72123142eb855d7ddafd835e31ba009\_90_pmux for cells of type $pmux.
Using template $paramod$bf2533632d512eac76dd186c0da49367e29b8e98\_90_pmux for cells of type $pmux.
Using template $paramod$c2e415ef15bc3ccd2723772353a6b450d3d76206\_90_pmux for cells of type $pmux.
Using template $paramod$d629d85c8826a74239b9178d1930215a43b0ceb0\_90_pmux for cells of type $pmux.
Using template $paramod$59b03ae2620a41577de8da5f5c97b2919e82362b\_90_pmux for cells of type $pmux.
Using template $paramod$fedb90247e1daaa8b0af86a595f377181f141d27\_90_pmux for cells of type $pmux.
Using template $paramod$24fb226dd75c9d3f6955ec2ad61d794776778cf6\_90_pmux for cells of type $pmux.
Using template $paramod$521ce43182eecb9f60c72393a788160d2c356bf5\_90_pmux for cells of type $pmux.
Using template $paramod$70d30c21ff772b34d0d1da2801fbd781dc3c70e4\_90_pmux for cells of type $pmux.
Using template $paramod$85df5dc01c7df96a7d8e5f1fdf76ce9ac452af63\_90_pmux for cells of type $pmux.
Using template $paramod$d31bf4d7d72e59528d18fbd4f322e9d608532043\_90_pmux for cells of type $pmux.
Using template $paramod$32e7c4d6f92ff4337599ece53082d2e88a82a9f2\_90_pmux for cells of type $pmux.
Using template $paramod$f3115659d5e2977ebd2cb01ff3557fc5f6187689\_90_pmux for cells of type $pmux.
Using template $paramod$ed0bb9616228df1e6c226f91f8133e751815f1b1\_90_pmux for cells of type $pmux.
Using template $paramod$c15e84c77f007506123baf6c4be45847f0e33a3b\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $sdffe.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000001000000 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000100000 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000101 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011111 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000011 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011110 for cells of type $lcu.
No more expansions possible.
<suppressed ~6472 debug messages>

38. Executing OPT pass (performing simple optimizations).

38.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alphacore.
<suppressed ~3378 debug messages>

38.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alphacore'.
<suppressed ~5676 debug messages>
Removed a total of 1892 cells.

38.3. Executing OPT_DFF pass (perform DFF optimizations).

38.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alphacore..
Removed 368 unused cells and 4804 unused wires.
<suppressed ~369 debug messages>

38.5. Finished fast OPT passes.

39. Executing ABC pass (technology mapping using ABC).

39.1. Extracting gate netlist of module `\alphacore' to `<abc-temp-dir>/input.blif'..
Replacing 35 occurrences of constant undef bits with constant zero bits
Extracted 10113 gates and 11852 wires to a netlist network with 1736 inputs and 818 outputs.

39.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

39.1.2. Re-integrating ABC results.
ABC RESULTS:              XNOR cells:      119
ABC RESULTS:               NOR cells:      418
ABC RESULTS:               XOR cells:      421
ABC RESULTS:             ORNOT cells:      241
ABC RESULTS:               NOT cells:      275
ABC RESULTS:              NAND cells:      380
ABC RESULTS:               AND cells:      562
ABC RESULTS:               MUX cells:     3616
ABC RESULTS:            ANDNOT cells:     2228
ABC RESULTS:                OR cells:     1621
ABC RESULTS:        internal signals:     9298
ABC RESULTS:           input signals:     1736
ABC RESULTS:          output signals:      818
Removing temp directory.

40. Executing OPT pass (performing simple optimizations).

40.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alphacore.
<suppressed ~1416 debug messages>

40.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alphacore'.
<suppressed ~93 debug messages>
Removed a total of 31 cells.

40.3. Executing OPT_DFF pass (perform DFF optimizations).

40.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alphacore..
Removed 19 unused cells and 5167 unused wires.
<suppressed ~43 debug messages>

40.5. Finished fast OPT passes.

41. Executing HIERARCHY pass (managing design hierarchy).

41.1. Analyzing design hierarchy..
Top module:  \alphacore

41.2. Analyzing design hierarchy..
Top module:  \alphacore
Removed 0 unused modules.

42. Printing statistics.

=== alphacore ===

   Number of wires:               9513
   Number of wire bits:          12196
   Number of public wires:         183
   Number of public wire bits:    2354
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:              11598
     $_ANDNOT_                    2223
     $_AND_                        562
     $_DFFE_PN_                      7
     $_DFFE_PP_                   1270
     $_DFF_P_                      149
     $_MUX_                       3612
     $_NAND_                       380
     $_NOR_                        399
     $_NOT_                        256
     $_ORNOT_                      238
     $_OR_                        1621
     $_SDFFCE_PN0P_                  3
     $_SDFFCE_PP0P_                  6
     $_SDFFE_PN0P_                 193
     $_SDFFE_PN1P_                  32
     $_SDFFE_PP0P_                   2
     $_SDFFE_PP1P_                   3
     $_SDFF_PN0_                   100
     $_SDFF_PP0_                     2
     $_XNOR_                       119
     $_XOR_                        421

43. Executing CHECK pass (checking for obvious problems).
Checking module alphacore...
Found and reported 0 problems.

44. Generating Graphviz representation of design.
Writing dot description to `/openlane/designs/alphacore/runs/RUN_2023.12.03_09.03.48/tmp/synthesis/post_techmap.dot'.
Dumping module alphacore to page 1.

45. Executing SHARE pass (SAT-based resource sharing).

46. Executing OPT pass (performing simple optimizations).

46.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alphacore.

46.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alphacore'.
Removed a total of 0 cells.

46.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alphacore..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

46.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alphacore.
Performed a total of 0 changes.

46.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alphacore'.
Removed a total of 0 cells.

46.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $auto$ff.cc:266:slice$16554 ($_SDFFE_PN0P_) from module alphacore (D = $abc$28010$new_n7336, Q = \reg_next_pc [0]).

46.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alphacore..
Removed 1 unused cells and 2 unused wires.
<suppressed ~2 debug messages>

46.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module alphacore.

46.9. Rerunning OPT passes. (Maybe there is more to do..)

46.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alphacore..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

46.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alphacore.
Performed a total of 0 changes.

46.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alphacore'.
Removed a total of 0 cells.

46.13. Executing OPT_DFF pass (perform DFF optimizations).

46.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alphacore..

46.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module alphacore.

46.16. Finished OPT passes. (There is nothing left to do.)

47. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alphacore..
Removed 0 unused cells and 22 unused wires.
<suppressed ~22 debug messages>

48. Printing statistics.

=== alphacore ===

   Number of wires:               9492
   Number of wire bits:          11924
   Number of public wires:         161
   Number of public wire bits:    2112
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:              11599
     $_ANDNOT_                    2223
     $_AND_                        563
     $_DFFE_PN_                      7
     $_DFFE_PP_                   1270
     $_DFF_P_                      149
     $_MUX_                       3611
     $_NAND_                       380
     $_NOR_                        399
     $_NOT_                        257
     $_ORNOT_                      238
     $_OR_                        1621
     $_SDFFCE_PN0P_                  3
     $_SDFFCE_PP0P_                  6
     $_SDFFE_PN0P_                 193
     $_SDFFE_PN1P_                  32
     $_SDFFE_PP0P_                   2
     $_SDFFE_PP1P_                   3
     $_SDFF_PN0_                   100
     $_SDFF_PP0_                     2
     $_XNOR_                       119
     $_XOR_                        421

mapping tbuf

49. Executing TECHMAP pass (map to technology primitives).

49.1. Executing Verilog-2005 frontend: /home/vsduser/Desktop/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v
Parsing Verilog input from `/home/vsduser/Desktop/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v' to AST representation.
Generating RTLIL representation for module `\$_TBUF_'.
Successfully finished Verilog frontend.

49.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

50. Executing SIMPLEMAP pass (map simple cells to gate primitives).

51. Executing TECHMAP pass (map to technology primitives).

51.1. Executing Verilog-2005 frontend: /home/vsduser/Desktop/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v
Parsing Verilog input from `/home/vsduser/Desktop/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Successfully finished Verilog frontend.

51.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

52. Executing SIMPLEMAP pass (map simple cells to gate primitives).

53. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell sky130_fd_sc_hd__dfxtp_2 (noninv, pins=3, area=21.27) is a direct match for cell type $_DFF_P_.
  cell sky130_fd_sc_hd__dfrtp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN0_.
  cell sky130_fd_sc_hd__dfstp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN1_.
  cell sky130_fd_sc_hd__dfbbn_2 (noninv, pins=6, area=35.03) is a direct match for cell type $_DFFSR_NNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \sky130_fd_sc_hd__dfxtp_2 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \sky130_fd_sc_hd__dfrtp_2 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RESET_B( R));
    \sky130_fd_sc_hd__dfstp_2 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SET_B( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    \sky130_fd_sc_hd__dfbbn_2 _DFFSR_NNN_ (.CLK_N( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

53.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\alphacore':
  mapped 1767 $_DFF_P_ cells to \sky130_fd_sc_hd__dfxtp_2 cells.

54. Printing statistics.

=== alphacore ===

   Number of wires:              11349
   Number of wire bits:          13781
   Number of public wires:         161
   Number of public wire bits:    2112
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:              13456
     $_ANDNOT_                    2223
     $_AND_                        563
     $_MUX_                       5468
     $_NAND_                       380
     $_NOR_                        399
     $_NOT_                        257
     $_ORNOT_                      238
     $_OR_                        1621
     $_XNOR_                       119
     $_XOR_                        421
     sky130_fd_sc_hd__dfxtp_2     1767

[INFO]: USING STRATEGY AREA 0

55. Executing ABC pass (technology mapping using ABC).

55.1. Extracting gate netlist of module `\alphacore' to `/tmp/yosys-abc-qynSOM/input.blif'..
Extracted 11689 gates and 13524 wires to a netlist network with 1833 inputs and 1827 outputs.

55.1.1. Executing ABC.
Running ABC command: "/build/bin/yosys-abc" -s -f /tmp/yosys-abc-qynSOM/abc.script 2>&1
ABC: ABC command line: "source /tmp/yosys-abc-qynSOM/abc.script".
ABC: 
ABC: + read_blif /tmp/yosys-abc-qynSOM/input.blif 
ABC: + read_lib -w /openlane/designs/alphacore/runs/RUN_2023.12.03_09.03.48/tmp/synthesis/trimmed.lib 
ABC: Parsing finished successfully.  Parsing time =     0.10 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_8".
ABC: Library "sky130A_merged" from "/openlane/designs/alphacore/runs/RUN_2023.12.03_09.03.48/tmp/synthesis/trimmed.lib" has 175 cells (17 skipped: 14 seq; 3 tri-state; 0 no func; 0 dont_use).  Time =     0.13 sec
ABC: Memory =    9.54 MB. Time =     0.13 sec
ABC: Warning: Detected 2 multi-output gates (for example, "sky130_fd_sc_hd__fa_1").
ABC: + read_constr -v /openlane/designs/alphacore/runs/RUN_2023.12.03_09.03.48/tmp/synthesis/synthesis.sdc 
ABC: Setting driving cell to be "sky130_fd_sc_hd__inv_2".
ABC: Setting output load to be 33.442001.
ABC: + read_constr /openlane/designs/alphacore/runs/RUN_2023.12.03_09.03.48/tmp/synthesis/synthesis.sdc 
ABC: + fx 
ABC: + mfs 
ABC: + strash 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + retime -D -D 1100000.0 -M 5 
ABC: + scleanup 
ABC: Error: The network is combinational.
ABC: + fraig_store 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + fraig_restore 
ABC: + amap -m -Q 0.1 -F 20 -A 20 -C 5000 
ABC: + retime -D -D 1100000.0 
ABC: + &get -n 
ABC: + &st 
ABC: + &dch 
ABC: + &nf 
ABC: + &put 
ABC: + buffer -N 10 -S 750.0 
ABC: + upsize -D 1100000.0 
ABC: Current delay (7507.75 ps) does not exceed the target delay (1100000.00 ps). Upsizing is not performed.
ABC: + dnsize -D 1100000.0 
ABC: + stime -p 
ABC: WireLoad = "none"  Gates =   8484 ( 25.7 %)   Cap = 11.7 ff (  9.8 %)   Area =    75310.98 ( 67.3 %)   Delay =  8036.00 ps  (  0.4 %)               
ABC: Path  0 --      71 : 0    7 pi                       A =   0.00  Df =  69.3  -38.3 ps  S = 102.9 ps  Cin =  0.0 ff  Cout =  21.2 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --    3807 : 2    3 sky130_fd_sc_hd__and2b_2 A =   8.76  Df = 301.7  -55.5 ps  S =  53.6 ps  Cin =  1.6 ff  Cout =   6.7 ff  Cmax = 310.4 ff  G =  403  
ABC: Path  2 --    3810 : 4    1 sky130_fd_sc_hd__or4_2   A =   8.76  Df = 923.4 -575.2 ps  S =  92.2 ps  Cin =  1.5 ff  Cout =   1.8 ff  Cmax = 310.4 ff  G =  114  
ABC: Path  3 --    3821 : 4    1 sky130_fd_sc_hd__or4_2   A =   8.76  Df =1564.8-1121.8 ps  S =  96.0 ps  Cin =  1.5 ff  Cout =   2.5 ff  Cmax = 310.4 ff  G =  160  
ABC: Path  4 --    3844 : 4    6 sky130_fd_sc_hd__o211a_2 A =  10.01  Df =1875.0-1212.5 ps  S = 107.6 ps  Cin =  2.4 ff  Cout =  15.2 ff  Cmax = 268.3 ff  G =  608  
ABC: Path  5 --    9243 : 4    5 sky130_fd_sc_hd__and4b_2 A =  11.26  Df =2197.5-1271.8 ps  S = 101.5 ps  Cin =  1.6 ff  Cout =  12.8 ff  Cmax = 297.6 ff  G =  782  
ABC: Path  6 --    9251 : 4    5 sky130_fd_sc_hd__and4_2  A =  10.01  Df =2478.8-1283.9 ps  S = 106.0 ps  Cin =  1.5 ff  Cout =  14.1 ff  Cmax = 300.3 ff  G =  879  
ABC: Path  7 --    9260 : 4    5 sky130_fd_sc_hd__and4_2  A =  10.01  Df =2761.1-1297.5 ps  S = 106.0 ps  Cin =  1.5 ff  Cout =  14.1 ff  Cmax = 300.3 ff  G =  879  
ABC: Path  8 --    9269 : 4    6 sky130_fd_sc_hd__and4_2  A =  10.01  Df =3058.5-1318.0 ps  S = 123.2 ps  Cin =  1.5 ff  Cout =  17.8 ff  Cmax = 300.3 ff  G = 1119  
ABC: Path  9 --    9280 : 4    6 sky130_fd_sc_hd__and4_2  A =  10.01  Df =3359.6-1338.9 ps  S = 123.2 ps  Cin =  1.5 ff  Cout =  17.8 ff  Cmax = 300.3 ff  G = 1119  
ABC: Path 10 --    9289 : 4    6 sky130_fd_sc_hd__and4_2  A =  10.01  Df =3651.6-1355.4 ps  S = 112.8 ps  Cin =  1.5 ff  Cout =  15.6 ff  Cmax = 300.3 ff  G =  977  
ABC: Path 11 --    9306 : 4    5 sky130_fd_sc_hd__and4_2  A =  10.01  Df =3931.4-1374.9 ps  S = 106.0 ps  Cin =  1.5 ff  Cout =  14.1 ff  Cmax = 300.3 ff  G =  879  
ABC: Path 12 --    9315 : 4    6 sky130_fd_sc_hd__and4_2  A =  10.01  Df =4228.8-1395.3 ps  S = 123.2 ps  Cin =  1.5 ff  Cout =  17.8 ff  Cmax = 300.3 ff  G = 1119  
ABC: Path 13 --    9324 : 4    6 sky130_fd_sc_hd__and4_2  A =  10.01  Df =4529.9-1416.2 ps  S = 123.2 ps  Cin =  1.5 ff  Cout =  17.8 ff  Cmax = 300.3 ff  G = 1119  
ABC: Path 14 --    9334 : 4    6 sky130_fd_sc_hd__and4_2  A =  10.01  Df =4831.0-1437.1 ps  S = 123.2 ps  Cin =  1.5 ff  Cout =  17.8 ff  Cmax = 300.3 ff  G = 1119  
ABC: Path 15 --    9343 : 4    6 sky130_fd_sc_hd__and4_2  A =  10.01  Df =5132.1-1458.0 ps  S = 123.2 ps  Cin =  1.5 ff  Cout =  17.8 ff  Cmax = 300.3 ff  G = 1119  
ABC: Path 16 --    9353 : 4    6 sky130_fd_sc_hd__and4_2  A =  10.01  Df =5424.0-1474.5 ps  S = 112.8 ps  Cin =  1.5 ff  Cout =  15.6 ff  Cmax = 300.3 ff  G =  977  
ABC: Path 17 --    9370 : 4    7 sky130_fd_sc_hd__and4_2  A =  10.01  Df =5719.3-1501.1 ps  S = 123.7 ps  Cin =  1.5 ff  Cout =  17.9 ff  Cmax = 300.3 ff  G = 1128  
ABC: Path 18 --    9392 : 4    5 sky130_fd_sc_hd__and4_2  A =  10.01  Df =5998.6-1534.8 ps  S = 106.0 ps  Cin =  1.5 ff  Cout =  14.1 ff  Cmax = 300.3 ff  G =  874  
ABC: Path 19 --    9400 : 4    1 sky130_fd_sc_hd__and4_2  A =  10.01  Df =6216.5-1525.0 ps  S =  47.4 ps  Cin =  1.5 ff  Cout =   2.2 ff  Cmax = 300.3 ff  G =  138  
ABC: Path 20 --    9401 : 1    7 sky130_fd_sc_hd__buf_1   A =   3.75  Df =6428.6-1587.7 ps  S = 233.6 ps  Cin =  2.1 ff  Cout =  19.2 ff  Cmax = 130.0 ff  G =  876  
ABC: Path 21 --    9414 : 4    5 sky130_fd_sc_hd__and4_2  A =  10.01  Df =6736.2-1616.7 ps  S = 106.3 ps  Cin =  1.5 ff  Cout =  14.1 ff  Cmax = 300.3 ff  G =  879  
ABC: Path 22 --    9424 : 4    6 sky130_fd_sc_hd__and4_2  A =  10.01  Df =7033.7-1637.2 ps  S = 123.2 ps  Cin =  1.5 ff  Cout =  17.8 ff  Cmax = 300.3 ff  G = 1119  
ABC: Path 23 --    9433 : 4    6 sky130_fd_sc_hd__and4_2  A =  10.01  Df =7334.8-1658.1 ps  S = 123.2 ps  Cin =  1.5 ff  Cout =  17.8 ff  Cmax = 300.3 ff  G = 1119  
ABC: Path 24 --    9442 : 4    5 sky130_fd_sc_hd__and4_2  A =  10.01  Df =7643.6-1682.9 ps  S = 132.0 ps  Cin =  1.5 ff  Cout =  19.8 ff  Cmax = 300.3 ff  G = 1240  
ABC: Path 25 --    9447 : 3    1 sky130_fd_sc_hd__a21oi_2 A =   8.76  Df =7716.3-1608.1 ps  S = 100.1 ps  Cin =  4.6 ff  Cout =   4.6 ff  Cmax = 128.2 ff  G =   96  
ABC: Path 26 --    9449 : 2    1 sky130_fd_sc_hd__nor2_2  A =   6.26  Df =8036.0 -135.7 ps  S = 373.5 ps  Cin =  4.4 ff  Cout =  33.4 ff  Cmax = 141.9 ff  G =  756  
ABC: Start-point = pi70 (\irq_mask [2]).  End-point = po1076 ($auto$rtlil.cc:2669:MuxGate$39833).
ABC: + print_stats -m 
ABC: netlist                       : i/o = 1833/ 1827  lat =    0  nd =  8484  edge =  23276  area =75308.29  delay =27.00  lev = 27
ABC: + write_blif /tmp/yosys-abc-qynSOM/output.blif 

55.1.2. Re-integrating ABC results.
ABC RESULTS:   sky130_fd_sc_hd__a2111oi_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nor4b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__mux2_1 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o2111a_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a311oi_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a2111o_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__o221ai_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nand3b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nand2b_2 cells:        9
ABC RESULTS:   sky130_fd_sc_hd__nand4b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or4bb_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a21boi_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__o31ai_2 cells:       10
ABC RESULTS:   sky130_fd_sc_hd__o21bai_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__nand4_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a22oi_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__nand3_2 cells:       13
ABC RESULTS:   sky130_fd_sc_hd__o211ai_2 cells:       10
ABC RESULTS:   sky130_fd_sc_hd__o32a_2 cells:       10
ABC RESULTS:   sky130_fd_sc_hd__mux4_2 cells:      575
ABC RESULTS:   sky130_fd_sc_hd__a221oi_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__xnor2_2 cells:       50
ABC RESULTS:   sky130_fd_sc_hd__xor2_2 cells:       26
ABC RESULTS:   sky130_fd_sc_hd__a211oi_2 cells:        8
ABC RESULTS:   sky130_fd_sc_hd__o311a_2 cells:        8
ABC RESULTS:   sky130_fd_sc_hd__o22ai_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__a31oi_2 cells:        8
ABC RESULTS:   sky130_fd_sc_hd__o2bb2a_2 cells:       11
ABC RESULTS:   sky130_fd_sc_hd__and2b_2 cells:       70
ABC RESULTS:   sky130_fd_sc_hd__nor2b_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__or2b_2 cells:       33
ABC RESULTS:   sky130_fd_sc_hd__or3b_2 cells:       26
ABC RESULTS:   sky130_fd_sc_hd__and3b_2 cells:       55
ABC RESULTS:   sky130_fd_sc_hd__nor4_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__or4_2 cells:       64
ABC RESULTS:   sky130_fd_sc_hd__or4b_2 cells:       10
ABC RESULTS:   sky130_fd_sc_hd__o21ai_2 cells:      155
ABC RESULTS:   sky130_fd_sc_hd__a31o_2 cells:      173
ABC RESULTS:   sky130_fd_sc_hd__a221o_2 cells:      232
ABC RESULTS:   sky130_fd_sc_hd__and4b_2 cells:        8
ABC RESULTS:   sky130_fd_sc_hd__o221a_2 cells:       32
ABC RESULTS:   sky130_fd_sc_hd__a311o_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__a2bb2o_2 cells:       21
ABC RESULTS:   sky130_fd_sc_hd__a21oi_2 cells:      194
ABC RESULTS:   sky130_fd_sc_hd__o21a_2 cells:      170
ABC RESULTS:   sky130_fd_sc_hd__o21ba_2 cells:       14
ABC RESULTS:   sky130_fd_sc_hd__o31a_2 cells:       16
ABC RESULTS:   sky130_fd_sc_hd__o41a_2 cells:        7
ABC RESULTS:   sky130_fd_sc_hd__inv_2 cells:      110
ABC RESULTS:   sky130_fd_sc_hd__or2_2 cells:      343
ABC RESULTS:   sky130_fd_sc_hd__a32o_2 cells:       52
ABC RESULTS:   sky130_fd_sc_hd__a41o_2 cells:        9
ABC RESULTS:   sky130_fd_sc_hd__nor3_2 cells:       17
ABC RESULTS:   sky130_fd_sc_hd__a22o_2 cells:      294
ABC RESULTS:   sky130_fd_sc_hd__and4_2 cells:       52
ABC RESULTS:   sky130_fd_sc_hd__o311ai_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a211o_2 cells:      150
ABC RESULTS:   sky130_fd_sc_hd__and2_2 cells:      176
ABC RESULTS:   sky130_fd_sc_hd__a21o_2 cells:      288
ABC RESULTS:   sky130_fd_sc_hd__and3_2 cells:      151
ABC RESULTS:   sky130_fd_sc_hd__and4bb_2 cells:       10
ABC RESULTS:   sky130_fd_sc_hd__nor3b_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__o22a_2 cells:       89
ABC RESULTS:   sky130_fd_sc_hd__a21bo_2 cells:       29
ABC RESULTS:   sky130_fd_sc_hd__nor2_2 cells:      361
ABC RESULTS:   sky130_fd_sc_hd__o211a_2 cells:      188
ABC RESULTS:   sky130_fd_sc_hd__or3_2 cells:       71
ABC RESULTS:   sky130_fd_sc_hd__nand2_2 cells:      336
ABC RESULTS:   sky130_fd_sc_hd__mux2_2 cells:     1614
ABC RESULTS:   sky130_fd_sc_hd__buf_1 cells:     2072
ABC RESULTS:        internal signals:     9864
ABC RESULTS:           input signals:     1833
ABC RESULTS:          output signals:     1827
Removing temp directory.

56. Executing SETUNDEF pass (replace undef values with defined constants).

57. Executing HILOMAP pass (mapping to constant drivers).

58. Executing SPLITNETS pass (splitting up multi-bit signals).

59. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alphacore..
Removed 4 unused cells and 13775 unused wires.
<suppressed ~117 debug messages>

60. Executing INSBUF pass (insert buffer cells for connected wires).
Add alphacore/$auto$insbuf.cc:97:execute$50255: \cpi_rs2 [0] -> \mem_la_wdata [0]
Add alphacore/$auto$insbuf.cc:97:execute$50256: \cpi_rs2 [1] -> \mem_la_wdata [1]
Add alphacore/$auto$insbuf.cc:97:execute$50257: \cpi_rs2 [2] -> \mem_la_wdata [2]
Add alphacore/$auto$insbuf.cc:97:execute$50258: \cpi_rs2 [3] -> \mem_la_wdata [3]
Add alphacore/$auto$insbuf.cc:97:execute$50259: \cpi_rs2 [4] -> \mem_la_wdata [4]
Add alphacore/$auto$insbuf.cc:97:execute$50260: \cpi_rs2 [5] -> \mem_la_wdata [5]
Add alphacore/$auto$insbuf.cc:97:execute$50261: \cpi_rs2 [6] -> \mem_la_wdata [6]
Add alphacore/$auto$insbuf.cc:97:execute$50262: \cpi_rs2 [7] -> \mem_la_wdata [7]

61. Executing CHECK pass (checking for obvious problems).
Checking module alphacore...
Warning: Wire alphacore.\trap is used but has no driver.
Warning: Wire alphacore.\trace_valid is used but has no driver.
Warning: Wire alphacore.\trace_data [35] is used but has no driver.
Warning: Wire alphacore.\trace_data [34] is used but has no driver.
Warning: Wire alphacore.\trace_data [33] is used but has no driver.
Warning: Wire alphacore.\trace_data [32] is used but has no driver.
Warning: Wire alphacore.\trace_data [31] is used but has no driver.
Warning: Wire alphacore.\trace_data [30] is used but has no driver.
Warning: Wire alphacore.\trace_data [29] is used but has no driver.
Warning: Wire alphacore.\trace_data [28] is used but has no driver.
Warning: Wire alphacore.\trace_data [27] is used but has no driver.
Warning: Wire alphacore.\trace_data [26] is used but has no driver.
Warning: Wire alphacore.\trace_data [25] is used but has no driver.
Warning: Wire alphacore.\trace_data [24] is used but has no driver.
Warning: Wire alphacore.\trace_data [23] is used but has no driver.
Warning: Wire alphacore.\trace_data [22] is used but has no driver.
Warning: Wire alphacore.\trace_data [21] is used but has no driver.
Warning: Wire alphacore.\trace_data [20] is used but has no driver.
Warning: Wire alphacore.\trace_data [19] is used but has no driver.
Warning: Wire alphacore.\trace_data [18] is used but has no driver.
Warning: Wire alphacore.\trace_data [17] is used but has no driver.
Warning: Wire alphacore.\trace_data [16] is used but has no driver.
Warning: Wire alphacore.\trace_data [15] is used but has no driver.
Warning: Wire alphacore.\trace_data [14] is used but has no driver.
Warning: Wire alphacore.\trace_data [13] is used but has no driver.
Warning: Wire alphacore.\trace_data [12] is used but has no driver.
Warning: Wire alphacore.\trace_data [11] is used but has no driver.
Warning: Wire alphacore.\trace_data [10] is used but has no driver.
Warning: Wire alphacore.\trace_data [9] is used but has no driver.
Warning: Wire alphacore.\trace_data [8] is used but has no driver.
Warning: Wire alphacore.\trace_data [7] is used but has no driver.
Warning: Wire alphacore.\trace_data [6] is used but has no driver.
Warning: Wire alphacore.\trace_data [5] is used but has no driver.
Warning: Wire alphacore.\trace_data [4] is used but has no driver.
Warning: Wire alphacore.\trace_data [3] is used but has no driver.
Warning: Wire alphacore.\trace_data [2] is used but has no driver.
Warning: Wire alphacore.\trace_data [1] is used but has no driver.
Warning: Wire alphacore.\trace_data [0] is used but has no driver.
Warning: Wire alphacore.\mem_wstrb [3] is used but has no driver.
Warning: Wire alphacore.\mem_wstrb [2] is used but has no driver.
Warning: Wire alphacore.\mem_wstrb [1] is used but has no driver.
Warning: Wire alphacore.\mem_wstrb [0] is used but has no driver.
Warning: Wire alphacore.\mem_wdata [31] is used but has no driver.
Warning: Wire alphacore.\mem_wdata [30] is used but has no driver.
Warning: Wire alphacore.\mem_wdata [29] is used but has no driver.
Warning: Wire alphacore.\mem_wdata [28] is used but has no driver.
Warning: Wire alphacore.\mem_wdata [27] is used but has no driver.
Warning: Wire alphacore.\mem_wdata [26] is used but has no driver.
Warning: Wire alphacore.\mem_wdata [25] is used but has no driver.
Warning: Wire alphacore.\mem_wdata [24] is used but has no driver.
Warning: Wire alphacore.\mem_wdata [23] is used but has no driver.
Warning: Wire alphacore.\mem_wdata [22] is used but has no driver.
Warning: Wire alphacore.\mem_wdata [21] is used but has no driver.
Warning: Wire alphacore.\mem_wdata [20] is used but has no driver.
Warning: Wire alphacore.\mem_wdata [19] is used but has no driver.
Warning: Wire alphacore.\mem_wdata [18] is used but has no driver.
Warning: Wire alphacore.\mem_wdata [17] is used but has no driver.
Warning: Wire alphacore.\mem_wdata [16] is used but has no driver.
Warning: Wire alphacore.\mem_wdata [15] is used but has no driver.
Warning: Wire alphacore.\mem_wdata [14] is used but has no driver.
Warning: Wire alphacore.\mem_wdata [13] is used but has no driver.
Warning: Wire alphacore.\mem_wdata [12] is used but has no driver.
Warning: Wire alphacore.\mem_wdata [11] is used but has no driver.
Warning: Wire alphacore.\mem_wdata [10] is used but has no driver.
Warning: Wire alphacore.\mem_wdata [9] is used but has no driver.
Warning: Wire alphacore.\mem_wdata [8] is used but has no driver.
Warning: Wire alphacore.\mem_wdata [7] is used but has no driver.
Warning: Wire alphacore.\mem_wdata [6] is used but has no driver.
Warning: Wire alphacore.\mem_wdata [5] is used but has no driver.
Warning: Wire alphacore.\mem_wdata [4] is used but has no driver.
Warning: Wire alphacore.\mem_wdata [3] is used but has no driver.
Warning: Wire alphacore.\mem_wdata [2] is used but has no driver.
Warning: Wire alphacore.\mem_wdata [1] is used but has no driver.
Warning: Wire alphacore.\mem_wdata [0] is used but has no driver.
Warning: Wire alphacore.\mem_valid is used but has no driver.
Warning: Wire alphacore.\mem_la_wstrb [3] is used but has no driver.
Warning: Wire alphacore.\mem_la_wstrb [2] is used but has no driver.
Warning: Wire alphacore.\mem_la_wstrb [1] is used but has no driver.
Warning: Wire alphacore.\mem_la_wstrb [0] is used but has no driver.
Warning: Wire alphacore.\mem_la_write is used but has no driver.
Warning: Wire alphacore.\mem_la_wdata [31] is used but has no driver.
Warning: Wire alphacore.\mem_la_wdata [30] is used but has no driver.
Warning: Wire alphacore.\mem_la_wdata [29] is used but has no driver.
Warning: Wire alphacore.\mem_la_wdata [28] is used but has no driver.
Warning: Wire alphacore.\mem_la_wdata [27] is used but has no driver.
Warning: Wire alphacore.\mem_la_wdata [26] is used but has no driver.
Warning: Wire alphacore.\mem_la_wdata [25] is used but has no driver.
Warning: Wire alphacore.\mem_la_wdata [24] is used but has no driver.
Warning: Wire alphacore.\mem_la_wdata [23] is used but has no driver.
Warning: Wire alphacore.\mem_la_wdata [22] is used but has no driver.
Warning: Wire alphacore.\mem_la_wdata [21] is used but has no driver.
Warning: Wire alphacore.\mem_la_wdata [20] is used but has no driver.
Warning: Wire alphacore.\mem_la_wdata [19] is used but has no driver.
Warning: Wire alphacore.\mem_la_wdata [18] is used but has no driver.
Warning: Wire alphacore.\mem_la_wdata [17] is used but has no driver.
Warning: Wire alphacore.\mem_la_wdata [16] is used but has no driver.
Warning: Wire alphacore.\mem_la_wdata [15] is used but has no driver.
Warning: Wire alphacore.\mem_la_wdata [14] is used but has no driver.
Warning: Wire alphacore.\mem_la_wdata [13] is used but has no driver.
Warning: Wire alphacore.\mem_la_wdata [12] is used but has no driver.
Warning: Wire alphacore.\mem_la_wdata [11] is used but has no driver.
Warning: Wire alphacore.\mem_la_wdata [10] is used but has no driver.
Warning: Wire alphacore.\mem_la_wdata [9] is used but has no driver.
Warning: Wire alphacore.\mem_la_wdata [8] is used but has no driver.
Warning: Wire alphacore.\mem_la_wdata [7] is used but has no driver.
Warning: Wire alphacore.\mem_la_wdata [6] is used but has no driver.
Warning: Wire alphacore.\mem_la_wdata [5] is used but has no driver.
Warning: Wire alphacore.\mem_la_wdata [4] is used but has no driver.
Warning: Wire alphacore.\mem_la_wdata [3] is used but has no driver.
Warning: Wire alphacore.\mem_la_wdata [2] is used but has no driver.
Warning: Wire alphacore.\mem_la_wdata [1] is used but has no driver.
Warning: Wire alphacore.\mem_la_wdata [0] is used but has no driver.
Warning: Wire alphacore.\mem_la_read is used but has no driver.
Warning: Wire alphacore.\mem_la_addr [31] is used but has no driver.
Warning: Wire alphacore.\mem_la_addr [30] is used but has no driver.
Warning: Wire alphacore.\mem_la_addr [29] is used but has no driver.
Warning: Wire alphacore.\mem_la_addr [28] is used but has no driver.
Warning: Wire alphacore.\mem_la_addr [27] is used but has no driver.
Warning: Wire alphacore.\mem_la_addr [26] is used but has no driver.
Warning: Wire alphacore.\mem_la_addr [25] is used but has no driver.
Warning: Wire alphacore.\mem_la_addr [24] is used but has no driver.
Warning: Wire alphacore.\mem_la_addr [23] is used but has no driver.
Warning: Wire alphacore.\mem_la_addr [22] is used but has no driver.
Warning: Wire alphacore.\mem_la_addr [21] is used but has no driver.
Warning: Wire alphacore.\mem_la_addr [20] is used but has no driver.
Warning: Wire alphacore.\mem_la_addr [19] is used but has no driver.
Warning: Wire alphacore.\mem_la_addr [18] is used but has no driver.
Warning: Wire alphacore.\mem_la_addr [17] is used but has no driver.
Warning: Wire alphacore.\mem_la_addr [16] is used but has no driver.
Warning: Wire alphacore.\mem_la_addr [15] is used but has no driver.
Warning: Wire alphacore.\mem_la_addr [14] is used but has no driver.
Warning: Wire alphacore.\mem_la_addr [13] is used but has no driver.
Warning: Wire alphacore.\mem_la_addr [12] is used but has no driver.
Warning: Wire alphacore.\mem_la_addr [11] is used but has no driver.
Warning: Wire alphacore.\mem_la_addr [10] is used but has no driver.
Warning: Wire alphacore.\mem_la_addr [9] is used but has no driver.
Warning: Wire alphacore.\mem_la_addr [8] is used but has no driver.
Warning: Wire alphacore.\mem_la_addr [7] is used but has no driver.
Warning: Wire alphacore.\mem_la_addr [6] is used but has no driver.
Warning: Wire alphacore.\mem_la_addr [5] is used but has no driver.
Warning: Wire alphacore.\mem_la_addr [4] is used but has no driver.
Warning: Wire alphacore.\mem_la_addr [3] is used but has no driver.
Warning: Wire alphacore.\mem_la_addr [2] is used but has no driver.
Warning: Wire alphacore.\mem_la_addr [1] is used but has no driver.
Warning: Wire alphacore.\mem_la_addr [0] is used but has no driver.
Warning: Wire alphacore.\mem_instr is used but has no driver.
Warning: Wire alphacore.\mem_addr [31] is used but has no driver.
Warning: Wire alphacore.\mem_addr [30] is used but has no driver.
Warning: Wire alphacore.\mem_addr [29] is used but has no driver.
Warning: Wire alphacore.\mem_addr [28] is used but has no driver.
Warning: Wire alphacore.\mem_addr [27] is used but has no driver.
Warning: Wire alphacore.\mem_addr [26] is used but has no driver.
Warning: Wire alphacore.\mem_addr [25] is used but has no driver.
Warning: Wire alphacore.\mem_addr [24] is used but has no driver.
Warning: Wire alphacore.\mem_addr [23] is used but has no driver.
Warning: Wire alphacore.\mem_addr [22] is used but has no driver.
Warning: Wire alphacore.\mem_addr [21] is used but has no driver.
Warning: Wire alphacore.\mem_addr [20] is used but has no driver.
Warning: Wire alphacore.\mem_addr [19] is used but has no driver.
Warning: Wire alphacore.\mem_addr [18] is used but has no driver.
Warning: Wire alphacore.\mem_addr [17] is used but has no driver.
Warning: Wire alphacore.\mem_addr [16] is used but has no driver.
Warning: Wire alphacore.\mem_addr [15] is used but has no driver.
Warning: Wire alphacore.\mem_addr [14] is used but has no driver.
Warning: Wire alphacore.\mem_addr [13] is used but has no driver.
Warning: Wire alphacore.\mem_addr [12] is used but has no driver.
Warning: Wire alphacore.\mem_addr [11] is used but has no driver.
Warning: Wire alphacore.\mem_addr [10] is used but has no driver.
Warning: Wire alphacore.\mem_addr [9] is used but has no driver.
Warning: Wire alphacore.\mem_addr [8] is used but has no driver.
Warning: Wire alphacore.\mem_addr [7] is used but has no driver.
Warning: Wire alphacore.\mem_addr [6] is used but has no driver.
Warning: Wire alphacore.\mem_addr [5] is used but has no driver.
Warning: Wire alphacore.\mem_addr [4] is used but has no driver.
Warning: Wire alphacore.\mem_addr [3] is used but has no driver.
Warning: Wire alphacore.\mem_addr [2] is used but has no driver.
Warning: Wire alphacore.\mem_addr [1] is used but has no driver.
Warning: Wire alphacore.\mem_addr [0] is used but has no driver.
Warning: Wire alphacore.\eoi [31] is used but has no driver.
Warning: Wire alphacore.\eoi [30] is used but has no driver.
Warning: Wire alphacore.\eoi [29] is used but has no driver.
Warning: Wire alphacore.\eoi [28] is used but has no driver.
Warning: Wire alphacore.\eoi [27] is used but has no driver.
Warning: Wire alphacore.\eoi [26] is used but has no driver.
Warning: Wire alphacore.\eoi [25] is used but has no driver.
Warning: Wire alphacore.\eoi [24] is used but has no driver.
Warning: Wire alphacore.\eoi [23] is used but has no driver.
Warning: Wire alphacore.\eoi [22] is used but has no driver.
Warning: Wire alphacore.\eoi [21] is used but has no driver.
Warning: Wire alphacore.\eoi [20] is used but has no driver.
Warning: Wire alphacore.\eoi [19] is used but has no driver.
Warning: Wire alphacore.\eoi [18] is used but has no driver.
Warning: Wire alphacore.\eoi [17] is used but has no driver.
Warning: Wire alphacore.\eoi [16] is used but has no driver.
Warning: Wire alphacore.\eoi [15] is used but has no driver.
Warning: Wire alphacore.\eoi [14] is used but has no driver.
Warning: Wire alphacore.\eoi [13] is used but has no driver.
Warning: Wire alphacore.\eoi [12] is used but has no driver.
Warning: Wire alphacore.\eoi [11] is used but has no driver.
Warning: Wire alphacore.\eoi [10] is used but has no driver.
Warning: Wire alphacore.\eoi [9] is used but has no driver.
Warning: Wire alphacore.\eoi [8] is used but has no driver.
Warning: Wire alphacore.\eoi [7] is used but has no driver.
Warning: Wire alphacore.\eoi [6] is used but has no driver.
Warning: Wire alphacore.\eoi [5] is used but has no driver.
Warning: Wire alphacore.\eoi [4] is used but has no driver.
Warning: Wire alphacore.\eoi [3] is used but has no driver.
Warning: Wire alphacore.\eoi [2] is used but has no driver.
Warning: Wire alphacore.\eoi [1] is used but has no driver.
Warning: Wire alphacore.\eoi [0] is used but has no driver.
Warning: Wire alphacore.\cpi_valid is used but has no driver.
Warning: Wire alphacore.\cpi_rs2 [31] is used but has no driver.
Warning: Wire alphacore.\cpi_rs2 [30] is used but has no driver.
Warning: Wire alphacore.\cpi_rs2 [29] is used but has no driver.
Warning: Wire alphacore.\cpi_rs2 [28] is used but has no driver.
Warning: Wire alphacore.\cpi_rs2 [27] is used but has no driver.
Warning: Wire alphacore.\cpi_rs2 [26] is used but has no driver.
Warning: Wire alphacore.\cpi_rs2 [25] is used but has no driver.
Warning: Wire alphacore.\cpi_rs2 [24] is used but has no driver.
Warning: Wire alphacore.\cpi_rs2 [23] is used but has no driver.
Warning: Wire alphacore.\cpi_rs2 [22] is used but has no driver.
Warning: Wire alphacore.\cpi_rs2 [21] is used but has no driver.
Warning: Wire alphacore.\cpi_rs2 [20] is used but has no driver.
Warning: Wire alphacore.\cpi_rs2 [19] is used but has no driver.
Warning: Wire alphacore.\cpi_rs2 [18] is used but has no driver.
Warning: Wire alphacore.\cpi_rs2 [17] is used but has no driver.
Warning: Wire alphacore.\cpi_rs2 [16] is used but has no driver.
Warning: Wire alphacore.\cpi_rs2 [15] is used but has no driver.
Warning: Wire alphacore.\cpi_rs2 [14] is used but has no driver.
Warning: Wire alphacore.\cpi_rs2 [13] is used but has no driver.
Warning: Wire alphacore.\cpi_rs2 [12] is used but has no driver.
Warning: Wire alphacore.\cpi_rs2 [11] is used but has no driver.
Warning: Wire alphacore.\cpi_rs2 [10] is used but has no driver.
Warning: Wire alphacore.\cpi_rs2 [9] is used but has no driver.
Warning: Wire alphacore.\cpi_rs2 [8] is used but has no driver.
Warning: Wire alphacore.\cpi_rs2 [7] is used but has no driver.
Warning: Wire alphacore.\cpi_rs2 [6] is used but has no driver.
Warning: Wire alphacore.\cpi_rs2 [5] is used but has no driver.
Warning: Wire alphacore.\cpi_rs2 [4] is used but has no driver.
Warning: Wire alphacore.\cpi_rs2 [3] is used but has no driver.
Warning: Wire alphacore.\cpi_rs2 [2] is used but has no driver.
Warning: Wire alphacore.\cpi_rs2 [1] is used but has no driver.
Warning: Wire alphacore.\cpi_rs2 [0] is used but has no driver.
Warning: Wire alphacore.\cpi_rs1 [31] is used but has no driver.
Warning: Wire alphacore.\cpi_rs1 [30] is used but has no driver.
Warning: Wire alphacore.\cpi_rs1 [29] is used but has no driver.
Warning: Wire alphacore.\cpi_rs1 [28] is used but has no driver.
Warning: Wire alphacore.\cpi_rs1 [27] is used but has no driver.
Warning: Wire alphacore.\cpi_rs1 [26] is used but has no driver.
Warning: Wire alphacore.\cpi_rs1 [25] is used but has no driver.
Warning: Wire alphacore.\cpi_rs1 [24] is used but has no driver.
Warning: Wire alphacore.\cpi_rs1 [23] is used but has no driver.
Warning: Wire alphacore.\cpi_rs1 [22] is used but has no driver.
Warning: Wire alphacore.\cpi_rs1 [21] is used but has no driver.
Warning: Wire alphacore.\cpi_rs1 [20] is used but has no driver.
Warning: Wire alphacore.\cpi_rs1 [19] is used but has no driver.
Warning: Wire alphacore.\cpi_rs1 [18] is used but has no driver.
Warning: Wire alphacore.\cpi_rs1 [17] is used but has no driver.
Warning: Wire alphacore.\cpi_rs1 [16] is used but has no driver.
Warning: Wire alphacore.\cpi_rs1 [15] is used but has no driver.
Warning: Wire alphacore.\cpi_rs1 [14] is used but has no driver.
Warning: Wire alphacore.\cpi_rs1 [13] is used but has no driver.
Warning: Wire alphacore.\cpi_rs1 [12] is used but has no driver.
Warning: Wire alphacore.\cpi_rs1 [11] is used but has no driver.
Warning: Wire alphacore.\cpi_rs1 [10] is used but has no driver.
Warning: Wire alphacore.\cpi_rs1 [9] is used but has no driver.
Warning: Wire alphacore.\cpi_rs1 [8] is used but has no driver.
Warning: Wire alphacore.\cpi_rs1 [7] is used but has no driver.
Warning: Wire alphacore.\cpi_rs1 [6] is used but has no driver.
Warning: Wire alphacore.\cpi_rs1 [5] is used but has no driver.
Warning: Wire alphacore.\cpi_rs1 [4] is used but has no driver.
Warning: Wire alphacore.\cpi_rs1 [3] is used but has no driver.
Warning: Wire alphacore.\cpi_rs1 [2] is used but has no driver.
Warning: Wire alphacore.\cpi_rs1 [1] is used but has no driver.
Warning: Wire alphacore.\cpi_rs1 [0] is used but has no driver.
Warning: Wire alphacore.\cpi_insn [31] is used but has no driver.
Warning: Wire alphacore.\cpi_insn [30] is used but has no driver.
Warning: Wire alphacore.\cpi_insn [29] is used but has no driver.
Warning: Wire alphacore.\cpi_insn [28] is used but has no driver.
Warning: Wire alphacore.\cpi_insn [27] is used but has no driver.
Warning: Wire alphacore.\cpi_insn [26] is used but has no driver.
Warning: Wire alphacore.\cpi_insn [25] is used but has no driver.
Warning: Wire alphacore.\cpi_insn [24] is used but has no driver.
Warning: Wire alphacore.\cpi_insn [23] is used but has no driver.
Warning: Wire alphacore.\cpi_insn [22] is used but has no driver.
Warning: Wire alphacore.\cpi_insn [21] is used but has no driver.
Warning: Wire alphacore.\cpi_insn [20] is used but has no driver.
Warning: Wire alphacore.\cpi_insn [19] is used but has no driver.
Warning: Wire alphacore.\cpi_insn [18] is used but has no driver.
Warning: Wire alphacore.\cpi_insn [17] is used but has no driver.
Warning: Wire alphacore.\cpi_insn [16] is used but has no driver.
Warning: Wire alphacore.\cpi_insn [15] is used but has no driver.
Warning: Wire alphacore.\cpi_insn [14] is used but has no driver.
Warning: Wire alphacore.\cpi_insn [13] is used but has no driver.
Warning: Wire alphacore.\cpi_insn [12] is used but has no driver.
Warning: Wire alphacore.\cpi_insn [11] is used but has no driver.
Warning: Wire alphacore.\cpi_insn [10] is used but has no driver.
Warning: Wire alphacore.\cpi_insn [9] is used but has no driver.
Warning: Wire alphacore.\cpi_insn [8] is used but has no driver.
Warning: Wire alphacore.\cpi_insn [7] is used but has no driver.
Warning: Wire alphacore.\cpi_insn [6] is used but has no driver.
Warning: Wire alphacore.\cpi_insn [5] is used but has no driver.
Warning: Wire alphacore.\cpi_insn [4] is used but has no driver.
Warning: Wire alphacore.\cpi_insn [3] is used but has no driver.
Warning: Wire alphacore.\cpi_insn [2] is used but has no driver.
Warning: Wire alphacore.\cpi_insn [1] is used but has no driver.
Warning: Wire alphacore.\cpi_insn [0] is used but has no driver.
Found and reported 307 problems.

62. Printing statistics.

=== alphacore ===

   Number of wires:              10050
   Number of wire bits:          10401
   Number of public wires:        1649
   Number of public wire bits:    2000
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:              10333
     sky130_fd_sc_hd__a2111o_2       3
     sky130_fd_sc_hd__a2111oi_2      1
     sky130_fd_sc_hd__a211o_2      150
     sky130_fd_sc_hd__a211oi_2       8
     sky130_fd_sc_hd__a21bo_2       29
     sky130_fd_sc_hd__a21boi_2       6
     sky130_fd_sc_hd__a21o_2       288
     sky130_fd_sc_hd__a21oi_2      194
     sky130_fd_sc_hd__a221o_2      232
     sky130_fd_sc_hd__a221oi_2       5
     sky130_fd_sc_hd__a22o_2       294
     sky130_fd_sc_hd__a22oi_2        3
     sky130_fd_sc_hd__a2bb2o_2      21
     sky130_fd_sc_hd__a311o_2        6
     sky130_fd_sc_hd__a311oi_2       1
     sky130_fd_sc_hd__a31o_2       173
     sky130_fd_sc_hd__a31oi_2        8
     sky130_fd_sc_hd__a32o_2        52
     sky130_fd_sc_hd__a41o_2         9
     sky130_fd_sc_hd__and2_2       176
     sky130_fd_sc_hd__and2b_2       70
     sky130_fd_sc_hd__and3_2       151
     sky130_fd_sc_hd__and3b_2       55
     sky130_fd_sc_hd__and4_2        52
     sky130_fd_sc_hd__and4b_2        8
     sky130_fd_sc_hd__and4bb_2      10
     sky130_fd_sc_hd__buf_1       2072
     sky130_fd_sc_hd__buf_2          8
     sky130_fd_sc_hd__conb_1        74
     sky130_fd_sc_hd__dfxtp_2     1767
     sky130_fd_sc_hd__inv_2        110
     sky130_fd_sc_hd__mux2_1         2
     sky130_fd_sc_hd__mux2_2      1614
     sky130_fd_sc_hd__mux4_2       575
     sky130_fd_sc_hd__nand2_2      336
     sky130_fd_sc_hd__nand2b_2       9
     sky130_fd_sc_hd__nand3_2       13
     sky130_fd_sc_hd__nand3b_2       1
     sky130_fd_sc_hd__nand4_2        1
     sky130_fd_sc_hd__nand4b_2       1
     sky130_fd_sc_hd__nor2_2       361
     sky130_fd_sc_hd__nor2b_2        6
     sky130_fd_sc_hd__nor3_2        17
     sky130_fd_sc_hd__nor3b_2        3
     sky130_fd_sc_hd__nor4_2         3
     sky130_fd_sc_hd__nor4b_2        1
     sky130_fd_sc_hd__o2111a_2       1
     sky130_fd_sc_hd__o211a_2      188
     sky130_fd_sc_hd__o211ai_2      10
     sky130_fd_sc_hd__o21a_2       170
     sky130_fd_sc_hd__o21ai_2      155
     sky130_fd_sc_hd__o21ba_2       14
     sky130_fd_sc_hd__o21bai_2       4
     sky130_fd_sc_hd__o221a_2       32
     sky130_fd_sc_hd__o221ai_2       1
     sky130_fd_sc_hd__o22a_2        89
     sky130_fd_sc_hd__o22ai_2        3
     sky130_fd_sc_hd__o2bb2a_2      11
     sky130_fd_sc_hd__o311a_2        8
     sky130_fd_sc_hd__o311ai_2       1
     sky130_fd_sc_hd__o31a_2        16
     sky130_fd_sc_hd__o31ai_2       10
     sky130_fd_sc_hd__o32a_2        10
     sky130_fd_sc_hd__o41a_2         7
     sky130_fd_sc_hd__or2_2        343
     sky130_fd_sc_hd__or2b_2        33
     sky130_fd_sc_hd__or3_2         71
     sky130_fd_sc_hd__or3b_2        26
     sky130_fd_sc_hd__or4_2         64
     sky130_fd_sc_hd__or4b_2        10
     sky130_fd_sc_hd__or4bb_2        1
     sky130_fd_sc_hd__xnor2_2       50
     sky130_fd_sc_hd__xor2_2        26

   Chip area for module '\alphacore': 113213.580800

63. Executing Verilog backend.
Dumping module `\alphacore'.

Warnings: 307 unique messages, 307 total
End of script. Logfile hash: 2ca9262410, CPU: user 12.43s system 2.26s, MEM: 80.91 MB peak
Yosys 0.34 (git sha1 4a1b5599258, gcc 8.3.1 -fPIC -Os)
Time spent: 57% 2x abc (19 sec), 15% 43x opt_expr (5 sec), ...
