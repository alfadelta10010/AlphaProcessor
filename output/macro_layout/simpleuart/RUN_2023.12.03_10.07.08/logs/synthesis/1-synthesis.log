
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.34 (git sha1 4a1b5599258, gcc 8.3.1 -fPIC -Os)

[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

1. Executing Liberty frontend: /openlane/designs/simpleuart/src/sky130_fd_sc_hd__tt_025C_1v80.lib
Imported 428 cell types from liberty file.

2. Executing Verilog-2005 frontend: /openlane/designs/simpleuart/src/simpleuart.v
Parsing SystemVerilog input from `/openlane/designs/simpleuart/src/simpleuart.v' to AST representation.
Generating RTLIL representation for module `\simpleuart'.
Successfully finished Verilog frontend.

3. Generating Graphviz representation of design.
Writing dot description to `/openlane/designs/simpleuart/runs/RUN_2023.12.03_10.07.08/tmp/synthesis/hierarchy.dot'.
Dumping module simpleuart to page 1.

4. Executing HIERARCHY pass (managing design hierarchy).

4.1. Analyzing design hierarchy..
Top module:  \simpleuart

4.2. Analyzing design hierarchy..
Top module:  \simpleuart
Removed 0 unused modules.
Renaming module simpleuart to simpleuart.

5. Executing TRIBUF pass.

6. Executing HIERARCHY pass (managing design hierarchy).

6.1. Analyzing design hierarchy..
Top module:  \simpleuart

6.2. Analyzing design hierarchy..
Top module:  \simpleuart
Removed 0 unused modules.

7. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

8. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 3 switch rules as full_case in process $proc$/openlane/designs/simpleuart/src/simpleuart.v:90$16 in module simpleuart.
Marked 2 switch rules as full_case in process $proc$/openlane/designs/simpleuart/src/simpleuart.v:47$7 in module simpleuart.
Marked 1 switch rules as full_case in process $proc$/openlane/designs/simpleuart/src/simpleuart.v:36$5 in module simpleuart.
Removed a total of 0 dead cases.

9. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 1 redundant assignment.
Promoted 0 assignments to connections.

10. Executing PROC_INIT pass (extract init attributes).

11. Executing PROC_ARST pass (detect async resets in processes).

12. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~17 debug messages>

13. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\simpleuart.$proc$/openlane/designs/simpleuart/src/simpleuart.v:90$16'.
     1/4: $0\send_divcnt[31:0]
     2/4: $0\send_dummy[0:0]
     3/4: $0\send_bitcnt[3:0]
     4/4: $0\send_pattern[9:0]
Creating decoders for process `\simpleuart.$proc$/openlane/designs/simpleuart/src/simpleuart.v:47$7'.
     1/5: $0\recv_divcnt[31:0]
     2/5: $0\recv_buf_valid[0:0]
     3/5: $0\recv_buf_data[7:0]
     4/5: $0\recv_pattern[7:0]
     5/5: $0\recv_state[3:0]
Creating decoders for process `\simpleuart.$proc$/openlane/designs/simpleuart/src/simpleuart.v:36$5'.
     1/4: $0\cfg_divider[31:0] [31:24]
     2/4: $0\cfg_divider[31:0] [23:16]
     3/4: $0\cfg_divider[31:0] [15:8]
     4/4: $0\cfg_divider[31:0] [7:0]

14. Executing PROC_DLATCH pass (convert process syncs to latches).

15. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\simpleuart.\send_pattern' using process `\simpleuart.$proc$/openlane/designs/simpleuart/src/simpleuart.v:90$16'.
  created $dff cell `$procdff$144' with positive edge clock.
Creating register for signal `\simpleuart.\send_bitcnt' using process `\simpleuart.$proc$/openlane/designs/simpleuart/src/simpleuart.v:90$16'.
  created $dff cell `$procdff$145' with positive edge clock.
Creating register for signal `\simpleuart.\send_divcnt' using process `\simpleuart.$proc$/openlane/designs/simpleuart/src/simpleuart.v:90$16'.
  created $dff cell `$procdff$146' with positive edge clock.
Creating register for signal `\simpleuart.\send_dummy' using process `\simpleuart.$proc$/openlane/designs/simpleuart/src/simpleuart.v:90$16'.
  created $dff cell `$procdff$147' with positive edge clock.
Creating register for signal `\simpleuart.\recv_state' using process `\simpleuart.$proc$/openlane/designs/simpleuart/src/simpleuart.v:47$7'.
  created $dff cell `$procdff$148' with positive edge clock.
Creating register for signal `\simpleuart.\recv_divcnt' using process `\simpleuart.$proc$/openlane/designs/simpleuart/src/simpleuart.v:47$7'.
  created $dff cell `$procdff$149' with positive edge clock.
Creating register for signal `\simpleuart.\recv_pattern' using process `\simpleuart.$proc$/openlane/designs/simpleuart/src/simpleuart.v:47$7'.
  created $dff cell `$procdff$150' with positive edge clock.
Creating register for signal `\simpleuart.\recv_buf_data' using process `\simpleuart.$proc$/openlane/designs/simpleuart/src/simpleuart.v:47$7'.
  created $dff cell `$procdff$151' with positive edge clock.
Creating register for signal `\simpleuart.\recv_buf_valid' using process `\simpleuart.$proc$/openlane/designs/simpleuart/src/simpleuart.v:47$7'.
  created $dff cell `$procdff$152' with positive edge clock.
Creating register for signal `\simpleuart.\cfg_divider' using process `\simpleuart.$proc$/openlane/designs/simpleuart/src/simpleuart.v:36$5'.
  created $dff cell `$procdff$153' with positive edge clock.

16. Executing PROC_MEMWR pass (convert process memory writes to cells).

17. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 5 empty switches in `\simpleuart.$proc$/openlane/designs/simpleuart/src/simpleuart.v:90$16'.
Removing empty process `simpleuart.$proc$/openlane/designs/simpleuart/src/simpleuart.v:90$16'.
Found and cleaned up 7 empty switches in `\simpleuart.$proc$/openlane/designs/simpleuart/src/simpleuart.v:47$7'.
Removing empty process `simpleuart.$proc$/openlane/designs/simpleuart/src/simpleuart.v:47$7'.
Found and cleaned up 5 empty switches in `\simpleuart.$proc$/openlane/designs/simpleuart/src/simpleuart.v:36$5'.
Removing empty process `simpleuart.$proc$/openlane/designs/simpleuart/src/simpleuart.v:36$5'.
Cleaned up 17 empty switches.

18. Executing CHECK pass (checking for obvious problems).
Checking module simpleuart...
Found and reported 0 problems.

19. Executing OPT_EXPR pass (perform const folding).
Optimizing module simpleuart.
<suppressed ~19 debug messages>

20. Executing FLATTEN pass (flatten design).

21. Executing OPT_EXPR pass (perform const folding).
Optimizing module simpleuart.

22. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \simpleuart..
Removed 4 unused cells and 59 unused wires.
<suppressed ~6 debug messages>

23. Executing OPT pass (performing simple optimizations).

23.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module simpleuart.

23.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\simpleuart'.
<suppressed ~30 debug messages>
Removed a total of 10 cells.

23.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \simpleuart..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~15 debug messages>

23.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \simpleuart.
    New ctrl vector for $pmux cell $procmux$101: $auto$opt_reduce.cc:134:opt_pmux$155
  Optimizing cells in module \simpleuart.
Performed a total of 1 changes.

23.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\simpleuart'.
Removed a total of 0 cells.

23.6. Executing OPT_DFF pass (perform DFF optimizations).

23.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \simpleuart..
Removed 0 unused cells and 10 unused wires.
<suppressed ~1 debug messages>

23.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module simpleuart.

23.9. Rerunning OPT passes. (Maybe there is more to do..)

23.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \simpleuart..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~15 debug messages>

23.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \simpleuart.
Performed a total of 0 changes.

23.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\simpleuart'.
Removed a total of 0 cells.

23.13. Executing OPT_DFF pass (perform DFF optimizations).

23.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \simpleuart..

23.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module simpleuart.

23.16. Finished OPT passes. (There is nothing left to do.)

24. Executing FSM pass (extract and optimize FSM).

24.1. Executing FSM_DETECT pass (finding FSMs in design).

24.2. Executing FSM_EXTRACT pass (extracting FSM from design).

24.3. Executing FSM_OPT pass (simple optimizations of FSMs).

24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \simpleuart..

24.5. Executing FSM_OPT pass (simple optimizations of FSMs).

24.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

24.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

24.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

25. Executing OPT pass (performing simple optimizations).

25.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module simpleuart.

25.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\simpleuart'.
Removed a total of 0 cells.

25.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \simpleuart..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~15 debug messages>

25.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \simpleuart.
Performed a total of 0 changes.

25.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\simpleuart'.
Removed a total of 0 cells.

25.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $procdff$153 ($dff) from module simpleuart (D = { $procmux$124_Y $procmux$129_Y $procmux$134_Y $procmux$139_Y }, Q = \cfg_divider, rval = 1).
Adding EN signal on $auto$ff.cc:266:slice$156 ($sdff) from module simpleuart (D = \reg_div_di [7:0], Q = \cfg_divider [7:0]).
Adding EN signal on $auto$ff.cc:266:slice$156 ($sdff) from module simpleuart (D = \reg_div_di [15:8], Q = \cfg_divider [15:8]).
Adding EN signal on $auto$ff.cc:266:slice$156 ($sdff) from module simpleuart (D = \reg_div_di [23:16], Q = \cfg_divider [23:16]).
Adding EN signal on $auto$ff.cc:266:slice$156 ($sdff) from module simpleuart (D = \reg_div_di [31:24], Q = \cfg_divider [31:24]).
Adding SRST signal on $procdff$152 ($dff) from module simpleuart (D = $procmux$85_Y, Q = \recv_buf_valid, rval = 1'0).
Adding SRST signal on $procdff$151 ($dff) from module simpleuart (D = $procmux$93_Y, Q = \recv_buf_data, rval = 8'00000000).
Adding EN signal on $auto$ff.cc:266:slice$162 ($sdff) from module simpleuart (D = \recv_pattern, Q = \recv_buf_data).
Adding SRST signal on $procdff$150 ($dff) from module simpleuart (D = $procmux$101_Y, Q = \recv_pattern, rval = 8'00000000).
Adding EN signal on $auto$ff.cc:266:slice$166 ($sdff) from module simpleuart (D = { \ser_rx \recv_pattern [7:1] }, Q = \recv_pattern).
Adding SRST signal on $procdff$149 ($dff) from module simpleuart (D = $procmux$71_Y, Q = \recv_divcnt, rval = 0).
Adding SRST signal on $procdff$148 ($dff) from module simpleuart (D = $procmux$113_Y, Q = \recv_state, rval = 4'0000).
Adding EN signal on $auto$ff.cc:266:slice$173 ($sdff) from module simpleuart (D = $procmux$113_Y, Q = \recv_state).
Adding SRST signal on $procdff$147 ($dff) from module simpleuart (D = $procmux$41_Y, Q = \send_dummy, rval = 1'1).
Adding EN signal on $auto$ff.cc:266:slice$185 ($sdff) from module simpleuart (D = $procmux$41_Y, Q = \send_dummy).
Adding SRST signal on $procdff$146 ($dff) from module simpleuart (D = $add$/openlane/designs/simpleuart/src/simpleuart.v:93$18_Y, Q = \send_divcnt, rval = 0).
Adding SRST signal on $procdff$145 ($dff) from module simpleuart (D = $procmux$52_Y, Q = \send_bitcnt, rval = 4'0000).
Adding EN signal on $auto$ff.cc:266:slice$194 ($sdff) from module simpleuart (D = $procmux$52_Y, Q = \send_bitcnt).
Adding SRST signal on $procdff$144 ($dff) from module simpleuart (D = $procmux$60_Y [8:0], Q = \send_pattern [8:0], rval = 9'111111111).
Adding SRST signal on $procdff$144 ($dff) from module simpleuart (D = $procmux$57_Y [9], Q = \send_pattern [9], rval = 1'1).
Adding EN signal on $auto$ff.cc:266:slice$203 ($sdff) from module simpleuart (D = 1'1, Q = \send_pattern [9]).
Adding EN signal on $auto$ff.cc:266:slice$198 ($sdff) from module simpleuart (D = $procmux$60_Y [8:0], Q = \send_pattern [8:0]).
Setting constant 1-bit at position 0 on $auto$ff.cc:266:slice$208 ($sdffe) from module simpleuart.

25.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \simpleuart..
Removed 27 unused cells and 24 unused wires.
<suppressed ~28 debug messages>

25.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module simpleuart.
<suppressed ~4 debug messages>

25.9. Rerunning OPT passes. (Maybe there is more to do..)

25.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \simpleuart..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~8 debug messages>

25.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \simpleuart.
Performed a total of 0 changes.

25.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\simpleuart'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

25.13. Executing OPT_DFF pass (perform DFF optimizations).

25.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \simpleuart..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

25.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module simpleuart.

25.16. Rerunning OPT passes. (Maybe there is more to do..)

25.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \simpleuart..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~8 debug messages>

25.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \simpleuart.
Performed a total of 0 changes.

25.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\simpleuart'.
Removed a total of 0 cells.

25.20. Executing OPT_DFF pass (perform DFF optimizations).

25.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \simpleuart..

25.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module simpleuart.

25.23. Finished OPT passes. (There is nothing left to do.)

26. Executing WREDUCE pass (reducing word size of cells).
Removed top 31 bits (of 32) from port B of cell simpleuart.$add$/openlane/designs/simpleuart/src/simpleuart.v:55$9 ($add).
Removed top 31 bits (of 32) from port B of cell simpleuart.$add$/openlane/designs/simpleuart/src/simpleuart.v:80$15 ($add).
Removed top 28 bits (of 32) from port Y of cell simpleuart.$add$/openlane/designs/simpleuart/src/simpleuart.v:80$15 ($add).
Removed top 31 bits (of 32) from port B of cell simpleuart.$add$/openlane/designs/simpleuart/src/simpleuart.v:93$18 ($add).
Removed top 31 bits (of 32) from port B of cell simpleuart.$sub$/openlane/designs/simpleuart/src/simpleuart.v:113$26 ($sub).
Removed top 28 bits (of 32) from port Y of cell simpleuart.$sub$/openlane/designs/simpleuart/src/simpleuart.v:113$26 ($sub).
Removed top 1 bits (of 10) from mux cell simpleuart.$procmux$57 ($mux).
Removed top 1 bits (of 10) from mux cell simpleuart.$procmux$60 ($mux).
Removed top 3 bits (of 4) from port B of cell simpleuart.$procmux$103_CMP0 ($eq).
Removed top 28 bits (of 32) from wire simpleuart.$add$/openlane/designs/simpleuart/src/simpleuart.v:80$15_Y.
Removed top 1 bits (of 10) from wire simpleuart.send_pattern.

27. Executing PEEPOPT pass (run peephole optimizers).

28. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \simpleuart..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

29. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module simpleuart:
  creating $macc model for $add$/openlane/designs/simpleuart/src/simpleuart.v:55$9 ($add).
  creating $macc model for $add$/openlane/designs/simpleuart/src/simpleuart.v:80$15 ($add).
  creating $macc model for $add$/openlane/designs/simpleuart/src/simpleuart.v:93$18 ($add).
  creating $macc model for $sub$/openlane/designs/simpleuart/src/simpleuart.v:113$26 ($sub).
  creating $alu model for $macc $sub$/openlane/designs/simpleuart/src/simpleuart.v:113$26.
  creating $alu model for $macc $add$/openlane/designs/simpleuart/src/simpleuart.v:93$18.
  creating $alu model for $macc $add$/openlane/designs/simpleuart/src/simpleuart.v:80$15.
  creating $alu model for $macc $add$/openlane/designs/simpleuart/src/simpleuart.v:55$9.
  creating $alu model for $gt$/openlane/designs/simpleuart/src/simpleuart.v:111$24 ($gt): new $alu
  creating $alu model for $gt$/openlane/designs/simpleuart/src/simpleuart.v:65$12 ($gt): new $alu
  creating $alu model for $gt$/openlane/designs/simpleuart/src/simpleuart.v:71$13 ($gt): new $alu
  creating $alu cell for $gt$/openlane/designs/simpleuart/src/simpleuart.v:71$13: $auto$alumacc.cc:485:replace_alu$217
  creating $alu cell for $gt$/openlane/designs/simpleuart/src/simpleuart.v:65$12: $auto$alumacc.cc:485:replace_alu$228
  creating $alu cell for $gt$/openlane/designs/simpleuart/src/simpleuart.v:111$24: $auto$alumacc.cc:485:replace_alu$233
  creating $alu cell for $add$/openlane/designs/simpleuart/src/simpleuart.v:55$9: $auto$alumacc.cc:485:replace_alu$238
  creating $alu cell for $add$/openlane/designs/simpleuart/src/simpleuart.v:80$15: $auto$alumacc.cc:485:replace_alu$241
  creating $alu cell for $add$/openlane/designs/simpleuart/src/simpleuart.v:93$18: $auto$alumacc.cc:485:replace_alu$244
  creating $alu cell for $sub$/openlane/designs/simpleuart/src/simpleuart.v:113$26: $auto$alumacc.cc:485:replace_alu$247
  created 7 $alu and 0 $macc cells.

30. Executing SHARE pass (SAT-based resource sharing).

31. Executing OPT pass (performing simple optimizations).

31.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module simpleuart.
<suppressed ~6 debug messages>

31.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\simpleuart'.
Removed a total of 0 cells.

31.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \simpleuart..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~8 debug messages>

31.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \simpleuart.
Performed a total of 0 changes.

31.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\simpleuart'.
Removed a total of 0 cells.

31.6. Executing OPT_DFF pass (perform DFF optimizations).

31.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \simpleuart..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

31.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module simpleuart.

31.9. Rerunning OPT passes. (Maybe there is more to do..)

31.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \simpleuart..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~8 debug messages>

31.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \simpleuart.
Performed a total of 0 changes.

31.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\simpleuart'.
Removed a total of 0 cells.

31.13. Executing OPT_DFF pass (perform DFF optimizations).

31.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \simpleuart..

31.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module simpleuart.

31.16. Finished OPT passes. (There is nothing left to do.)

32. Executing MEMORY pass.

32.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

32.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

32.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

32.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

32.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

32.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \simpleuart..

32.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

32.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

32.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \simpleuart..

32.10. Executing MEMORY_COLLECT pass (generating $mem cells).

33. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \simpleuart..

34. Executing OPT pass (performing simple optimizations).

34.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module simpleuart.
<suppressed ~8 debug messages>

34.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\simpleuart'.
Removed a total of 0 cells.

34.3. Executing OPT_DFF pass (perform DFF optimizations).

34.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \simpleuart..
Removed 1 unused cells and 8 unused wires.
<suppressed ~2 debug messages>

34.5. Finished fast OPT passes.

35. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

36. Executing OPT pass (performing simple optimizations).

36.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module simpleuart.
<suppressed ~1 debug messages>

36.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\simpleuart'.
Removed a total of 0 cells.

36.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \simpleuart..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~7 debug messages>

36.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \simpleuart.
    Consolidated identical input bits for $mux cell $ternary$/openlane/designs/simpleuart/src/simpleuart.v:34$4:
      Old ports: A=32'11111111111111111111111111111111, B={ 24'000000000000000000000000 \recv_buf_data }, Y=\reg_dat_do
      New ports: A=9'111111111, B={ 1'0 \recv_buf_data }, Y=\reg_dat_do [8:0]
      New connections: \reg_dat_do [31:9] = { \reg_dat_do [8] \reg_dat_do [8] \reg_dat_do [8] \reg_dat_do [8] \reg_dat_do [8] \reg_dat_do [8] \reg_dat_do [8] \reg_dat_do [8] \reg_dat_do [8] \reg_dat_do [8] \reg_dat_do [8] \reg_dat_do [8] \reg_dat_do [8] \reg_dat_do [8] \reg_dat_do [8] \reg_dat_do [8] \reg_dat_do [8] \reg_dat_do [8] \reg_dat_do [8] \reg_dat_do [8] \reg_dat_do [8] \reg_dat_do [8] \reg_dat_do [8] }
  Optimizing cells in module \simpleuart.
Performed a total of 1 changes.

36.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\simpleuart'.
Removed a total of 0 cells.

36.6. Executing OPT_SHARE pass.

36.7. Executing OPT_DFF pass (perform DFF optimizations).

36.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \simpleuart..

36.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module simpleuart.

36.10. Rerunning OPT passes. (Maybe there is more to do..)

36.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \simpleuart..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~7 debug messages>

36.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \simpleuart.
Performed a total of 0 changes.

36.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\simpleuart'.
Removed a total of 0 cells.

36.14. Executing OPT_SHARE pass.

36.15. Executing OPT_DFF pass (perform DFF optimizations).

36.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \simpleuart..

36.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module simpleuart.

36.18. Finished OPT passes. (There is nothing left to do.)

37. Executing TECHMAP pass (map to technology primitives).

37.1. Executing Verilog-2005 frontend: /build/bin/../share/yosys/techmap.v
Parsing Verilog input from `/build/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

37.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $logic_or.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $not.
Using template $paramod$32a7b7b86c07519b7537abc18e96f0331f97914d\_90_alu for cells of type $alu.
Using template $paramod$fbc7873bff55778c0b3173955b7e4bce1d9d6834\_90_alu for cells of type $alu.
Using template $paramod$ebf89ea36a793f0f77858f212141d47c833068ad\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $sdff.
Using template $paramod$6a42b6fefed750f8a1c58eab59479d960557103c\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $reduce_bool.
Using template $paramod$8742280fdebca84e1c87f2a86ed84f62d558f4cc\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $sdffe.
Using template $paramod$54d740639e1393b22262823179ff783ea9f17a35\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $eq.
Using template $paramod$c2e415ef15bc3ccd2723772353a6b450d3d76206\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $and.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000100 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000100000 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011111 for cells of type $lcu.
No more expansions possible.
<suppressed ~1459 debug messages>

38. Executing OPT pass (performing simple optimizations).

38.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module simpleuart.
<suppressed ~613 debug messages>

38.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\simpleuart'.
<suppressed ~321 debug messages>
Removed a total of 107 cells.

38.3. Executing OPT_DFF pass (perform DFF optimizations).

38.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \simpleuart..
Removed 262 unused cells and 674 unused wires.
<suppressed ~263 debug messages>

38.5. Finished fast OPT passes.

39. Executing ABC pass (technology mapping using ABC).

39.1. Extracting gate netlist of module `\simpleuart' to `<abc-temp-dir>/input.blif'..
Extracted 1013 gates and 1153 wires to a netlist network with 138 inputs and 101 outputs.

39.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

39.1.2. Re-integrating ABC results.
ABC RESULTS:              XNOR cells:       49
ABC RESULTS:               NOR cells:       14
ABC RESULTS:             ORNOT cells:       87
ABC RESULTS:               MUX cells:       42
ABC RESULTS:               NOT cells:        5
ABC RESULTS:                OR cells:      118
ABC RESULTS:              NAND cells:       55
ABC RESULTS:            ANDNOT cells:      389
ABC RESULTS:               AND cells:       24
ABC RESULTS:               XOR cells:      111
ABC RESULTS:        internal signals:      914
ABC RESULTS:           input signals:      138
ABC RESULTS:          output signals:      101
Removing temp directory.

40. Executing OPT pass (performing simple optimizations).

40.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module simpleuart.

40.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\simpleuart'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

40.3. Executing OPT_DFF pass (perform DFF optimizations).

40.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \simpleuart..
Removed 0 unused cells and 558 unused wires.
<suppressed ~1 debug messages>

40.5. Finished fast OPT passes.

41. Executing HIERARCHY pass (managing design hierarchy).

41.1. Analyzing design hierarchy..
Top module:  \simpleuart

41.2. Analyzing design hierarchy..
Top module:  \simpleuart
Removed 0 unused modules.

42. Printing statistics.

=== simpleuart ===

   Number of wires:                841
   Number of wire bits:           1185
   Number of public wires:          22
   Number of public wire bits:     270
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1024
     $_ANDNOT_                     389
     $_AND_                         24
     $_MUX_                         42
     $_NAND_                        55
     $_NOR_                         13
     $_NOT_                          5
     $_ORNOT_                       87
     $_OR_                         118
     $_SDFFE_PN0P_                  55
     $_SDFFE_PN1P_                   2
     $_SDFFE_PP1P_                   9
     $_SDFF_PN0_                    33
     $_SDFF_PP0_                    32
     $_XNOR_                        49
     $_XOR_                        111

43. Executing CHECK pass (checking for obvious problems).
Checking module simpleuart...
Found and reported 0 problems.

44. Generating Graphviz representation of design.
Writing dot description to `/openlane/designs/simpleuart/runs/RUN_2023.12.03_10.07.08/tmp/synthesis/post_techmap.dot'.
Dumping module simpleuart to page 1.

45. Executing SHARE pass (SAT-based resource sharing).

46. Executing OPT pass (performing simple optimizations).

46.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module simpleuart.

46.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\simpleuart'.
Removed a total of 0 cells.

46.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \simpleuart..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

46.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \simpleuart.
Performed a total of 0 changes.

46.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\simpleuart'.
Removed a total of 0 cells.

46.6. Executing OPT_DFF pass (perform DFF optimizations).

46.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \simpleuart..

46.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module simpleuart.

46.9. Finished OPT passes. (There is nothing left to do.)

47. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \simpleuart..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

48. Printing statistics.

=== simpleuart ===

   Number of wires:                840
   Number of wire bits:           1153
   Number of public wires:          21
   Number of public wire bits:     238
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1024
     $_ANDNOT_                     389
     $_AND_                         24
     $_MUX_                         42
     $_NAND_                        55
     $_NOR_                         13
     $_NOT_                          5
     $_ORNOT_                       87
     $_OR_                         118
     $_SDFFE_PN0P_                  55
     $_SDFFE_PN1P_                   2
     $_SDFFE_PP1P_                   9
     $_SDFF_PN0_                    33
     $_SDFF_PP0_                    32
     $_XNOR_                        49
     $_XOR_                        111

mapping tbuf

49. Executing TECHMAP pass (map to technology primitives).

49.1. Executing Verilog-2005 frontend: /home/vsduser/Desktop/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v
Parsing Verilog input from `/home/vsduser/Desktop/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v' to AST representation.
Generating RTLIL representation for module `\$_TBUF_'.
Successfully finished Verilog frontend.

49.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

50. Executing SIMPLEMAP pass (map simple cells to gate primitives).

51. Executing TECHMAP pass (map to technology primitives).

51.1. Executing Verilog-2005 frontend: /home/vsduser/Desktop/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v
Parsing Verilog input from `/home/vsduser/Desktop/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Successfully finished Verilog frontend.

51.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

52. Executing SIMPLEMAP pass (map simple cells to gate primitives).

53. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell sky130_fd_sc_hd__dfxtp_2 (noninv, pins=3, area=21.27) is a direct match for cell type $_DFF_P_.
  cell sky130_fd_sc_hd__dfrtp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN0_.
  cell sky130_fd_sc_hd__dfstp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN1_.
  cell sky130_fd_sc_hd__dfbbn_2 (noninv, pins=6, area=35.03) is a direct match for cell type $_DFFSR_NNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \sky130_fd_sc_hd__dfxtp_2 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \sky130_fd_sc_hd__dfrtp_2 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RESET_B( R));
    \sky130_fd_sc_hd__dfstp_2 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SET_B( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    \sky130_fd_sc_hd__dfbbn_2 _DFFSR_NNN_ (.CLK_N( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

53.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\simpleuart':
  mapped 131 $_DFF_P_ cells to \sky130_fd_sc_hd__dfxtp_2 cells.

54. Printing statistics.

=== simpleuart ===

   Number of wires:               1037
   Number of wire bits:           1350
   Number of public wires:          21
   Number of public wire bits:     238
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1221
     $_ANDNOT_                     389
     $_AND_                         24
     $_MUX_                        239
     $_NAND_                        55
     $_NOR_                         13
     $_NOT_                          5
     $_ORNOT_                       87
     $_OR_                         118
     $_XNOR_                        49
     $_XOR_                        111
     sky130_fd_sc_hd__dfxtp_2      131

[INFO]: USING STRATEGY AREA 0

55. Executing ABC pass (technology mapping using ABC).

55.1. Extracting gate netlist of module `\simpleuart' to `/tmp/yosys-abc-X4r0V6/input.blif'..
Extracted 1090 gates and 1271 wires to a netlist network with 179 inputs and 141 outputs.

55.1.1. Executing ABC.
Running ABC command: "/build/bin/yosys-abc" -s -f /tmp/yosys-abc-X4r0V6/abc.script 2>&1
ABC: ABC command line: "source /tmp/yosys-abc-X4r0V6/abc.script".
ABC: 
ABC: + read_blif /tmp/yosys-abc-X4r0V6/input.blif 
ABC: + read_lib -w /openlane/designs/simpleuart/runs/RUN_2023.12.03_10.07.08/tmp/synthesis/trimmed.lib 
ABC: Parsing finished successfully.  Parsing time =     0.10 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_8".
ABC: Library "sky130A_merged" from "/openlane/designs/simpleuart/runs/RUN_2023.12.03_10.07.08/tmp/synthesis/trimmed.lib" has 175 cells (17 skipped: 14 seq; 3 tri-state; 0 no func; 0 dont_use).  Time =     0.14 sec
ABC: Memory =    9.54 MB. Time =     0.14 sec
ABC: Warning: Detected 2 multi-output gates (for example, "sky130_fd_sc_hd__fa_1").
ABC: + read_constr -v /openlane/designs/simpleuart/runs/RUN_2023.12.03_10.07.08/tmp/synthesis/synthesis.sdc 
ABC: Setting driving cell to be "sky130_fd_sc_hd__inv_2".
ABC: Setting output load to be 33.442001.
ABC: + read_constr /openlane/designs/simpleuart/runs/RUN_2023.12.03_10.07.08/tmp/synthesis/synthesis.sdc 
ABC: + fx 
ABC: + mfs 
ABC: + strash 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + retime -D -D 1100000.0 -M 5 
ABC: + scleanup 
ABC: Error: The network is combinational.
ABC: + fraig_store 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + fraig_restore 
ABC: + amap -m -Q 0.1 -F 20 -A 20 -C 5000 
ABC: + retime -D -D 1100000.0 
ABC: + &get -n 
ABC: + &st 
ABC: + &dch 
ABC: + &nf 
ABC: + &put 
ABC: + buffer -N 10 -S 750.0 
ABC: + upsize -D 1100000.0 
ABC: Current delay (4062.29 ps) does not exceed the target delay (1100000.00 ps). Upsizing is not performed.
ABC: + dnsize -D 1100000.0 
ABC: + stime -p 
ABC: WireLoad = "none"  Gates =    779 ( 26.2 %)   Cap =  9.8 ff (  5.3 %)   Area =     5779.29 ( 73.8 %)   Delay =  3999.13 ps  ( 14.8 %)               
ABC: Path  0 --      53 : 0    5 pi                        A =   0.00  Df =  46.8  -26.0 ps  S =  70.6 ps  Cin =  0.0 ff  Cout =  14.0 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --     349 : 1    4 sky130_fd_sc_hd__inv_2    A =   3.75  Df =  99.0  -10.7 ps  S =  66.7 ps  Cin =  4.5 ff  Cout =  13.2 ff  Cmax = 331.4 ff  G =  283  
ABC: Path  2 --     350 : 2    2 sky130_fd_sc_hd__and2_2   A =   7.51  Df = 270.7  -31.6 ps  S =  58.6 ps  Cin =  1.5 ff  Cout =   7.3 ff  Cmax = 303.0 ff  G =  470  
ABC: Path  3 --     352 : 5    2 sky130_fd_sc_hd__a2111o_2 A =  12.51  Df = 660.4 -303.5 ps  S =  61.2 ps  Cin =  2.4 ff  Cout =   3.1 ff  Cmax = 324.1 ff  G =  122  
ABC: Path  4 --     412 : 3    2 sky130_fd_sc_hd__or3b_2   A =   8.76  Df =1127.3 -641.1 ps  S =  80.3 ps  Cin =  1.5 ff  Cout =   4.0 ff  Cmax = 269.2 ff  G =  253  
ABC: Path  5 --     426 : 4    2 sky130_fd_sc_hd__or4b_2   A =  10.01  Df =1801.7-1133.2 ps  S = 104.6 ps  Cin =  1.5 ff  Cout =   4.1 ff  Cmax = 265.5 ff  G =  264  
ABC: Path  6 --     451 : 3    2 sky130_fd_sc_hd__or3_2    A =   7.51  Df =2307.1-1522.5 ps  S =  90.1 ps  Cin =  1.5 ff  Cout =   7.2 ff  Cmax = 310.4 ff  G =  439  
ABC: Path  7 --     452 : 4    1 sky130_fd_sc_hd__a31o_2   A =   8.76  Df =2527.8-1549.1 ps  S =  36.5 ps  Cin =  2.4 ff  Cout =   2.4 ff  Cmax = 271.9 ff  G =   99  
ABC: Path  8 --     473 : 4    2 sky130_fd_sc_hd__a31o_2   A =   8.76  Df =2750.0 -220.5 ps  S =  43.6 ps  Cin =  2.4 ff  Cout =   3.8 ff  Cmax = 271.9 ff  G =  152  
ABC: Path  9 --     903 : 2    1 sky130_fd_sc_hd__or2_2    A =   6.26  Df =3029.6 -408.0 ps  S =  51.5 ps  Cin =  1.5 ff  Cout =   2.2 ff  Cmax = 299.4 ff  G =  144  
ABC: Path 10 --     904 : 1    9 sky130_fd_sc_hd__buf_1    A =   3.75  Df =3223.7 -319.1 ps  S = 347.8 ps  Cin =  2.1 ff  Cout =  29.2 ff  Cmax = 130.0 ff  G = 1334  
ABC: Path 11 --     946 : 4    5 sky130_fd_sc_hd__o211a_2  A =  10.01  Df =3422.4 -240.1 ps  S =  81.1 ps  Cin =  2.4 ff  Cout =   9.7 ff  Cmax = 268.3 ff  G =  395  
ABC: Path 12 --     961 : 1   10 sky130_fd_sc_hd__buf_1    A =   3.75  Df =3567.1 -189.9 ps  S = 195.0 ps  Cin =  2.1 ff  Cout =  15.8 ff  Cmax = 130.0 ff  G =  720  
ABC: Path 13 --     962 : 3    1 sky130_fd_sc_hd__and3b_2  A =  10.01  Df =3784.5 -209.3 ps  S =  41.0 ps  Cin =  1.5 ff  Cout =   2.2 ff  Cmax = 309.5 ff  G =  142  
ABC: Path 14 --     963 : 1    1 sky130_fd_sc_hd__buf_1    A =   3.75  Df =3999.1 -102.1 ps  S = 396.6 ps  Cin =  2.1 ff  Cout =  33.4 ff  Cmax = 130.0 ff  G = 1590  
ABC: Start-point = pi52 (\reg_div_do [31]).  End-point = po104 ($auto$rtlil.cc:2669:MuxGate$4223).
ABC: + print_stats -m 
ABC: netlist                       : i/o =  179/  141  lat =    0  nd =   779  edge =   1896  area =5779.56  delay =15.00  lev = 15
ABC: + write_blif /tmp/yosys-abc-X4r0V6/output.blif 

55.1.2. Re-integrating ABC results.
ABC RESULTS:   sky130_fd_sc_hd__o21ba_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o2111ai_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__xor2_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o311a_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nor3_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a21bo_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o2bb2a_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a32o_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__nand3_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or4_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__a22oi_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o31a_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a311o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a211o_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__or2b_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__a221oi_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a2111o_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__or4b_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o221a_2 cells:       11
ABC RESULTS:   sky130_fd_sc_hd__nand4b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a22o_2 cells:       13
ABC RESULTS:   sky130_fd_sc_hd__a21oi_2 cells:        7
ABC RESULTS:   sky130_fd_sc_hd__a2bb2o_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__o22a_2 cells:       25
ABC RESULTS:   sky130_fd_sc_hd__a221o_2 cells:       19
ABC RESULTS:   sky130_fd_sc_hd__a21boi_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o2111a_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__a31o_2 cells:        8
ABC RESULTS:   sky130_fd_sc_hd__xnor2_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__inv_2 cells:       77
ABC RESULTS:   sky130_fd_sc_hd__a211oi_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__or3b_2 cells:        8
ABC RESULTS:   sky130_fd_sc_hd__a2111oi_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o21a_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__or3_2 cells:       20
ABC RESULTS:   sky130_fd_sc_hd__o211a_2 cells:       16
ABC RESULTS:   sky130_fd_sc_hd__and2b_2 cells:       14
ABC RESULTS:   sky130_fd_sc_hd__nor2_2 cells:       47
ABC RESULTS:   sky130_fd_sc_hd__and4_2 cells:       19
ABC RESULTS:   sky130_fd_sc_hd__and3b_2 cells:       39
ABC RESULTS:   sky130_fd_sc_hd__or2_2 cells:       57
ABC RESULTS:   sky130_fd_sc_hd__nand2_2 cells:       47
ABC RESULTS:   sky130_fd_sc_hd__and3_2 cells:       33
ABC RESULTS:   sky130_fd_sc_hd__o21ai_2 cells:        9
ABC RESULTS:   sky130_fd_sc_hd__a21o_2 cells:       19
ABC RESULTS:   sky130_fd_sc_hd__mux2_2 cells:       40
ABC RESULTS:   sky130_fd_sc_hd__and2_2 cells:       58
ABC RESULTS:   sky130_fd_sc_hd__buf_1 cells:      127
ABC RESULTS:        internal signals:      951
ABC RESULTS:           input signals:      179
ABC RESULTS:          output signals:      141
Removing temp directory.

56. Executing SETUNDEF pass (replace undef values with defined constants).

57. Executing HILOMAP pass (mapping to constant drivers).

58. Executing SPLITNETS pass (splitting up multi-bit signals).

59. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \simpleuart..
Removed 0 unused cells and 1302 unused wires.
<suppressed ~2 debug messages>

60. Executing INSBUF pass (insert buffer cells for connected wires).
Add simpleuart/$auto$insbuf.cc:97:execute$5092: \reg_dat_do [31] -> \reg_dat_do [8]
Add simpleuart/$auto$insbuf.cc:97:execute$5093: \reg_dat_do [31] -> \reg_dat_do [9]
Add simpleuart/$auto$insbuf.cc:97:execute$5094: \reg_dat_do [31] -> \reg_dat_do [10]
Add simpleuart/$auto$insbuf.cc:97:execute$5095: \reg_dat_do [31] -> \reg_dat_do [11]
Add simpleuart/$auto$insbuf.cc:97:execute$5096: \reg_dat_do [31] -> \reg_dat_do [12]
Add simpleuart/$auto$insbuf.cc:97:execute$5097: \reg_dat_do [31] -> \reg_dat_do [13]
Add simpleuart/$auto$insbuf.cc:97:execute$5098: \reg_dat_do [31] -> \reg_dat_do [14]
Add simpleuart/$auto$insbuf.cc:97:execute$5099: \reg_dat_do [31] -> \reg_dat_do [15]
Add simpleuart/$auto$insbuf.cc:97:execute$5100: \reg_dat_do [31] -> \reg_dat_do [16]
Add simpleuart/$auto$insbuf.cc:97:execute$5101: \reg_dat_do [31] -> \reg_dat_do [17]
Add simpleuart/$auto$insbuf.cc:97:execute$5102: \reg_dat_do [31] -> \reg_dat_do [18]
Add simpleuart/$auto$insbuf.cc:97:execute$5103: \reg_dat_do [31] -> \reg_dat_do [19]
Add simpleuart/$auto$insbuf.cc:97:execute$5104: \reg_dat_do [31] -> \reg_dat_do [20]
Add simpleuart/$auto$insbuf.cc:97:execute$5105: \reg_dat_do [31] -> \reg_dat_do [21]
Add simpleuart/$auto$insbuf.cc:97:execute$5106: \reg_dat_do [31] -> \reg_dat_do [22]
Add simpleuart/$auto$insbuf.cc:97:execute$5107: \reg_dat_do [31] -> \reg_dat_do [23]
Add simpleuart/$auto$insbuf.cc:97:execute$5108: \reg_dat_do [31] -> \reg_dat_do [24]
Add simpleuart/$auto$insbuf.cc:97:execute$5109: \reg_dat_do [31] -> \reg_dat_do [25]
Add simpleuart/$auto$insbuf.cc:97:execute$5110: \reg_dat_do [31] -> \reg_dat_do [26]
Add simpleuart/$auto$insbuf.cc:97:execute$5111: \reg_dat_do [31] -> \reg_dat_do [27]
Add simpleuart/$auto$insbuf.cc:97:execute$5112: \reg_dat_do [31] -> \reg_dat_do [28]
Add simpleuart/$auto$insbuf.cc:97:execute$5113: \reg_dat_do [31] -> \reg_dat_do [29]
Add simpleuart/$auto$insbuf.cc:97:execute$5114: \reg_dat_do [31] -> \reg_dat_do [30]

61. Executing CHECK pass (checking for obvious problems).
Checking module simpleuart...
Found and reported 0 problems.

62. Printing statistics.

=== simpleuart ===

   Number of wires:                879
   Number of wire bits:           1006
   Number of public wires:         110
   Number of public wire bits:     237
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                933
     sky130_fd_sc_hd__a2111o_2       4
     sky130_fd_sc_hd__a2111oi_2      1
     sky130_fd_sc_hd__a211o_2        5
     sky130_fd_sc_hd__a211oi_2       5
     sky130_fd_sc_hd__a21bo_2        1
     sky130_fd_sc_hd__a21boi_2       1
     sky130_fd_sc_hd__a21o_2        19
     sky130_fd_sc_hd__a21oi_2        7
     sky130_fd_sc_hd__a221o_2       19
     sky130_fd_sc_hd__a221oi_2       2
     sky130_fd_sc_hd__a22o_2        13
     sky130_fd_sc_hd__a22oi_2        2
     sky130_fd_sc_hd__a2bb2o_2       6
     sky130_fd_sc_hd__a311o_2        1
     sky130_fd_sc_hd__a31o_2         8
     sky130_fd_sc_hd__a32o_2         2
     sky130_fd_sc_hd__and2_2        58
     sky130_fd_sc_hd__and2b_2       14
     sky130_fd_sc_hd__and3_2        33
     sky130_fd_sc_hd__and3b_2       39
     sky130_fd_sc_hd__and4_2        19
     sky130_fd_sc_hd__buf_1        127
     sky130_fd_sc_hd__buf_2         23
     sky130_fd_sc_hd__dfxtp_2      131
     sky130_fd_sc_hd__inv_2         77
     sky130_fd_sc_hd__mux2_2        40
     sky130_fd_sc_hd__nand2_2       47
     sky130_fd_sc_hd__nand3_2        1
     sky130_fd_sc_hd__nand4b_2       1
     sky130_fd_sc_hd__nor2_2        47
     sky130_fd_sc_hd__nor3_2         1
     sky130_fd_sc_hd__o2111a_2       4
     sky130_fd_sc_hd__o2111ai_2      1
     sky130_fd_sc_hd__o211a_2       16
     sky130_fd_sc_hd__o21a_2         6
     sky130_fd_sc_hd__o21ai_2        9
     sky130_fd_sc_hd__o21ba_2        1
     sky130_fd_sc_hd__o221a_2       11
     sky130_fd_sc_hd__o22a_2        25
     sky130_fd_sc_hd__o2bb2a_2       1
     sky130_fd_sc_hd__o311a_2        1
     sky130_fd_sc_hd__o31a_2         2
     sky130_fd_sc_hd__or2_2         57
     sky130_fd_sc_hd__or2b_2         5
     sky130_fd_sc_hd__or3_2         20
     sky130_fd_sc_hd__or3b_2         8
     sky130_fd_sc_hd__or4_2          4
     sky130_fd_sc_hd__or4b_2         2
     sky130_fd_sc_hd__xnor2_2        4
     sky130_fd_sc_hd__xor2_2         2

   Chip area for module '\simpleuart': 8680.825600

63. Executing Verilog backend.
Dumping module `\simpleuart'.

End of script. Logfile hash: 24a6f4a1d7, CPU: user 2.13s system 0.13s, MEM: 50.34 MB peak
Yosys 0.34 (git sha1 4a1b5599258, gcc 8.3.1 -fPIC -Os)
Time spent: 46% 2x abc (1 sec), 12% 4x stat (0 sec), ...
